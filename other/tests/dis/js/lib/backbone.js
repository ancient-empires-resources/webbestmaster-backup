/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
}
if (! _$jscoverage['js/lib/backbone.js']) {
  _$jscoverage['js/lib/backbone.js'] = [];
  _$jscoverage['js/lib/backbone.js'][8] = 0;
  _$jscoverage['js/lib/backbone.js'][11] = 0;
  _$jscoverage['js/lib/backbone.js'][12] = 0;
  _$jscoverage['js/lib/backbone.js'][15] = 0;
  _$jscoverage['js/lib/backbone.js'][19] = 0;
  _$jscoverage['js/lib/backbone.js'][20] = 0;
  _$jscoverage['js/lib/backbone.js'][21] = 0;
  _$jscoverage['js/lib/backbone.js'][25] = 0;
  _$jscoverage['js/lib/backbone.js'][35] = 0;
  _$jscoverage['js/lib/backbone.js'][38] = 0;
  _$jscoverage['js/lib/backbone.js'][39] = 0;
  _$jscoverage['js/lib/backbone.js'][40] = 0;
  _$jscoverage['js/lib/backbone.js'][41] = 0;
  _$jscoverage['js/lib/backbone.js'][44] = 0;
  _$jscoverage['js/lib/backbone.js'][48] = 0;
  _$jscoverage['js/lib/backbone.js'][52] = 0;
  _$jscoverage['js/lib/backbone.js'][53] = 0;
  _$jscoverage['js/lib/backbone.js'][54] = 0;
  _$jscoverage['js/lib/backbone.js'][60] = 0;
  _$jscoverage['js/lib/backbone.js'][66] = 0;
  _$jscoverage['js/lib/backbone.js'][81] = 0;
  _$jscoverage['js/lib/backbone.js'][86] = 0;
  _$jscoverage['js/lib/backbone.js'][87] = 0;
  _$jscoverage['js/lib/backbone.js'][88] = 0;
  _$jscoverage['js/lib/backbone.js'][89] = 0;
  _$jscoverage['js/lib/backbone.js'][90] = 0;
  _$jscoverage['js/lib/backbone.js'][96] = 0;
  _$jscoverage['js/lib/backbone.js'][97] = 0;
  _$jscoverage['js/lib/backbone.js'][98] = 0;
  _$jscoverage['js/lib/backbone.js'][99] = 0;
  _$jscoverage['js/lib/backbone.js'][100] = 0;
  _$jscoverage['js/lib/backbone.js'][102] = 0;
  _$jscoverage['js/lib/backbone.js'][103] = 0;
  _$jscoverage['js/lib/backbone.js'][111] = 0;
  _$jscoverage['js/lib/backbone.js'][112] = 0;
  _$jscoverage['js/lib/backbone.js'][113] = 0;
  _$jscoverage['js/lib/backbone.js'][114] = 0;
  _$jscoverage['js/lib/backbone.js'][115] = 0;
  _$jscoverage['js/lib/backbone.js'][117] = 0;
  _$jscoverage['js/lib/backbone.js'][118] = 0;
  _$jscoverage['js/lib/backbone.js'][119] = 0;
  _$jscoverage['js/lib/backbone.js'][120] = 0;
  _$jscoverage['js/lib/backbone.js'][121] = 0;
  _$jscoverage['js/lib/backbone.js'][122] = 0;
  _$jscoverage['js/lib/backbone.js'][123] = 0;
  _$jscoverage['js/lib/backbone.js'][124] = 0;
  _$jscoverage['js/lib/backbone.js'][125] = 0;
  _$jscoverage['js/lib/backbone.js'][127] = 0;
  _$jscoverage['js/lib/backbone.js'][131] = 0;
  _$jscoverage['js/lib/backbone.js'][135] = 0;
  _$jscoverage['js/lib/backbone.js'][143] = 0;
  _$jscoverage['js/lib/backbone.js'][144] = 0;
  _$jscoverage['js/lib/backbone.js'][145] = 0;
  _$jscoverage['js/lib/backbone.js'][146] = 0;
  _$jscoverage['js/lib/backbone.js'][147] = 0;
  _$jscoverage['js/lib/backbone.js'][148] = 0;
  _$jscoverage['js/lib/backbone.js'][149] = 0;
  _$jscoverage['js/lib/backbone.js'][150] = 0;
  _$jscoverage['js/lib/backbone.js'][156] = 0;
  _$jscoverage['js/lib/backbone.js'][157] = 0;
  _$jscoverage['js/lib/backbone.js'][158] = 0;
  _$jscoverage['js/lib/backbone.js'][159] = 0;
  _$jscoverage['js/lib/backbone.js'][160] = 0;
  _$jscoverage['js/lib/backbone.js'][161] = 0;
  _$jscoverage['js/lib/backbone.js'][162] = 0;
  _$jscoverage['js/lib/backbone.js'][163] = 0;
  _$jscoverage['js/lib/backbone.js'][164] = 0;
  _$jscoverage['js/lib/backbone.js'][166] = 0;
  _$jscoverage['js/lib/backbone.js'][172] = 0;
  _$jscoverage['js/lib/backbone.js'][177] = 0;
  _$jscoverage['js/lib/backbone.js'][178] = 0;
  _$jscoverage['js/lib/backbone.js'][181] = 0;
  _$jscoverage['js/lib/backbone.js'][182] = 0;
  _$jscoverage['js/lib/backbone.js'][183] = 0;
  _$jscoverage['js/lib/backbone.js'][185] = 0;
  _$jscoverage['js/lib/backbone.js'][189] = 0;
  _$jscoverage['js/lib/backbone.js'][190] = 0;
  _$jscoverage['js/lib/backbone.js'][191] = 0;
  _$jscoverage['js/lib/backbone.js'][192] = 0;
  _$jscoverage['js/lib/backbone.js'][194] = 0;
  _$jscoverage['js/lib/backbone.js'][197] = 0;
  _$jscoverage['js/lib/backbone.js'][203] = 0;
  _$jscoverage['js/lib/backbone.js'][204] = 0;
  _$jscoverage['js/lib/backbone.js'][205] = 0;
  _$jscoverage['js/lib/backbone.js'][206] = 0;
  _$jscoverage['js/lib/backbone.js'][207] = 0;
  _$jscoverage['js/lib/backbone.js'][208] = 0;
  _$jscoverage['js/lib/backbone.js'][209] = 0;
  _$jscoverage['js/lib/backbone.js'][210] = 0;
  _$jscoverage['js/lib/backbone.js'][214] = 0;
  _$jscoverage['js/lib/backbone.js'][219] = 0;
  _$jscoverage['js/lib/backbone.js'][220] = 0;
  _$jscoverage['js/lib/backbone.js'][221] = 0;
  _$jscoverage['js/lib/backbone.js'][222] = 0;
  _$jscoverage['js/lib/backbone.js'][223] = 0;
  _$jscoverage['js/lib/backbone.js'][224] = 0;
  _$jscoverage['js/lib/backbone.js'][225] = 0;
  _$jscoverage['js/lib/backbone.js'][226] = 0;
  _$jscoverage['js/lib/backbone.js'][231] = 0;
  _$jscoverage['js/lib/backbone.js'][232] = 0;
  _$jscoverage['js/lib/backbone.js'][236] = 0;
  _$jscoverage['js/lib/backbone.js'][248] = 0;
  _$jscoverage['js/lib/backbone.js'][249] = 0;
  _$jscoverage['js/lib/backbone.js'][250] = 0;
  _$jscoverage['js/lib/backbone.js'][251] = 0;
  _$jscoverage['js/lib/backbone.js'][252] = 0;
  _$jscoverage['js/lib/backbone.js'][253] = 0;
  _$jscoverage['js/lib/backbone.js'][254] = 0;
  _$jscoverage['js/lib/backbone.js'][255] = 0;
  _$jscoverage['js/lib/backbone.js'][256] = 0;
  _$jscoverage['js/lib/backbone.js'][257] = 0;
  _$jscoverage['js/lib/backbone.js'][258] = 0;
  _$jscoverage['js/lib/backbone.js'][262] = 0;
  _$jscoverage['js/lib/backbone.js'][280] = 0;
  _$jscoverage['js/lib/backbone.js'][286] = 0;
  _$jscoverage['js/lib/backbone.js'][291] = 0;
  _$jscoverage['js/lib/backbone.js'][296] = 0;
  _$jscoverage['js/lib/backbone.js'][302] = 0;
  _$jscoverage['js/lib/backbone.js'][309] = 0;
  _$jscoverage['js/lib/backbone.js'][310] = 0;
  _$jscoverage['js/lib/backbone.js'][313] = 0;
  _$jscoverage['js/lib/backbone.js'][314] = 0;
  _$jscoverage['js/lib/backbone.js'][315] = 0;
  _$jscoverage['js/lib/backbone.js'][317] = 0;
  _$jscoverage['js/lib/backbone.js'][320] = 0;
  _$jscoverage['js/lib/backbone.js'][323] = 0;
  _$jscoverage['js/lib/backbone.js'][326] = 0;
  _$jscoverage['js/lib/backbone.js'][327] = 0;
  _$jscoverage['js/lib/backbone.js'][328] = 0;
  _$jscoverage['js/lib/backbone.js'][329] = 0;
  _$jscoverage['js/lib/backbone.js'][330] = 0;
  _$jscoverage['js/lib/backbone.js'][332] = 0;
  _$jscoverage['js/lib/backbone.js'][333] = 0;
  _$jscoverage['js/lib/backbone.js'][334] = 0;
  _$jscoverage['js/lib/backbone.js'][336] = 0;
  _$jscoverage['js/lib/backbone.js'][339] = 0;
  _$jscoverage['js/lib/backbone.js'][342] = 0;
  _$jscoverage['js/lib/backbone.js'][343] = 0;
  _$jscoverage['js/lib/backbone.js'][344] = 0;
  _$jscoverage['js/lib/backbone.js'][345] = 0;
  _$jscoverage['js/lib/backbone.js'][346] = 0;
  _$jscoverage['js/lib/backbone.js'][348] = 0;
  _$jscoverage['js/lib/backbone.js'][350] = 0;
  _$jscoverage['js/lib/backbone.js'][354] = 0;
  _$jscoverage['js/lib/backbone.js'][355] = 0;
  _$jscoverage['js/lib/backbone.js'][356] = 0;
  _$jscoverage['js/lib/backbone.js'][357] = 0;
  _$jscoverage['js/lib/backbone.js'][363] = 0;
  _$jscoverage['js/lib/backbone.js'][364] = 0;
  _$jscoverage['js/lib/backbone.js'][365] = 0;
  _$jscoverage['js/lib/backbone.js'][366] = 0;
  _$jscoverage['js/lib/backbone.js'][367] = 0;
  _$jscoverage['js/lib/backbone.js'][368] = 0;
  _$jscoverage['js/lib/backbone.js'][371] = 0;
  _$jscoverage['js/lib/backbone.js'][372] = 0;
  _$jscoverage['js/lib/backbone.js'][373] = 0;
  _$jscoverage['js/lib/backbone.js'][379] = 0;
  _$jscoverage['js/lib/backbone.js'][384] = 0;
  _$jscoverage['js/lib/backbone.js'][385] = 0;
  _$jscoverage['js/lib/backbone.js'][386] = 0;
  _$jscoverage['js/lib/backbone.js'][392] = 0;
  _$jscoverage['js/lib/backbone.js'][393] = 0;
  _$jscoverage['js/lib/backbone.js'][403] = 0;
  _$jscoverage['js/lib/backbone.js'][404] = 0;
  _$jscoverage['js/lib/backbone.js'][405] = 0;
  _$jscoverage['js/lib/backbone.js'][406] = 0;
  _$jscoverage['js/lib/backbone.js'][407] = 0;
  _$jscoverage['js/lib/backbone.js'][408] = 0;
  _$jscoverage['js/lib/backbone.js'][410] = 0;
  _$jscoverage['js/lib/backbone.js'][416] = 0;
  _$jscoverage['js/lib/backbone.js'][417] = 0;
  _$jscoverage['js/lib/backbone.js'][423] = 0;
  _$jscoverage['js/lib/backbone.js'][430] = 0;
  _$jscoverage['js/lib/backbone.js'][431] = 0;
  _$jscoverage['js/lib/backbone.js'][432] = 0;
  _$jscoverage['js/lib/backbone.js'][433] = 0;
  _$jscoverage['js/lib/backbone.js'][434] = 0;
  _$jscoverage['js/lib/backbone.js'][435] = 0;
  _$jscoverage['js/lib/backbone.js'][436] = 0;
  _$jscoverage['js/lib/backbone.js'][437] = 0;
  _$jscoverage['js/lib/backbone.js'][439] = 0;
  _$jscoverage['js/lib/backbone.js'][440] = 0;
  _$jscoverage['js/lib/backbone.js'][447] = 0;
  _$jscoverage['js/lib/backbone.js'][450] = 0;
  _$jscoverage['js/lib/backbone.js'][451] = 0;
  _$jscoverage['js/lib/backbone.js'][452] = 0;
  _$jscoverage['js/lib/backbone.js'][454] = 0;
  _$jscoverage['js/lib/backbone.js'][457] = 0;
  _$jscoverage['js/lib/backbone.js'][462] = 0;
  _$jscoverage['js/lib/backbone.js'][463] = 0;
  _$jscoverage['js/lib/backbone.js'][465] = 0;
  _$jscoverage['js/lib/backbone.js'][469] = 0;
  _$jscoverage['js/lib/backbone.js'][470] = 0;
  _$jscoverage['js/lib/backbone.js'][475] = 0;
  _$jscoverage['js/lib/backbone.js'][476] = 0;
  _$jscoverage['js/lib/backbone.js'][477] = 0;
  _$jscoverage['js/lib/backbone.js'][478] = 0;
  _$jscoverage['js/lib/backbone.js'][480] = 0;
  _$jscoverage['js/lib/backbone.js'][481] = 0;
  _$jscoverage['js/lib/backbone.js'][482] = 0;
  _$jscoverage['js/lib/backbone.js'][483] = 0;
  _$jscoverage['js/lib/backbone.js'][484] = 0;
  _$jscoverage['js/lib/backbone.js'][486] = 0;
  _$jscoverage['js/lib/backbone.js'][487] = 0;
  _$jscoverage['js/lib/backbone.js'][489] = 0;
  _$jscoverage['js/lib/backbone.js'][491] = 0;
  _$jscoverage['js/lib/backbone.js'][492] = 0;
  _$jscoverage['js/lib/backbone.js'][493] = 0;
  _$jscoverage['js/lib/backbone.js'][496] = 0;
  _$jscoverage['js/lib/backbone.js'][498] = 0;
  _$jscoverage['js/lib/backbone.js'][505] = 0;
  _$jscoverage['js/lib/backbone.js'][506] = 0;
  _$jscoverage['js/lib/backbone.js'][507] = 0;
  _$jscoverage['js/lib/backbone.js'][509] = 0;
  _$jscoverage['js/lib/backbone.js'][510] = 0;
  _$jscoverage['js/lib/backbone.js'][513] = 0;
  _$jscoverage['js/lib/backbone.js'][514] = 0;
  _$jscoverage['js/lib/backbone.js'][515] = 0;
  _$jscoverage['js/lib/backbone.js'][516] = 0;
  _$jscoverage['js/lib/backbone.js'][519] = 0;
  _$jscoverage['js/lib/backbone.js'][520] = 0;
  _$jscoverage['js/lib/backbone.js'][521] = 0;
  _$jscoverage['js/lib/backbone.js'][523] = 0;
  _$jscoverage['js/lib/backbone.js'][525] = 0;
  _$jscoverage['js/lib/backbone.js'][526] = 0;
  _$jscoverage['js/lib/backbone.js'][527] = 0;
  _$jscoverage['js/lib/backbone.js'][534] = 0;
  _$jscoverage['js/lib/backbone.js'][538] = 0;
  _$jscoverage['js/lib/backbone.js'][539] = 0;
  _$jscoverage['js/lib/backbone.js'][545] = 0;
  _$jscoverage['js/lib/backbone.js'][550] = 0;
  _$jscoverage['js/lib/backbone.js'][555] = 0;
  _$jscoverage['js/lib/backbone.js'][560] = 0;
  _$jscoverage['js/lib/backbone.js'][566] = 0;
  _$jscoverage['js/lib/backbone.js'][567] = 0;
  _$jscoverage['js/lib/backbone.js'][568] = 0;
  _$jscoverage['js/lib/backbone.js'][569] = 0;
  _$jscoverage['js/lib/backbone.js'][570] = 0;
  _$jscoverage['js/lib/backbone.js'][571] = 0;
  _$jscoverage['js/lib/backbone.js'][577] = 0;
  _$jscoverage['js/lib/backbone.js'][580] = 0;
  _$jscoverage['js/lib/backbone.js'][581] = 0;
  _$jscoverage['js/lib/backbone.js'][582] = 0;
  _$jscoverage['js/lib/backbone.js'][583] = 0;
  _$jscoverage['js/lib/backbone.js'][584] = 0;
  _$jscoverage['js/lib/backbone.js'][601] = 0;
  _$jscoverage['js/lib/backbone.js'][602] = 0;
  _$jscoverage['js/lib/backbone.js'][603] = 0;
  _$jscoverage['js/lib/backbone.js'][604] = 0;
  _$jscoverage['js/lib/backbone.js'][605] = 0;
  _$jscoverage['js/lib/backbone.js'][606] = 0;
  _$jscoverage['js/lib/backbone.js'][607] = 0;
  _$jscoverage['js/lib/backbone.js'][611] = 0;
  _$jscoverage['js/lib/backbone.js'][612] = 0;
  _$jscoverage['js/lib/backbone.js'][615] = 0;
  _$jscoverage['js/lib/backbone.js'][628] = 0;
  _$jscoverage['js/lib/backbone.js'][633] = 0;
  _$jscoverage['js/lib/backbone.js'][638] = 0;
  _$jscoverage['js/lib/backbone.js'][643] = 0;
  _$jscoverage['js/lib/backbone.js'][644] = 0;
  _$jscoverage['js/lib/backbone.js'][645] = 0;
  _$jscoverage['js/lib/backbone.js'][646] = 0;
  _$jscoverage['js/lib/backbone.js'][647] = 0;
  _$jscoverage['js/lib/backbone.js'][648] = 0;
  _$jscoverage['js/lib/backbone.js'][649] = 0;
  _$jscoverage['js/lib/backbone.js'][650] = 0;
  _$jscoverage['js/lib/backbone.js'][651] = 0;
  _$jscoverage['js/lib/backbone.js'][652] = 0;
  _$jscoverage['js/lib/backbone.js'][653] = 0;
  _$jscoverage['js/lib/backbone.js'][654] = 0;
  _$jscoverage['js/lib/backbone.js'][655] = 0;
  _$jscoverage['js/lib/backbone.js'][656] = 0;
  _$jscoverage['js/lib/backbone.js'][657] = 0;
  _$jscoverage['js/lib/backbone.js'][659] = 0;
  _$jscoverage['js/lib/backbone.js'][661] = 0;
  _$jscoverage['js/lib/backbone.js'][669] = 0;
  _$jscoverage['js/lib/backbone.js'][670] = 0;
  _$jscoverage['js/lib/backbone.js'][671] = 0;
  _$jscoverage['js/lib/backbone.js'][672] = 0;
  _$jscoverage['js/lib/backbone.js'][673] = 0;
  _$jscoverage['js/lib/backbone.js'][674] = 0;
  _$jscoverage['js/lib/backbone.js'][675] = 0;
  _$jscoverage['js/lib/backbone.js'][676] = 0;
  _$jscoverage['js/lib/backbone.js'][677] = 0;
  _$jscoverage['js/lib/backbone.js'][678] = 0;
  _$jscoverage['js/lib/backbone.js'][679] = 0;
  _$jscoverage['js/lib/backbone.js'][680] = 0;
  _$jscoverage['js/lib/backbone.js'][684] = 0;
  _$jscoverage['js/lib/backbone.js'][685] = 0;
  _$jscoverage['js/lib/backbone.js'][686] = 0;
  _$jscoverage['js/lib/backbone.js'][687] = 0;
  _$jscoverage['js/lib/backbone.js'][689] = 0;
  _$jscoverage['js/lib/backbone.js'][694] = 0;
  _$jscoverage['js/lib/backbone.js'][695] = 0;
  _$jscoverage['js/lib/backbone.js'][696] = 0;
  _$jscoverage['js/lib/backbone.js'][697] = 0;
  _$jscoverage['js/lib/backbone.js'][698] = 0;
  _$jscoverage['js/lib/backbone.js'][699] = 0;
  _$jscoverage['js/lib/backbone.js'][700] = 0;
  _$jscoverage['js/lib/backbone.js'][702] = 0;
  _$jscoverage['js/lib/backbone.js'][705] = 0;
  _$jscoverage['js/lib/backbone.js'][706] = 0;
  _$jscoverage['js/lib/backbone.js'][707] = 0;
  _$jscoverage['js/lib/backbone.js'][708] = 0;
  _$jscoverage['js/lib/backbone.js'][709] = 0;
  _$jscoverage['js/lib/backbone.js'][713] = 0;
  _$jscoverage['js/lib/backbone.js'][714] = 0;
  _$jscoverage['js/lib/backbone.js'][715] = 0;
  _$jscoverage['js/lib/backbone.js'][719] = 0;
  _$jscoverage['js/lib/backbone.js'][720] = 0;
  _$jscoverage['js/lib/backbone.js'][721] = 0;
  _$jscoverage['js/lib/backbone.js'][723] = 0;
  _$jscoverage['js/lib/backbone.js'][727] = 0;
  _$jscoverage['js/lib/backbone.js'][728] = 0;
  _$jscoverage['js/lib/backbone.js'][729] = 0;
  _$jscoverage['js/lib/backbone.js'][730] = 0;
  _$jscoverage['js/lib/backbone.js'][731] = 0;
  _$jscoverage['js/lib/backbone.js'][732] = 0;
  _$jscoverage['js/lib/backbone.js'][735] = 0;
  _$jscoverage['js/lib/backbone.js'][736] = 0;
  _$jscoverage['js/lib/backbone.js'][737] = 0;
  _$jscoverage['js/lib/backbone.js'][738] = 0;
  _$jscoverage['js/lib/backbone.js'][744] = 0;
  _$jscoverage['js/lib/backbone.js'][747] = 0;
  _$jscoverage['js/lib/backbone.js'][748] = 0;
  _$jscoverage['js/lib/backbone.js'][749] = 0;
  _$jscoverage['js/lib/backbone.js'][751] = 0;
  _$jscoverage['js/lib/backbone.js'][755] = 0;
  _$jscoverage['js/lib/backbone.js'][763] = 0;
  _$jscoverage['js/lib/backbone.js'][764] = 0;
  _$jscoverage['js/lib/backbone.js'][765] = 0;
  _$jscoverage['js/lib/backbone.js'][767] = 0;
  _$jscoverage['js/lib/backbone.js'][768] = 0;
  _$jscoverage['js/lib/backbone.js'][769] = 0;
  _$jscoverage['js/lib/backbone.js'][770] = 0;
  _$jscoverage['js/lib/backbone.js'][771] = 0;
  _$jscoverage['js/lib/backbone.js'][776] = 0;
  _$jscoverage['js/lib/backbone.js'][781] = 0;
  _$jscoverage['js/lib/backbone.js'][782] = 0;
  _$jscoverage['js/lib/backbone.js'][783] = 0;
  _$jscoverage['js/lib/backbone.js'][788] = 0;
  _$jscoverage['js/lib/backbone.js'][793] = 0;
  _$jscoverage['js/lib/backbone.js'][794] = 0;
  _$jscoverage['js/lib/backbone.js'][795] = 0;
  _$jscoverage['js/lib/backbone.js'][800] = 0;
  _$jscoverage['js/lib/backbone.js'][805] = 0;
  _$jscoverage['js/lib/backbone.js'][806] = 0;
  _$jscoverage['js/lib/backbone.js'][811] = 0;
  _$jscoverage['js/lib/backbone.js'][817] = 0;
  _$jscoverage['js/lib/backbone.js'][818] = 0;
  _$jscoverage['js/lib/backbone.js'][819] = 0;
  _$jscoverage['js/lib/backbone.js'][820] = 0;
  _$jscoverage['js/lib/backbone.js'][822] = 0;
  _$jscoverage['js/lib/backbone.js'][829] = 0;
  _$jscoverage['js/lib/backbone.js'][836] = 0;
  _$jscoverage['js/lib/backbone.js'][837] = 0;
  _$jscoverage['js/lib/backbone.js'][840] = 0;
  _$jscoverage['js/lib/backbone.js'][841] = 0;
  _$jscoverage['js/lib/backbone.js'][843] = 0;
  _$jscoverage['js/lib/backbone.js'][846] = 0;
  _$jscoverage['js/lib/backbone.js'][847] = 0;
  _$jscoverage['js/lib/backbone.js'][852] = 0;
  _$jscoverage['js/lib/backbone.js'][859] = 0;
  _$jscoverage['js/lib/backbone.js'][860] = 0;
  _$jscoverage['js/lib/backbone.js'][861] = 0;
  _$jscoverage['js/lib/backbone.js'][862] = 0;
  _$jscoverage['js/lib/backbone.js'][863] = 0;
  _$jscoverage['js/lib/backbone.js'][864] = 0;
  _$jscoverage['js/lib/backbone.js'][865] = 0;
  _$jscoverage['js/lib/backbone.js'][866] = 0;
  _$jscoverage['js/lib/backbone.js'][867] = 0;
  _$jscoverage['js/lib/backbone.js'][869] = 0;
  _$jscoverage['js/lib/backbone.js'][870] = 0;
  _$jscoverage['js/lib/backbone.js'][877] = 0;
  _$jscoverage['js/lib/backbone.js'][878] = 0;
  _$jscoverage['js/lib/backbone.js'][879] = 0;
  _$jscoverage['js/lib/backbone.js'][880] = 0;
  _$jscoverage['js/lib/backbone.js'][881] = 0;
  _$jscoverage['js/lib/backbone.js'][882] = 0;
  _$jscoverage['js/lib/backbone.js'][883] = 0;
  _$jscoverage['js/lib/backbone.js'][884] = 0;
  _$jscoverage['js/lib/backbone.js'][886] = 0;
  _$jscoverage['js/lib/backbone.js'][887] = 0;
  _$jscoverage['js/lib/backbone.js'][893] = 0;
  _$jscoverage['js/lib/backbone.js'][898] = 0;
  _$jscoverage['js/lib/backbone.js'][904] = 0;
  _$jscoverage['js/lib/backbone.js'][905] = 0;
  _$jscoverage['js/lib/backbone.js'][906] = 0;
  _$jscoverage['js/lib/backbone.js'][912] = 0;
  _$jscoverage['js/lib/backbone.js'][913] = 0;
  _$jscoverage['js/lib/backbone.js'][914] = 0;
  _$jscoverage['js/lib/backbone.js'][915] = 0;
  _$jscoverage['js/lib/backbone.js'][916] = 0;
  _$jscoverage['js/lib/backbone.js'][917] = 0;
  _$jscoverage['js/lib/backbone.js'][918] = 0;
  _$jscoverage['js/lib/backbone.js'][923] = 0;
  _$jscoverage['js/lib/backbone.js'][924] = 0;
  _$jscoverage['js/lib/backbone.js'][925] = 0;
  _$jscoverage['js/lib/backbone.js'][926] = 0;
  _$jscoverage['js/lib/backbone.js'][931] = 0;
  _$jscoverage['js/lib/backbone.js'][932] = 0;
  _$jscoverage['js/lib/backbone.js'][940] = 0;
  _$jscoverage['js/lib/backbone.js'][941] = 0;
  _$jscoverage['js/lib/backbone.js'][942] = 0;
  _$jscoverage['js/lib/backbone.js'][943] = 0;
  _$jscoverage['js/lib/backbone.js'][944] = 0;
  _$jscoverage['js/lib/backbone.js'][946] = 0;
  _$jscoverage['js/lib/backbone.js'][954] = 0;
  _$jscoverage['js/lib/backbone.js'][962] = 0;
  _$jscoverage['js/lib/backbone.js'][963] = 0;
  _$jscoverage['js/lib/backbone.js'][964] = 0;
  _$jscoverage['js/lib/backbone.js'][965] = 0;
  _$jscoverage['js/lib/backbone.js'][966] = 0;
  _$jscoverage['js/lib/backbone.js'][971] = 0;
  _$jscoverage['js/lib/backbone.js'][974] = 0;
  _$jscoverage['js/lib/backbone.js'][975] = 0;
  _$jscoverage['js/lib/backbone.js'][976] = 0;
  _$jscoverage['js/lib/backbone.js'][977] = 0;
  _$jscoverage['js/lib/backbone.js'][979] = 0;
  _$jscoverage['js/lib/backbone.js'][996] = 0;
  _$jscoverage['js/lib/backbone.js'][997] = 0;
  _$jscoverage['js/lib/backbone.js'][998] = 0;
  _$jscoverage['js/lib/backbone.js'][999] = 0;
  _$jscoverage['js/lib/backbone.js'][1000] = 0;
  _$jscoverage['js/lib/backbone.js'][1001] = 0;
  _$jscoverage['js/lib/backbone.js'][1002] = 0;
  _$jscoverage['js/lib/backbone.js'][1006] = 0;
  _$jscoverage['js/lib/backbone.js'][1009] = 0;
  _$jscoverage['js/lib/backbone.js'][1012] = 0;
  _$jscoverage['js/lib/backbone.js'][1020] = 0;
  _$jscoverage['js/lib/backbone.js'][1031] = 0;
  _$jscoverage['js/lib/backbone.js'][1037] = 0;
  _$jscoverage['js/lib/backbone.js'][1038] = 0;
  _$jscoverage['js/lib/backbone.js'][1039] = 0;
  _$jscoverage['js/lib/backbone.js'][1045] = 0;
  _$jscoverage['js/lib/backbone.js'][1046] = 0;
  _$jscoverage['js/lib/backbone.js'][1047] = 0;
  _$jscoverage['js/lib/backbone.js'][1048] = 0;
  _$jscoverage['js/lib/backbone.js'][1049] = 0;
  _$jscoverage['js/lib/backbone.js'][1068] = 0;
  _$jscoverage['js/lib/backbone.js'][1069] = 0;
  _$jscoverage['js/lib/backbone.js'][1070] = 0;
  _$jscoverage['js/lib/backbone.js'][1071] = 0;
  _$jscoverage['js/lib/backbone.js'][1072] = 0;
  _$jscoverage['js/lib/backbone.js'][1073] = 0;
  _$jscoverage['js/lib/backbone.js'][1075] = 0;
  _$jscoverage['js/lib/backbone.js'][1076] = 0;
  _$jscoverage['js/lib/backbone.js'][1077] = 0;
  _$jscoverage['js/lib/backbone.js'][1078] = 0;
  _$jscoverage['js/lib/backbone.js'][1079] = 0;
  _$jscoverage['js/lib/backbone.js'][1080] = 0;
  _$jscoverage['js/lib/backbone.js'][1082] = 0;
  _$jscoverage['js/lib/backbone.js'][1085] = 0;
  _$jscoverage['js/lib/backbone.js'][1092] = 0;
  _$jscoverage['js/lib/backbone.js'][1093] = 0;
  _$jscoverage['js/lib/backbone.js'][1101] = 0;
  _$jscoverage['js/lib/backbone.js'][1102] = 0;
  _$jscoverage['js/lib/backbone.js'][1103] = 0;
  _$jscoverage['js/lib/backbone.js'][1104] = 0;
  _$jscoverage['js/lib/backbone.js'][1105] = 0;
  _$jscoverage['js/lib/backbone.js'][1106] = 0;
  _$jscoverage['js/lib/backbone.js'][1108] = 0;
  _$jscoverage['js/lib/backbone.js'][1132] = 0;
  _$jscoverage['js/lib/backbone.js'][1133] = 0;
  _$jscoverage['js/lib/backbone.js'][1136] = 0;
  _$jscoverage['js/lib/backbone.js'][1142] = 0;
  _$jscoverage['js/lib/backbone.js'][1145] = 0;
  _$jscoverage['js/lib/backbone.js'][1146] = 0;
  _$jscoverage['js/lib/backbone.js'][1150] = 0;
  _$jscoverage['js/lib/backbone.js'][1151] = 0;
  _$jscoverage['js/lib/backbone.js'][1152] = 0;
  _$jscoverage['js/lib/backbone.js'][1156] = 0;
  _$jscoverage['js/lib/backbone.js'][1157] = 0;
  _$jscoverage['js/lib/backbone.js'][1158] = 0;
  _$jscoverage['js/lib/backbone.js'][1163] = 0;
  _$jscoverage['js/lib/backbone.js'][1164] = 0;
  _$jscoverage['js/lib/backbone.js'][1165] = 0;
  _$jscoverage['js/lib/backbone.js'][1166] = 0;
  _$jscoverage['js/lib/backbone.js'][1167] = 0;
  _$jscoverage['js/lib/backbone.js'][1168] = 0;
  _$jscoverage['js/lib/backbone.js'][1169] = 0;
  _$jscoverage['js/lib/backbone.js'][1174] = 0;
  _$jscoverage['js/lib/backbone.js'][1175] = 0;
  _$jscoverage['js/lib/backbone.js'][1181] = 0;
  _$jscoverage['js/lib/backbone.js'][1182] = 0;
  _$jscoverage['js/lib/backbone.js'][1183] = 0;
  _$jscoverage['js/lib/backbone.js'][1188] = 0;
  _$jscoverage['js/lib/backbone.js'][1189] = 0;
  _$jscoverage['js/lib/backbone.js'][1190] = 0;
  _$jscoverage['js/lib/backbone.js'][1193] = 0;
  _$jscoverage['js/lib/backbone.js'][1198] = 0;
  _$jscoverage['js/lib/backbone.js'][1208] = 0;
  _$jscoverage['js/lib/backbone.js'][1209] = 0;
  _$jscoverage['js/lib/backbone.js'][1217] = 0;
  _$jscoverage['js/lib/backbone.js'][1218] = 0;
  _$jscoverage['js/lib/backbone.js'][1219] = 0;
  _$jscoverage['js/lib/backbone.js'][1220] = 0;
  _$jscoverage['js/lib/backbone.js'][1221] = 0;
  _$jscoverage['js/lib/backbone.js'][1226] = 0;
  _$jscoverage['js/lib/backbone.js'][1227] = 0;
  _$jscoverage['js/lib/backbone.js'][1228] = 0;
  _$jscoverage['js/lib/backbone.js'][1229] = 0;
  _$jscoverage['js/lib/backbone.js'][1232] = 0;
  _$jscoverage['js/lib/backbone.js'][1245] = 0;
  _$jscoverage['js/lib/backbone.js'][1246] = 0;
  _$jscoverage['js/lib/backbone.js'][1247] = 0;
  _$jscoverage['js/lib/backbone.js'][1248] = 0;
  _$jscoverage['js/lib/backbone.js'][1250] = 0;
  _$jscoverage['js/lib/backbone.js'][1251] = 0;
  _$jscoverage['js/lib/backbone.js'][1252] = 0;
  _$jscoverage['js/lib/backbone.js'][1253] = 0;
  _$jscoverage['js/lib/backbone.js'][1254] = 0;
  _$jscoverage['js/lib/backbone.js'][1255] = 0;
  _$jscoverage['js/lib/backbone.js'][1256] = 0;
  _$jscoverage['js/lib/backbone.js'][1257] = 0;
  _$jscoverage['js/lib/backbone.js'][1259] = 0;
  _$jscoverage['js/lib/backbone.js'][1265] = 0;
  _$jscoverage['js/lib/backbone.js'][1270] = 0;
  _$jscoverage['js/lib/backbone.js'][1271] = 0;
  _$jscoverage['js/lib/backbone.js'][1278] = 0;
  _$jscoverage['js/lib/backbone.js'][1279] = 0;
  _$jscoverage['js/lib/backbone.js'][1280] = 0;
  _$jscoverage['js/lib/backbone.js'][1281] = 0;
  _$jscoverage['js/lib/backbone.js'][1282] = 0;
  _$jscoverage['js/lib/backbone.js'][1289] = 0;
  _$jscoverage['js/lib/backbone.js'][1292] = 0;
  _$jscoverage['js/lib/backbone.js'][1295] = 0;
  _$jscoverage['js/lib/backbone.js'][1302] = 0;
  _$jscoverage['js/lib/backbone.js'][1303] = 0;
  _$jscoverage['js/lib/backbone.js'][1305] = 0;
  _$jscoverage['js/lib/backbone.js'][1306] = 0;
  _$jscoverage['js/lib/backbone.js'][1320] = 0;
  _$jscoverage['js/lib/backbone.js'][1321] = 0;
  _$jscoverage['js/lib/backbone.js'][1322] = 0;
  _$jscoverage['js/lib/backbone.js'][1325] = 0;
  _$jscoverage['js/lib/backbone.js'][1326] = 0;
  _$jscoverage['js/lib/backbone.js'][1327] = 0;
  _$jscoverage['js/lib/backbone.js'][1332] = 0;
  _$jscoverage['js/lib/backbone.js'][1335] = 0;
  _$jscoverage['js/lib/backbone.js'][1338] = 0;
  _$jscoverage['js/lib/backbone.js'][1341] = 0;
  _$jscoverage['js/lib/backbone.js'][1344] = 0;
  _$jscoverage['js/lib/backbone.js'][1347] = 0;
  _$jscoverage['js/lib/backbone.js'][1350] = 0;
  _$jscoverage['js/lib/backbone.js'][1358] = 0;
  _$jscoverage['js/lib/backbone.js'][1364] = 0;
  _$jscoverage['js/lib/backbone.js'][1365] = 0;
  _$jscoverage['js/lib/backbone.js'][1371] = 0;
  _$jscoverage['js/lib/backbone.js'][1372] = 0;
  _$jscoverage['js/lib/backbone.js'][1373] = 0;
  _$jscoverage['js/lib/backbone.js'][1374] = 0;
  _$jscoverage['js/lib/backbone.js'][1375] = 0;
  _$jscoverage['js/lib/backbone.js'][1377] = 0;
  _$jscoverage['js/lib/backbone.js'][1380] = 0;
  _$jscoverage['js/lib/backbone.js'][1386] = 0;
  _$jscoverage['js/lib/backbone.js'][1387] = 0;
  _$jscoverage['js/lib/backbone.js'][1391] = 0;
  _$jscoverage['js/lib/backbone.js'][1392] = 0;
  _$jscoverage['js/lib/backbone.js'][1393] = 0;
  _$jscoverage['js/lib/backbone.js'][1394] = 0;
  _$jscoverage['js/lib/backbone.js'][1395] = 0;
  _$jscoverage['js/lib/backbone.js'][1396] = 0;
  _$jscoverage['js/lib/backbone.js'][1397] = 0;
  _$jscoverage['js/lib/backbone.js'][1398] = 0;
  _$jscoverage['js/lib/backbone.js'][1401] = 0;
  _$jscoverage['js/lib/backbone.js'][1403] = 0;
  _$jscoverage['js/lib/backbone.js'][1404] = 0;
  _$jscoverage['js/lib/backbone.js'][1405] = 0;
  _$jscoverage['js/lib/backbone.js'][1406] = 0;
  _$jscoverage['js/lib/backbone.js'][1411] = 0;
  _$jscoverage['js/lib/backbone.js'][1412] = 0;
  _$jscoverage['js/lib/backbone.js'][1413] = 0;
  _$jscoverage['js/lib/backbone.js'][1414] = 0;
  _$jscoverage['js/lib/backbone.js'][1415] = 0;
  _$jscoverage['js/lib/backbone.js'][1416] = 0;
  _$jscoverage['js/lib/backbone.js'][1421] = 0;
  _$jscoverage['js/lib/backbone.js'][1422] = 0;
  _$jscoverage['js/lib/backbone.js'][1426] = 0;
  _$jscoverage['js/lib/backbone.js'][1430] = 0;
  _$jscoverage['js/lib/backbone.js'][1431] = 0;
  _$jscoverage['js/lib/backbone.js'][1432] = 0;
  _$jscoverage['js/lib/backbone.js'][1434] = 0;
  _$jscoverage['js/lib/backbone.js'][1438] = 0;
  _$jscoverage['js/lib/backbone.js'][1439] = 0;
  _$jscoverage['js/lib/backbone.js'][1440] = 0;
  _$jscoverage['js/lib/backbone.js'][1445] = 0;
  _$jscoverage['js/lib/backbone.js'][1451] = 0;
  _$jscoverage['js/lib/backbone.js'][1452] = 0;
  _$jscoverage['js/lib/backbone.js'][1453] = 0;
  _$jscoverage['js/lib/backbone.js'][1459] = 0;
  _$jscoverage['js/lib/backbone.js'][1465] = 0;
  _$jscoverage['js/lib/backbone.js'][1466] = 0;
  _$jscoverage['js/lib/backbone.js'][1467] = 0;
  _$jscoverage['js/lib/backbone.js'][1469] = 0;
  _$jscoverage['js/lib/backbone.js'][1470] = 0;
  _$jscoverage['js/lib/backbone.js'][1471] = 0;
  _$jscoverage['js/lib/backbone.js'][1478] = 0;
  _$jscoverage['js/lib/backbone.js'][1479] = 0;
  _$jscoverage['js/lib/backbone.js'][1480] = 0;
  _$jscoverage['js/lib/backbone.js'][1481] = 0;
  _$jscoverage['js/lib/backbone.js'][1482] = 0;
  _$jscoverage['js/lib/backbone.js'][1495] = 0;
  _$jscoverage['js/lib/backbone.js'][1496] = 0;
  _$jscoverage['js/lib/backbone.js'][1498] = 0;
  _$jscoverage['js/lib/backbone.js'][1501] = 0;
  _$jscoverage['js/lib/backbone.js'][1503] = 0;
  _$jscoverage['js/lib/backbone.js'][1504] = 0;
  _$jscoverage['js/lib/backbone.js'][1507] = 0;
  _$jscoverage['js/lib/backbone.js'][1510] = 0;
  _$jscoverage['js/lib/backbone.js'][1511] = 0;
  _$jscoverage['js/lib/backbone.js'][1515] = 0;
  _$jscoverage['js/lib/backbone.js'][1516] = 0;
  _$jscoverage['js/lib/backbone.js'][1517] = 0;
  _$jscoverage['js/lib/backbone.js'][1521] = 0;
  _$jscoverage['js/lib/backbone.js'][1522] = 0;
  _$jscoverage['js/lib/backbone.js'][1528] = 0;
  _$jscoverage['js/lib/backbone.js'][1530] = 0;
  _$jscoverage['js/lib/backbone.js'][1536] = 0;
  _$jscoverage['js/lib/backbone.js'][1537] = 0;
  _$jscoverage['js/lib/backbone.js'][1538] = 0;
  _$jscoverage['js/lib/backbone.js'][1541] = 0;
  _$jscoverage['js/lib/backbone.js'][1548] = 0;
  _$jscoverage['js/lib/backbone.js'][1556] = 0;
  _$jscoverage['js/lib/backbone.js'][1557] = 0;
  _$jscoverage['js/lib/backbone.js'][1558] = 0;
  _$jscoverage['js/lib/backbone.js'][1563] = 0;
  _$jscoverage['js/lib/backbone.js'][1564] = 0;
  _$jscoverage['js/lib/backbone.js'][1566] = 0;
  _$jscoverage['js/lib/backbone.js'][1570] = 0;
  _$jscoverage['js/lib/backbone.js'][1574] = 0;
  _$jscoverage['js/lib/backbone.js'][1575] = 0;
  _$jscoverage['js/lib/backbone.js'][1576] = 0;
  _$jscoverage['js/lib/backbone.js'][1580] = 0;
  _$jscoverage['js/lib/backbone.js'][1584] = 0;
  _$jscoverage['js/lib/backbone.js'][1586] = 0;
  _$jscoverage['js/lib/backbone.js'][1590] = 0;
  _$jscoverage['js/lib/backbone.js'][1593] = 0;
  _$jscoverage['js/lib/backbone.js'][1594] = 0;
  _$jscoverage['js/lib/backbone.js'][1598] = 0;
  _$jscoverage['js/lib/backbone.js'][1599] = 0;
  _$jscoverage['js/lib/backbone.js'][1600] = 0;
  _$jscoverage['js/lib/backbone.js'][1601] = 0;
  _$jscoverage['js/lib/backbone.js'][1602] = 0;
  _$jscoverage['js/lib/backbone.js'][1606] = 0;
}
_$jscoverage['js/lib/backbone.js'].source = ["<span class=\"c\">//     Backbone.js 1.1.2</span>","","<span class=\"c\">//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</span>","<span class=\"c\">//     Backbone may be freely distributed under the MIT license.</span>","<span class=\"c\">//     For all details and documentation:</span>","<span class=\"c\">//     http://backbonejs.org</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>root<span class=\"k\">,</span> factory<span class=\"k\">)</span> <span class=\"k\">{</span>","","  <span class=\"c\">// Set up Backbone appropriately for the environment. Start with AMD.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> define <span class=\"k\">===</span> <span class=\"s\">'function'</span> <span class=\"k\">&amp;&amp;</span> define<span class=\"k\">.</span>amd<span class=\"k\">)</span> <span class=\"k\">{</span>","    define<span class=\"k\">([</span><span class=\"s\">'underscore'</span><span class=\"k\">,</span> <span class=\"s\">'jquery'</span><span class=\"k\">,</span> <span class=\"s\">'exports'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>_<span class=\"k\">,</span> $<span class=\"k\">,</span> exports<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Export global even in AMD case in case this script is loaded with</span>","      <span class=\"c\">// others that may still expect a global Backbone.</span>","      root<span class=\"k\">.</span>Backbone <span class=\"k\">=</span> factory<span class=\"k\">(</span>root<span class=\"k\">,</span> exports<span class=\"k\">,</span> _<span class=\"k\">,</span> $<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Next for Node.js or CommonJS. jQuery may not be needed as a module.</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> exports <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> _ <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'underscore'</span><span class=\"k\">);</span>","    factory<span class=\"k\">(</span>root<span class=\"k\">,</span> exports<span class=\"k\">,</span> _<span class=\"k\">);</span>","","  <span class=\"c\">// Finally, as a browser global.</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    root<span class=\"k\">.</span>Backbone <span class=\"k\">=</span> factory<span class=\"k\">(</span>root<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> root<span class=\"k\">.</span>_<span class=\"k\">,</span> <span class=\"k\">(</span>root<span class=\"k\">.</span>jQuery <span class=\"k\">||</span> root<span class=\"k\">.</span>Zepto <span class=\"k\">||</span> root<span class=\"k\">.</span>ender <span class=\"k\">||</span> root<span class=\"k\">.</span>$<span class=\"k\">));</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>root<span class=\"k\">,</span> Backbone<span class=\"k\">,</span> _<span class=\"k\">,</span> $<span class=\"k\">)</span> <span class=\"k\">{</span>","","  <span class=\"c\">// Initial Setup</span>","  <span class=\"c\">// -------------</span>","","  <span class=\"c\">// Save the previous value of the `Backbone` variable, so that it can be</span>","  <span class=\"c\">// restored later on, if `noConflict` is used.</span>","  <span class=\"k\">var</span> previousBackbone <span class=\"k\">=</span> root<span class=\"k\">.</span>Backbone<span class=\"k\">;</span>","","  <span class=\"c\">// Create local references to array methods we'll want to use later.</span>","  <span class=\"k\">var</span> array <span class=\"k\">=</span> <span class=\"k\">[];</span>","  <span class=\"k\">var</span> push <span class=\"k\">=</span> array<span class=\"k\">.</span>push<span class=\"k\">;</span>","  <span class=\"k\">var</span> slice <span class=\"k\">=</span> array<span class=\"k\">.</span>slice<span class=\"k\">;</span>","  <span class=\"k\">var</span> splice <span class=\"k\">=</span> array<span class=\"k\">.</span>splice<span class=\"k\">;</span>","","  <span class=\"c\">// Current version of the library. Keep in sync with `package.json`.</span>","  Backbone<span class=\"k\">.</span>VERSION <span class=\"k\">=</span> <span class=\"s\">'1.1.2'</span><span class=\"k\">;</span>","","  <span class=\"c\">// For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns</span>","  <span class=\"c\">// the `$` variable.</span>","  Backbone<span class=\"k\">.</span>$ <span class=\"k\">=</span> $<span class=\"k\">;</span>","","  <span class=\"c\">// Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable</span>","  <span class=\"c\">// to its previous owner. Returns a reference to this Backbone object.</span>","  Backbone<span class=\"k\">.</span>noConflict <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    root<span class=\"k\">.</span>Backbone <span class=\"k\">=</span> previousBackbone<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option</span>","  <span class=\"c\">// will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and</span>","  <span class=\"c\">// set a `X-Http-Method-Override` header.</span>","  Backbone<span class=\"k\">.</span>emulateHTTP <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","  <span class=\"c\">// Turn on `emulateJSON` to support legacy servers that can't deal with direct</span>","  <span class=\"c\">// `application/json` requests ... will encode the body as</span>","  <span class=\"c\">// `application/x-www-form-urlencoded` instead and will send the model in a</span>","  <span class=\"c\">// form param named `model`.</span>","  Backbone<span class=\"k\">.</span>emulateJSON <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","  <span class=\"c\">// Backbone.Events</span>","  <span class=\"c\">// ---------------</span>","","  <span class=\"c\">// A module that can be mixed in to *any object* in order to provide it with</span>","  <span class=\"c\">// custom events. You may bind with `on` or remove with `off` callback</span>","  <span class=\"c\">// functions to an event; `trigger`-ing an event fires all callbacks in</span>","  <span class=\"c\">// succession.</span>","  <span class=\"c\">//</span>","  <span class=\"c\">//     var object = {};</span>","  <span class=\"c\">//     _.extend(object, Backbone.Events);</span>","  <span class=\"c\">//     object.on('expand', function(){ alert('expanded'); });</span>","  <span class=\"c\">//     object.trigger('expand');</span>","  <span class=\"c\">//</span>","  <span class=\"k\">var</span> Events <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>Events <span class=\"k\">=</span> <span class=\"k\">{</span>","","    <span class=\"c\">// Bind an event to a `callback` function. Passing `\"all\"` will bind</span>","    <span class=\"c\">// the callback to all events fired.</span>","    on<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> callback<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>eventsApi<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'on'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"k\">[</span>callback<span class=\"k\">,</span> context<span class=\"k\">])</span> <span class=\"k\">||</span> <span class=\"k\">!</span>callback<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_events <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_events <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","      <span class=\"k\">var</span> events <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[]);</span>","      events<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>callback<span class=\"k\">:</span> callback<span class=\"k\">,</span> context<span class=\"k\">:</span> context<span class=\"k\">,</span> ctx<span class=\"k\">:</span> context <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Bind an event to only be triggered a single time. After the first time</span>","    <span class=\"c\">// the callback is invoked, it will be removed.</span>","    once<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> callback<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>eventsApi<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'once'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"k\">[</span>callback<span class=\"k\">,</span> context<span class=\"k\">])</span> <span class=\"k\">||</span> <span class=\"k\">!</span>callback<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> once <span class=\"k\">=</span> _<span class=\"k\">.</span>once<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        self<span class=\"k\">.</span>off<span class=\"k\">(</span>name<span class=\"k\">,</span> once<span class=\"k\">);</span>","        callback<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","      once<span class=\"k\">.</span>_callback <span class=\"k\">=</span> callback<span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>on<span class=\"k\">(</span>name<span class=\"k\">,</span> once<span class=\"k\">,</span> context<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Remove one or many callbacks. If `context` is null, removes all</span>","    <span class=\"c\">// callbacks with that function. If `callback` is null, removes all</span>","    <span class=\"c\">// callbacks for the event. If `name` is null, removes all bound</span>","    <span class=\"c\">// callbacks for all events.</span>","    off<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> callback<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> retain<span class=\"k\">,</span> ev<span class=\"k\">,</span> events<span class=\"k\">,</span> names<span class=\"k\">,</span> i<span class=\"k\">,</span> l<span class=\"k\">,</span> j<span class=\"k\">,</span> k<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_events <span class=\"k\">||</span> <span class=\"k\">!</span>eventsApi<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'off'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"k\">[</span>callback<span class=\"k\">,</span> context<span class=\"k\">]))</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>callback <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>context<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_events <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      names <span class=\"k\">=</span> name <span class=\"k\">?</span> <span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">:</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">);</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> names<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        name <span class=\"k\">=</span> names<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>events <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> retain <span class=\"k\">=</span> <span class=\"k\">[];</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>callback <span class=\"k\">||</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> k <span class=\"k\">=</span> events<span class=\"k\">.</span>length<span class=\"k\">;</span> j <span class=\"k\">&lt;</span> k<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","              ev <span class=\"k\">=</span> events<span class=\"k\">[</span>j<span class=\"k\">];</span>","              <span class=\"k\">if</span> <span class=\"k\">((</span>callback <span class=\"k\">&amp;&amp;</span> callback <span class=\"k\">!==</span> ev<span class=\"k\">.</span>callback <span class=\"k\">&amp;&amp;</span> callback <span class=\"k\">!==</span> ev<span class=\"k\">.</span>callback<span class=\"k\">.</span>_callback<span class=\"k\">)</span> <span class=\"k\">||</span>","                  <span class=\"k\">(</span>context <span class=\"k\">&amp;&amp;</span> context <span class=\"k\">!==</span> ev<span class=\"k\">.</span>context<span class=\"k\">))</span> <span class=\"k\">{</span>","                retain<span class=\"k\">.</span>push<span class=\"k\">(</span>ev<span class=\"k\">);</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>retain<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Trigger one or many events, firing all bound callbacks. Callbacks are</span>","    <span class=\"c\">// passed the same arguments as `trigger` is, apart from the event name</span>","    <span class=\"c\">// (unless you're listening on `\"all\"`, which will cause your callback to</span>","    <span class=\"c\">// receive the true name of the event as the first argument).</span>","    trigger<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> args <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>eventsApi<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'trigger'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> args<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> events <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">[</span>name<span class=\"k\">];</span>","      <span class=\"k\">var</span> allEvents <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_events<span class=\"k\">.</span>all<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>events<span class=\"k\">)</span> triggerEvents<span class=\"k\">(</span>events<span class=\"k\">,</span> args<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>allEvents<span class=\"k\">)</span> triggerEvents<span class=\"k\">(</span>allEvents<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Tell this object to stop listening to either specific events ... or</span>","    <span class=\"c\">// to every object it's currently listening to.</span>","    stopListening<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> name<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> listeningTo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_listeningTo<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>listeningTo<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> remove <span class=\"k\">=</span> <span class=\"k\">!</span>name <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>callback<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>callback <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> name <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> callback <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">(</span>listeningTo <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">)[</span>obj<span class=\"k\">.</span>_listenId<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> id <span class=\"k\">in</span> listeningTo<span class=\"k\">)</span> <span class=\"k\">{</span>","        obj <span class=\"k\">=</span> listeningTo<span class=\"k\">[</span>id<span class=\"k\">];</span>","        obj<span class=\"k\">.</span>off<span class=\"k\">(</span>name<span class=\"k\">,</span> callback<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>remove <span class=\"k\">||</span> _<span class=\"k\">.</span>isEmpty<span class=\"k\">(</span>obj<span class=\"k\">.</span>_events<span class=\"k\">))</span> <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_listeningTo<span class=\"k\">[</span>id<span class=\"k\">];</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Regular expression used to split event strings.</span>","  <span class=\"k\">var</span> eventSplitter <span class=\"k\">=</span> <span class=\"s\">/\\s+/</span><span class=\"k\">;</span>","","  <span class=\"c\">// Implement fancy features of the Events API such as multiple event</span>","  <span class=\"c\">// names `\"change blur\"` and jQuery-style event maps `{change: action}`</span>","  <span class=\"c\">// in terms of the existing API.</span>","  <span class=\"k\">var</span> eventsApi <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> action<span class=\"k\">,</span> name<span class=\"k\">,</span> rest<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","    <span class=\"c\">// Handle event maps.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> name <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","        obj<span class=\"k\">[</span>action<span class=\"k\">].</span>apply<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">[</span>key<span class=\"k\">,</span> name<span class=\"k\">[</span>key<span class=\"k\">]].</span>concat<span class=\"k\">(</span>rest<span class=\"k\">));</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Handle space separated event names.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>eventSplitter<span class=\"k\">.</span>test<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> names <span class=\"k\">=</span> name<span class=\"k\">.</span>split<span class=\"k\">(</span>eventSplitter<span class=\"k\">);</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> names<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        obj<span class=\"k\">[</span>action<span class=\"k\">].</span>apply<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">[</span>names<span class=\"k\">[</span>i<span class=\"k\">]].</span>concat<span class=\"k\">(</span>rest<span class=\"k\">));</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// A difficult-to-believe, but optimized internal dispatch function for</span>","  <span class=\"c\">// triggering events. Tries to keep the usual cases speedy (most internal</span>","  <span class=\"c\">// Backbone events have 3 arguments).</span>","  <span class=\"k\">var</span> triggerEvents <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>events<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> ev<span class=\"k\">,</span> i <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">,</span> l <span class=\"k\">=</span> events<span class=\"k\">.</span>length<span class=\"k\">,</span> a1 <span class=\"k\">=</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> a2 <span class=\"k\">=</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> a3 <span class=\"k\">=</span> args<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","    <span class=\"k\">switch</span> <span class=\"k\">(</span>args<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">case</span> <span class=\"s\">0</span><span class=\"k\">:</span> <span class=\"k\">while</span> <span class=\"k\">(++</span>i <span class=\"k\">&lt;</span> l<span class=\"k\">)</span> <span class=\"k\">(</span>ev <span class=\"k\">=</span> events<span class=\"k\">[</span>i<span class=\"k\">]).</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span>ev<span class=\"k\">.</span>ctx<span class=\"k\">);</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">case</span> <span class=\"s\">1</span><span class=\"k\">:</span> <span class=\"k\">while</span> <span class=\"k\">(++</span>i <span class=\"k\">&lt;</span> l<span class=\"k\">)</span> <span class=\"k\">(</span>ev <span class=\"k\">=</span> events<span class=\"k\">[</span>i<span class=\"k\">]).</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span>ev<span class=\"k\">.</span>ctx<span class=\"k\">,</span> a1<span class=\"k\">);</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">case</span> <span class=\"s\">2</span><span class=\"k\">:</span> <span class=\"k\">while</span> <span class=\"k\">(++</span>i <span class=\"k\">&lt;</span> l<span class=\"k\">)</span> <span class=\"k\">(</span>ev <span class=\"k\">=</span> events<span class=\"k\">[</span>i<span class=\"k\">]).</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span>ev<span class=\"k\">.</span>ctx<span class=\"k\">,</span> a1<span class=\"k\">,</span> a2<span class=\"k\">);</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">case</span> <span class=\"s\">3</span><span class=\"k\">:</span> <span class=\"k\">while</span> <span class=\"k\">(++</span>i <span class=\"k\">&lt;</span> l<span class=\"k\">)</span> <span class=\"k\">(</span>ev <span class=\"k\">=</span> events<span class=\"k\">[</span>i<span class=\"k\">]).</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span>ev<span class=\"k\">.</span>ctx<span class=\"k\">,</span> a1<span class=\"k\">,</span> a2<span class=\"k\">,</span> a3<span class=\"k\">);</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">default</span><span class=\"k\">:</span> <span class=\"k\">while</span> <span class=\"k\">(++</span>i <span class=\"k\">&lt;</span> l<span class=\"k\">)</span> <span class=\"k\">(</span>ev <span class=\"k\">=</span> events<span class=\"k\">[</span>i<span class=\"k\">]).</span>callback<span class=\"k\">.</span>apply<span class=\"k\">(</span>ev<span class=\"k\">.</span>ctx<span class=\"k\">,</span> args<span class=\"k\">);</span> <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> listenMethods <span class=\"k\">=</span> <span class=\"k\">{</span>listenTo<span class=\"k\">:</span> <span class=\"s\">'on'</span><span class=\"k\">,</span> listenToOnce<span class=\"k\">:</span> <span class=\"s\">'once'</span><span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Inversion-of-control versions of `on` and `once`. Tell *this* object to</span>","  <span class=\"c\">// listen to an event in another object ... keeping track of what it's</span>","  <span class=\"c\">// listening to.</span>","  _<span class=\"k\">.</span>each<span class=\"k\">(</span>listenMethods<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>implementation<span class=\"k\">,</span> method<span class=\"k\">)</span> <span class=\"k\">{</span>","    Events<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> name<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> listeningTo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_listeningTo <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_listeningTo <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","      <span class=\"k\">var</span> id <span class=\"k\">=</span> obj<span class=\"k\">.</span>_listenId <span class=\"k\">||</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>_listenId <span class=\"k\">=</span> _<span class=\"k\">.</span>uniqueId<span class=\"k\">(</span><span class=\"s\">'l'</span><span class=\"k\">));</span>","      listeningTo<span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>callback <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> name <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> callback <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      obj<span class=\"k\">[</span>implementation<span class=\"k\">](</span>name<span class=\"k\">,</span> callback<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Aliases for backwards compatibility.</span>","  Events<span class=\"k\">.</span>bind   <span class=\"k\">=</span> Events<span class=\"k\">.</span>on<span class=\"k\">;</span>","  Events<span class=\"k\">.</span>unbind <span class=\"k\">=</span> Events<span class=\"k\">.</span>off<span class=\"k\">;</span>","","  <span class=\"c\">// Allow the `Backbone` object to serve as a global event bus, for folks who</span>","  <span class=\"c\">// want global \"pubsub\" in a convenient place.</span>","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>Backbone<span class=\"k\">,</span> Events<span class=\"k\">);</span>","","  <span class=\"c\">// Backbone.Model</span>","  <span class=\"c\">// --------------</span>","","  <span class=\"c\">// Backbone **Models** are the basic data object in the framework --</span>","  <span class=\"c\">// frequently representing a row in a table in a database on your server.</span>","  <span class=\"c\">// A discrete chunk of data and a bunch of useful, related methods for</span>","  <span class=\"c\">// performing computations and transformations on that data.</span>","","  <span class=\"c\">// Create a new model with the specified attributes. A client id (`cid`)</span>","  <span class=\"c\">// is automatically generated and assigned for you.</span>","  <span class=\"k\">var</span> Model <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>Model <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>attributes<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> attrs <span class=\"k\">=</span> attributes <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>cid <span class=\"k\">=</span> _<span class=\"k\">.</span>uniqueId<span class=\"k\">(</span><span class=\"s\">'c'</span><span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>attributes <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>collection<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>collection <span class=\"k\">=</span> options<span class=\"k\">.</span>collection<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>parse<span class=\"k\">)</span> attrs <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    attrs <span class=\"k\">=</span> _<span class=\"k\">.</span>defaults<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> attrs<span class=\"k\">,</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'defaults'</span><span class=\"k\">));</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>changed <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>initialize<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Attach all inheritable methods to the Model prototype.</span>","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>Model<span class=\"k\">.</span>prototype<span class=\"k\">,</span> Events<span class=\"k\">,</span> <span class=\"k\">{</span>","","    <span class=\"c\">// A hash of attributes whose current and previous value differ.</span>","    changed<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","    <span class=\"c\">// The value returned during the last failed validation.</span>","    validationError<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","    <span class=\"c\">// The default name for the JSON `id` attribute is `\"id\"`. MongoDB and</span>","    <span class=\"c\">// CouchDB users may want to set this to `\"_id\"`.</span>","    idAttribute<span class=\"k\">:</span> <span class=\"s\">'id'</span><span class=\"k\">,</span>","","    <span class=\"c\">// Initialize is an empty function by default. Override it with your own</span>","    <span class=\"c\">// initialization logic.</span>","    initialize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Return a copy of the model's `attributes` object.</span>","    toJSON<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Proxy `Backbone.sync` by default -- but override this if you need</span>","    <span class=\"c\">// custom syncing semantics for *this* particular model.</span>","    sync<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> Backbone<span class=\"k\">.</span>sync<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get the value of an attribute.</span>","    get<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">[</span>attr<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get the HTML-escaped value of an attribute.</span>","    escape<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>escape<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span>attr<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Returns `true` if the attribute contains a value that is not null</span>","    <span class=\"c\">// or undefined.</span>","    has<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Set a hash of model attributes on the object, firing `\"change\"`. This is</span>","    <span class=\"c\">// the core primitive operation of a model, updating the data and notifying</span>","    <span class=\"c\">// anyone who needs to know about the change in state. The heart of the beast.</span>","    set<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> val<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> attr<span class=\"k\">,</span> attrs<span class=\"k\">,</span> unset<span class=\"k\">,</span> changes<span class=\"k\">,</span> silent<span class=\"k\">,</span> changing<span class=\"k\">,</span> prev<span class=\"k\">,</span> current<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      <span class=\"c\">// Handle both `\"key\", value` and `{key: value}` -style arguments.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> key <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        attrs <span class=\"k\">=</span> key<span class=\"k\">;</span>","        options <span class=\"k\">=</span> val<span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">(</span>attrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">)[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","","      <span class=\"c\">// Run validation.</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_validate<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","      <span class=\"c\">// Extract attributes and options.</span>","      unset           <span class=\"k\">=</span> options<span class=\"k\">.</span>unset<span class=\"k\">;</span>","      silent          <span class=\"k\">=</span> options<span class=\"k\">.</span>silent<span class=\"k\">;</span>","      changes         <span class=\"k\">=</span> <span class=\"k\">[];</span>","      changing        <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_changing<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_changing  <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>changing<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_previousAttributes <span class=\"k\">=</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>changed <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">,</span> prev <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_previousAttributes<span class=\"k\">;</span>","","      <span class=\"c\">// Check for changes of `id`.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>idAttribute <span class=\"k\">in</span> attrs<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> attrs<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>idAttribute<span class=\"k\">];</span>","","      <span class=\"c\">// For each `set` attribute, update or delete the current value.</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>attr <span class=\"k\">in</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","        val <span class=\"k\">=</span> attrs<span class=\"k\">[</span>attr<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isEqual<span class=\"k\">(</span>current<span class=\"k\">[</span>attr<span class=\"k\">],</span> val<span class=\"k\">))</span> changes<span class=\"k\">.</span>push<span class=\"k\">(</span>attr<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isEqual<span class=\"k\">(</span>prev<span class=\"k\">[</span>attr<span class=\"k\">],</span> val<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>changed<span class=\"k\">[</span>attr<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>changed<span class=\"k\">[</span>attr<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        unset <span class=\"k\">?</span> <span class=\"k\">delete</span> current<span class=\"k\">[</span>attr<span class=\"k\">]</span> <span class=\"k\">:</span> current<span class=\"k\">[</span>attr<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Trigger all relevant attribute changes.</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>silent<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>changes<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>_pending <span class=\"k\">=</span> options<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> changes<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'change:'</span> <span class=\"k\">+</span> changes<span class=\"k\">[</span>i<span class=\"k\">],</span> <span class=\"k\">this</span><span class=\"k\">,</span> current<span class=\"k\">[</span>changes<span class=\"k\">[</span>i<span class=\"k\">]],</span> options<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// You might be wondering why there's a `while` loop here. Changes can</span>","      <span class=\"c\">// be recursively nested within `\"change\"` events.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>changing<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>silent<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_pending<span class=\"k\">)</span> <span class=\"k\">{</span>","          options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_pending<span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>_pending <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'change'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_pending <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_changing <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Remove an attribute from the model, firing `\"change\"`. `unset` is a noop</span>","    <span class=\"c\">// if the attribute doesn't exist.</span>","    unset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span>attr<span class=\"k\">,</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> options<span class=\"k\">,</span> <span class=\"k\">{</span>unset<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Clear all attributes on the model, firing `\"change\"`.</span>","    clear<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> attrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">)</span> attrs<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span>attrs<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> options<span class=\"k\">,</span> <span class=\"k\">{</span>unset<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Determine if the model has changed since the last `\"change\"` event.</span>","    <span class=\"c\">// If you specify an attribute name, determine if that attribute has changed.</span>","    hasChanged<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>attr <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">!</span>_<span class=\"k\">.</span>isEmpty<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>changed<span class=\"k\">);</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>has<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>changed<span class=\"k\">,</span> attr<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Return an object containing all the attributes that have changed, or</span>","    <span class=\"c\">// false if there are no changed attributes. Useful for determining what</span>","    <span class=\"c\">// parts of a view need to be updated and/or what attributes need to be</span>","    <span class=\"c\">// persisted to the server. Unset attributes will be set to undefined.</span>","    <span class=\"c\">// You can also pass an attributes object to diff against the model,</span>","    <span class=\"c\">// determining if there *would be* a change.</span>","    changedAttributes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>diff<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>diff<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>hasChanged<span class=\"k\">()</span> <span class=\"k\">?</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>changed<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> val<span class=\"k\">,</span> changed <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> old <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_changing <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>_previousAttributes <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> attr <span class=\"k\">in</span> diff<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isEqual<span class=\"k\">(</span>old<span class=\"k\">[</span>attr<span class=\"k\">],</span> <span class=\"k\">(</span>val <span class=\"k\">=</span> diff<span class=\"k\">[</span>attr<span class=\"k\">])))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","        <span class=\"k\">(</span>changed <span class=\"k\">||</span> <span class=\"k\">(</span>changed <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">))[</span>attr<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> changed<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get the previous value of an attribute, recorded at the time the last</span>","    <span class=\"c\">// `\"change\"` event was fired.</span>","    previous<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>attr <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_previousAttributes<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_previousAttributes<span class=\"k\">[</span>attr<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get all of the attributes of the model at the time of the previous</span>","    <span class=\"c\">// `\"change\"` event.</span>","    previousAttributes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_previousAttributes<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Fetch the model from the server. If the server's representation of the</span>","    <span class=\"c\">// model differs from its current attributes, they will be overridden,</span>","    <span class=\"c\">// triggering a `\"change\"` event.</span>","    fetch<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">?</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>parse <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> options<span class=\"k\">.</span>parse <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> success <span class=\"k\">=</span> options<span class=\"k\">.</span>success<span class=\"k\">;</span>","      options<span class=\"k\">.</span>success <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">.</span>set<span class=\"k\">(</span>model<span class=\"k\">.</span>parse<span class=\"k\">(</span>resp<span class=\"k\">,</span> options<span class=\"k\">),</span> options<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>success<span class=\"k\">)</span> success<span class=\"k\">(</span>model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","        model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'sync'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      wrapError<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sync<span class=\"k\">(</span><span class=\"s\">'read'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Set a hash of model attributes, and sync the model to the server.</span>","    <span class=\"c\">// If the server returns an attributes hash that differs, the model's</span>","    <span class=\"c\">// state will be `set` again.</span>","    save<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> val<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> attrs<span class=\"k\">,</span> method<span class=\"k\">,</span> xhr<span class=\"k\">,</span> attributes <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">;</span>","","      <span class=\"c\">// Handle both `\"key\", value` and `{key: value}` -style arguments.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> key <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        attrs <span class=\"k\">=</span> key<span class=\"k\">;</span>","        options <span class=\"k\">=</span> val<span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">(</span>attrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">)[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      options <span class=\"k\">=</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>validate<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","","      <span class=\"c\">// If we're not waiting and attributes exist, save acts as</span>","      <span class=\"c\">// `set(attr).save(null, opts)` with validation. Otherwise, check if</span>","      <span class=\"c\">// the model will be valid when the attributes, if any, are set.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>attrs <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>options<span class=\"k\">.</span>wait<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_validate<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Set temporary attributes if `{wait: true}`.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>attrs <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>wait<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>attributes <span class=\"k\">=</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> attributes<span class=\"k\">,</span> attrs<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// After a successful server-side save, the client is (optionally)</span>","      <span class=\"c\">// updated with the server-side state.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>parse <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> options<span class=\"k\">.</span>parse <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> success <span class=\"k\">=</span> options<span class=\"k\">.</span>success<span class=\"k\">;</span>","      options<span class=\"k\">.</span>success <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Ensure attributes are restored during synchronous saves.</span>","        model<span class=\"k\">.</span>attributes <span class=\"k\">=</span> attributes<span class=\"k\">;</span>","        <span class=\"k\">var</span> serverAttrs <span class=\"k\">=</span> model<span class=\"k\">.</span>parse<span class=\"k\">(</span>resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>wait<span class=\"k\">)</span> serverAttrs <span class=\"k\">=</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span>attrs <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> serverAttrs<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isObject<span class=\"k\">(</span>serverAttrs<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>model<span class=\"k\">.</span>set<span class=\"k\">(</span>serverAttrs<span class=\"k\">,</span> options<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>success<span class=\"k\">)</span> success<span class=\"k\">(</span>model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","        model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'sync'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      wrapError<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","","      method <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>isNew<span class=\"k\">()</span> <span class=\"k\">?</span> <span class=\"s\">'create'</span> <span class=\"k\">:</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>patch <span class=\"k\">?</span> <span class=\"s\">'patch'</span> <span class=\"k\">:</span> <span class=\"s\">'update'</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>method <span class=\"k\">===</span> <span class=\"s\">'patch'</span><span class=\"k\">)</span> options<span class=\"k\">.</span>attrs <span class=\"k\">=</span> attrs<span class=\"k\">;</span>","      xhr <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>sync<span class=\"k\">(</span>method<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","","      <span class=\"c\">// Restore attributes.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>attrs <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>wait<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes <span class=\"k\">=</span> attributes<span class=\"k\">;</span>","","      <span class=\"k\">return</span> xhr<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Destroy this model on the server if it was already persisted.</span>","    <span class=\"c\">// Optimistically removes the model from its collection, if it has one.</span>","    <span class=\"c\">// If `wait: true` is passed, waits for the server to respond before removal.</span>","    destroy<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">?</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> success <span class=\"k\">=</span> options<span class=\"k\">.</span>success<span class=\"k\">;</span>","","      <span class=\"k\">var</span> destroy <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'destroy'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> model<span class=\"k\">.</span>collection<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      options<span class=\"k\">.</span>success <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>wait <span class=\"k\">||</span> model<span class=\"k\">.</span>isNew<span class=\"k\">())</span> destroy<span class=\"k\">();</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>success<span class=\"k\">)</span> success<span class=\"k\">(</span>model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">.</span>isNew<span class=\"k\">())</span> model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'sync'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isNew<span class=\"k\">())</span> <span class=\"k\">{</span>","        options<span class=\"k\">.</span>success<span class=\"k\">();</span>","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      wrapError<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","","      <span class=\"k\">var</span> xhr <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>sync<span class=\"k\">(</span><span class=\"s\">'delete'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>wait<span class=\"k\">)</span> destroy<span class=\"k\">();</span>","      <span class=\"k\">return</span> xhr<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Default URL for the model's representation on the server -- if you're</span>","    <span class=\"c\">// using Backbone's restful methods, override this to change the endpoint</span>","    <span class=\"c\">// that will be called.</span>","    url<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> base <span class=\"k\">=</span>","        _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'urlRoot'</span><span class=\"k\">)</span> <span class=\"k\">||</span>","        _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collection<span class=\"k\">,</span> <span class=\"s\">'url'</span><span class=\"k\">)</span> <span class=\"k\">||</span>","        urlError<span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isNew<span class=\"k\">())</span> <span class=\"k\">return</span> base<span class=\"k\">;</span>","      <span class=\"k\">return</span> base<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/([^\\/])$/</span><span class=\"k\">,</span> <span class=\"s\">'$1/'</span><span class=\"k\">)</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// **parse** converts a response into the hash of attributes to be `set` on</span>","    <span class=\"c\">// the model. The default implementation is just to pass the response along.</span>","    parse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> resp<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Create a new model with identical attributes to this one.</span>","    clone<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// A model is new if it has never been saved to the server, and lacks an id.</span>","    isNew<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>has<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>idAttribute<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Check if the model is currently in a valid state.</span>","    isValid<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_validate<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span>options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">{</span> validate<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Run validation against the next complete set of model attributes,</span>","    <span class=\"c\">// returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.</span>","    _validate<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>validate <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>validate<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      attrs <span class=\"k\">=</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">,</span> attrs<span class=\"k\">);</span>","      <span class=\"k\">var</span> error <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>validationError <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>validate<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>error<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'invalid'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> error<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"k\">{</span>validationError<span class=\"k\">:</span> error<span class=\"k\">}</span><span class=\"k\">));</span>","      <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Underscore methods that we want to implement on the Model.</span>","  <span class=\"k\">var</span> modelMethods <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'keys'</span><span class=\"k\">,</span> <span class=\"s\">'values'</span><span class=\"k\">,</span> <span class=\"s\">'pairs'</span><span class=\"k\">,</span> <span class=\"s\">'invert'</span><span class=\"k\">,</span> <span class=\"s\">'pick'</span><span class=\"k\">,</span> <span class=\"s\">'omit'</span><span class=\"k\">];</span>","","  <span class=\"c\">// Mix in each Underscore method as a proxy to `Model#attributes`.</span>","  _<span class=\"k\">.</span>each<span class=\"k\">(</span>modelMethods<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>method<span class=\"k\">)</span> <span class=\"k\">{</span>","    Model<span class=\"k\">.</span>prototype<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> args <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","      args<span class=\"k\">.</span>unshift<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>attributes<span class=\"k\">);</span>","      <span class=\"k\">return</span> _<span class=\"k\">[</span>method<span class=\"k\">].</span>apply<span class=\"k\">(</span>_<span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Backbone.Collection</span>","  <span class=\"c\">// -------------------</span>","","  <span class=\"c\">// If models tend to represent a single row of data, a Backbone Collection is</span>","  <span class=\"c\">// more analagous to a table full of data ... or a small slice or page of that</span>","  <span class=\"c\">// table, or a collection of rows that belong together for a particular reason</span>","  <span class=\"c\">// -- all of the messages in this particular folder, all of the documents</span>","  <span class=\"c\">// belonging to this particular author, and so on. Collections maintain</span>","  <span class=\"c\">// indexes of their models, both in order, and for lookup by `id`.</span>","","  <span class=\"c\">// Create a new **Collection**, perhaps to contain a specific type of `model`.</span>","  <span class=\"c\">// If a `comparator` is specified, the Collection will maintain</span>","  <span class=\"c\">// its models in sort order, as they're added and removed.</span>","  <span class=\"k\">var</span> Collection <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>Collection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>models<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>model<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>model <span class=\"k\">=</span> options<span class=\"k\">.</span>model<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>comparator <span class=\"k\">!==</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>comparator <span class=\"k\">=</span> options<span class=\"k\">.</span>comparator<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_reset<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>initialize<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>models<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>reset<span class=\"k\">(</span>models<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>silent<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> options<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Default options for `Collection#set`.</span>","  <span class=\"k\">var</span> setOptions <span class=\"k\">=</span> <span class=\"k\">{</span>add<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> remove<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> merge<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> addOptions <span class=\"k\">=</span> <span class=\"k\">{</span>add<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> remove<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Define the Collection's inheritable methods.</span>","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>Collection<span class=\"k\">.</span>prototype<span class=\"k\">,</span> Events<span class=\"k\">,</span> <span class=\"k\">{</span>","","    <span class=\"c\">// The default model for a collection is just a **Backbone.Model**.</span>","    <span class=\"c\">// This should be overridden in most cases.</span>","    model<span class=\"k\">:</span> Model<span class=\"k\">,</span>","","    <span class=\"c\">// Initialize is an empty function by default. Override it with your own</span>","    <span class=\"c\">// initialization logic.</span>","    initialize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// The JSON representation of a Collection is an array of the</span>","    <span class=\"c\">// models' attributes.</span>","    toJSON<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> model<span class=\"k\">.</span>toJSON<span class=\"k\">(</span>options<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Proxy `Backbone.sync` by default.</span>","    sync<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> Backbone<span class=\"k\">.</span>sync<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Add a model, or list of models to the set.</span>","    add<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>models<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span>models<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>merge<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span> options<span class=\"k\">,</span> addOptions<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Remove a model, or a list of models from the set.</span>","    remove<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>models<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> singular <span class=\"k\">=</span> <span class=\"k\">!</span>_<span class=\"k\">.</span>isArray<span class=\"k\">(</span>models<span class=\"k\">);</span>","      models <span class=\"k\">=</span> singular <span class=\"k\">?</span> <span class=\"k\">[</span>models<span class=\"k\">]</span> <span class=\"k\">:</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>models<span class=\"k\">);</span>","      options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","      <span class=\"k\">var</span> i<span class=\"k\">,</span> l<span class=\"k\">,</span> index<span class=\"k\">,</span> model<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> models<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        model <span class=\"k\">=</span> models<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span>models<span class=\"k\">[</span>i<span class=\"k\">]);</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","        <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>model<span class=\"k\">.</span>id<span class=\"k\">];</span>","        <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>model<span class=\"k\">.</span>cid<span class=\"k\">];</span>","        index <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexOf<span class=\"k\">(</span>model<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">.</span>splice<span class=\"k\">(</span>index<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">--;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>silent<span class=\"k\">)</span> <span class=\"k\">{</span>","          options<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","          model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'remove'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_removeReference<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> singular <span class=\"k\">?</span> models<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> models<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Update a collection by `set`-ing a new list of models, adding new ones,</span>","    <span class=\"c\">// removing models that are no longer present, and merging models that</span>","    <span class=\"c\">// already exist in the collection, as necessary. Similar to **Model#set**,</span>","    <span class=\"c\">// the core operation for updating the data contained by the collection.</span>","    set<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>models<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> _<span class=\"k\">.</span>defaults<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> options<span class=\"k\">,</span> setOptions<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>parse<span class=\"k\">)</span> models <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span>models<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">var</span> singular <span class=\"k\">=</span> <span class=\"k\">!</span>_<span class=\"k\">.</span>isArray<span class=\"k\">(</span>models<span class=\"k\">);</span>","      models <span class=\"k\">=</span> singular <span class=\"k\">?</span> <span class=\"k\">(</span>models <span class=\"k\">?</span> <span class=\"k\">[</span>models<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">[])</span> <span class=\"k\">:</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>models<span class=\"k\">);</span>","      <span class=\"k\">var</span> i<span class=\"k\">,</span> l<span class=\"k\">,</span> id<span class=\"k\">,</span> model<span class=\"k\">,</span> attrs<span class=\"k\">,</span> existing<span class=\"k\">,</span> sort<span class=\"k\">;</span>","      <span class=\"k\">var</span> at <span class=\"k\">=</span> options<span class=\"k\">.</span>at<span class=\"k\">;</span>","      <span class=\"k\">var</span> targetModel <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">;</span>","      <span class=\"k\">var</span> sortable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>comparator <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>at <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>sort <span class=\"k\">!==</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> sortAttr <span class=\"k\">=</span> _<span class=\"k\">.</span>isString<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>comparator<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>comparator <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> toAdd <span class=\"k\">=</span> <span class=\"k\">[],</span> toRemove <span class=\"k\">=</span> <span class=\"k\">[],</span> modelMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> add <span class=\"k\">=</span> options<span class=\"k\">.</span>add<span class=\"k\">,</span> merge <span class=\"k\">=</span> options<span class=\"k\">.</span>merge<span class=\"k\">,</span> remove <span class=\"k\">=</span> options<span class=\"k\">.</span>remove<span class=\"k\">;</span>","      <span class=\"k\">var</span> order <span class=\"k\">=</span> <span class=\"k\">!</span>sortable <span class=\"k\">&amp;&amp;</span> add <span class=\"k\">&amp;&amp;</span> remove <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","      <span class=\"c\">// Turn bare objects into model references, and prevent invalid models</span>","      <span class=\"c\">// from being added.</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> models<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        attrs <span class=\"k\">=</span> models<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>attrs <span class=\"k\">instanceof</span> Model<span class=\"k\">)</span> <span class=\"k\">{</span>","          id <span class=\"k\">=</span> model <span class=\"k\">=</span> attrs<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          id <span class=\"k\">=</span> attrs<span class=\"k\">[</span>targetModel<span class=\"k\">.</span>prototype<span class=\"k\">.</span>idAttribute <span class=\"k\">||</span> <span class=\"s\">'id'</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// If a duplicate is found, prevent it from being added and</span>","        <span class=\"c\">// optionally merge it into the existing model.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>existing <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span>id<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>remove<span class=\"k\">)</span> modelMap<span class=\"k\">[</span>existing<span class=\"k\">.</span>cid<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>merge<span class=\"k\">)</span> <span class=\"k\">{</span>","            attrs <span class=\"k\">=</span> attrs <span class=\"k\">===</span> model <span class=\"k\">?</span> model<span class=\"k\">.</span>attributes <span class=\"k\">:</span> attrs<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>parse<span class=\"k\">)</span> attrs <span class=\"k\">=</span> existing<span class=\"k\">.</span>parse<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">);</span>","            existing<span class=\"k\">.</span>set<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>sortable <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>sort <span class=\"k\">&amp;&amp;</span> existing<span class=\"k\">.</span>hasChanged<span class=\"k\">(</span>sortAttr<span class=\"k\">))</span> sort <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","          models<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> existing<span class=\"k\">;</span>","","        <span class=\"c\">// If this is a new, valid model, push it to the `toAdd` list.</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>add<span class=\"k\">)</span> <span class=\"k\">{</span>","          model <span class=\"k\">=</span> models<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_prepareModel<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","          toAdd<span class=\"k\">.</span>push<span class=\"k\">(</span>model<span class=\"k\">);</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>_addReference<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Do not add multiple models with the same `id`.</span>","        model <span class=\"k\">=</span> existing <span class=\"k\">||</span> model<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>order <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>model<span class=\"k\">.</span>isNew<span class=\"k\">()</span> <span class=\"k\">||</span> <span class=\"k\">!</span>modelMap<span class=\"k\">[</span>model<span class=\"k\">.</span>id<span class=\"k\">]))</span> order<span class=\"k\">.</span>push<span class=\"k\">(</span>model<span class=\"k\">);</span>","        modelMap<span class=\"k\">[</span>model<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Remove nonexistent models if appropriate.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>remove<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> <span class=\"k\">++</span>i<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>modelMap<span class=\"k\">[(</span>model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">[</span>i<span class=\"k\">]).</span>cid<span class=\"k\">])</span> toRemove<span class=\"k\">.</span>push<span class=\"k\">(</span>model<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>toRemove<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>remove<span class=\"k\">(</span>toRemove<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// See if sorting is needed, update `length` and splice in new models.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>toAdd<span class=\"k\">.</span>length <span class=\"k\">||</span> <span class=\"k\">(</span>order <span class=\"k\">&amp;&amp;</span> order<span class=\"k\">.</span>length<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>sortable<span class=\"k\">)</span> sort <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">+=</span> toAdd<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>at <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> toAdd<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">.</span>splice<span class=\"k\">(</span>at <span class=\"k\">+</span> i<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> toAdd<span class=\"k\">[</span>i<span class=\"k\">]);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>order<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","          <span class=\"k\">var</span> orderedModels <span class=\"k\">=</span> order <span class=\"k\">||</span> toAdd<span class=\"k\">;</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> orderedModels<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">.</span>push<span class=\"k\">(</span>orderedModels<span class=\"k\">[</span>i<span class=\"k\">]);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Silently sort the collection if appropriate.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>sort<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">{</span>silent<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"c\">// Unless silenced, it's time to fire all appropriate add/sort events.</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>silent<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> toAdd<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          <span class=\"k\">(</span>model <span class=\"k\">=</span> toAdd<span class=\"k\">[</span>i<span class=\"k\">]).</span>trigger<span class=\"k\">(</span><span class=\"s\">'add'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>sort <span class=\"k\">||</span> <span class=\"k\">(</span>order <span class=\"k\">&amp;&amp;</span> order<span class=\"k\">.</span>length<span class=\"k\">))</span> <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'sort'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Return the added (or merged) model (or models).</span>","      <span class=\"k\">return</span> singular <span class=\"k\">?</span> models<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> models<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// When you have more items than you want to add or remove individually,</span>","    <span class=\"c\">// you can reset the entire set with a new list of models, without firing</span>","    <span class=\"c\">// any granular `add` or `remove` events. Fires `reset` when finished.</span>","    <span class=\"c\">// Useful for bulk operations and optimizations.</span>","    reset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>models<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_removeReference<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">[</span>i<span class=\"k\">],</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      options<span class=\"k\">.</span>previousModels <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_reset<span class=\"k\">();</span>","      models <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>add<span class=\"k\">(</span>models<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>silent<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> options<span class=\"k\">));</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>silent<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'reset'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> models<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Add a model to the end of the collection.</span>","    push<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>add<span class=\"k\">(</span>model<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>at<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">}</span><span class=\"k\">,</span> options<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Remove a model from the end of the collection.</span>","    pop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>at<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>remove<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> model<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Add a model to the beginning of the collection.</span>","    unshift<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>add<span class=\"k\">(</span>model<span class=\"k\">,</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>at<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">,</span> options<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Remove a model from the beginning of the collection.</span>","    shift<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>at<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>remove<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> model<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Slice out a sub-array of models from the collection.</span>","    slice<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> slice<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get a model from the set by id.</span>","    get<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>obj<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>obj<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>obj<span class=\"k\">.</span>cid<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get the model at the given index.</span>","    at<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">[</span>index<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Return models with matching attributes. Useful for simple cases of</span>","    <span class=\"c\">// `filter`.</span>","    where<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attrs<span class=\"k\">,</span> first<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isEmpty<span class=\"k\">(</span>attrs<span class=\"k\">))</span> <span class=\"k\">return</span> first <span class=\"k\">?</span> <span class=\"k\">void</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"k\">[];</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">[</span>first <span class=\"k\">?</span> <span class=\"s\">'find'</span> <span class=\"k\">:</span> <span class=\"s\">'filter'</span><span class=\"k\">](</span><span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>attrs<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">!==</span> model<span class=\"k\">.</span>get<span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Return the first model with matching attributes. Useful for simple cases</span>","    <span class=\"c\">// of `find`.</span>","    findWhere<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>where<span class=\"k\">(</span>attrs<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Force the collection to re-sort itself. You don't need to call this under</span>","    <span class=\"c\">// normal circumstances, as the set will maintain sort order as each item</span>","    <span class=\"c\">// is added.</span>","    sort<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>comparator<span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'Cannot sort a set without a comparator'</span><span class=\"k\">);</span>","      options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","","      <span class=\"c\">// Run sort based on type of `comparator`.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isString<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>comparator<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>comparator<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>models <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>sortBy<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>comparator<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">.</span>sort<span class=\"k\">(</span>_<span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>comparator<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">));</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>silent<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'sort'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Pluck an attribute from each model in the collection.</span>","    pluck<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>invoke<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">,</span> <span class=\"s\">'get'</span><span class=\"k\">,</span> attr<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Fetch the default set of models for this collection, resetting the</span>","    <span class=\"c\">// collection when they arrive. If `reset: true` is passed, the response</span>","    <span class=\"c\">// data will be passed through the `reset` method instead of `set`.</span>","    fetch<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">?</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>parse <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> options<span class=\"k\">.</span>parse <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> success <span class=\"k\">=</span> options<span class=\"k\">.</span>success<span class=\"k\">;</span>","      <span class=\"k\">var</span> collection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      options<span class=\"k\">.</span>success <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> method <span class=\"k\">=</span> options<span class=\"k\">.</span>reset <span class=\"k\">?</span> <span class=\"s\">'reset'</span> <span class=\"k\">:</span> <span class=\"s\">'set'</span><span class=\"k\">;</span>","        collection<span class=\"k\">[</span>method<span class=\"k\">](</span>resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>success<span class=\"k\">)</span> success<span class=\"k\">(</span>collection<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","        collection<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'sync'</span><span class=\"k\">,</span> collection<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      wrapError<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sync<span class=\"k\">(</span><span class=\"s\">'read'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Create a new instance of a model in this collection. Add the model to the</span>","    <span class=\"c\">// collection immediately, unless `wait: true` is passed, in which case we</span>","    <span class=\"c\">// wait for the server to agree.</span>","    create<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">?</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span>model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_prepareModel<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>wait<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>add<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">var</span> collection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> success <span class=\"k\">=</span> options<span class=\"k\">.</span>success<span class=\"k\">;</span>","      options<span class=\"k\">.</span>success <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> resp<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>wait<span class=\"k\">)</span> collection<span class=\"k\">.</span>add<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>success<span class=\"k\">)</span> success<span class=\"k\">(</span>model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      model<span class=\"k\">.</span>save<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> model<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// **parse** converts a response into a list of models to be added to the</span>","    <span class=\"c\">// collection. The default implementation is just to pass it through.</span>","    parse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> resp<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Create a new collection with an identical list of models as this one.</span>","    clone<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Private method to reset all internal state. Called when the collection</span>","    <span class=\"c\">// is first initialized or reset.</span>","    _reset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>models <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_byId  <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Prepare a hash of attributes (or other model) to be added to this</span>","    <span class=\"c\">// collection.</span>","    _prepareModel<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>attrs <span class=\"k\">instanceof</span> Model<span class=\"k\">)</span> <span class=\"k\">return</span> attrs<span class=\"k\">;</span>","      options <span class=\"k\">=</span> options <span class=\"k\">?</span> _<span class=\"k\">.</span>clone<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      options<span class=\"k\">.</span>collection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">(</span>attrs<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">.</span>validationError<span class=\"k\">)</span> <span class=\"k\">return</span> model<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'invalid'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> model<span class=\"k\">.</span>validationError<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Internal method to create a model's ties to a collection.</span>","    _addReference<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>model<span class=\"k\">.</span>cid<span class=\"k\">]</span> <span class=\"k\">=</span> model<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>model<span class=\"k\">.</span>id <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>model<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> model<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">.</span>collection<span class=\"k\">)</span> model<span class=\"k\">.</span>collection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      model<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'all'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_onModelEvent<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Internal method to sever a model's ties to a collection.</span>","    _removeReference<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">===</span> model<span class=\"k\">.</span>collection<span class=\"k\">)</span> <span class=\"k\">delete</span> model<span class=\"k\">.</span>collection<span class=\"k\">;</span>","      model<span class=\"k\">.</span>off<span class=\"k\">(</span><span class=\"s\">'all'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_onModelEvent<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Internal method called every time a model in the set fires an event.</span>","    <span class=\"c\">// Sets need to update their indexes when models change ids. All other</span>","    <span class=\"c\">// events simply proxy through. \"add\" and \"remove\" events that originate</span>","    <span class=\"c\">// in other collections are ignored.</span>","    _onModelEvent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">,</span> model<span class=\"k\">,</span> collection<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">((</span>event <span class=\"k\">===</span> <span class=\"s\">'add'</span> <span class=\"k\">||</span> event <span class=\"k\">===</span> <span class=\"s\">'remove'</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> collection <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>event <span class=\"k\">===</span> <span class=\"s\">'destroy'</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>remove<span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>model <span class=\"k\">&amp;&amp;</span> event <span class=\"k\">===</span> <span class=\"s\">'change:'</span> <span class=\"k\">+</span> model<span class=\"k\">.</span>idAttribute<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>model<span class=\"k\">.</span>previous<span class=\"k\">(</span>model<span class=\"k\">.</span>idAttribute<span class=\"k\">)];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>model<span class=\"k\">.</span>id <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>_byId<span class=\"k\">[</span>model<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> model<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>trigger<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Underscore methods that we want to implement on the Collection.</span>","  <span class=\"c\">// 90% of the core usefulness of Backbone Collections is actually implemented</span>","  <span class=\"c\">// right here:</span>","  <span class=\"k\">var</span> methods <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'forEach'</span><span class=\"k\">,</span> <span class=\"s\">'each'</span><span class=\"k\">,</span> <span class=\"s\">'map'</span><span class=\"k\">,</span> <span class=\"s\">'collect'</span><span class=\"k\">,</span> <span class=\"s\">'reduce'</span><span class=\"k\">,</span> <span class=\"s\">'foldl'</span><span class=\"k\">,</span>","    <span class=\"s\">'inject'</span><span class=\"k\">,</span> <span class=\"s\">'reduceRight'</span><span class=\"k\">,</span> <span class=\"s\">'foldr'</span><span class=\"k\">,</span> <span class=\"s\">'find'</span><span class=\"k\">,</span> <span class=\"s\">'detect'</span><span class=\"k\">,</span> <span class=\"s\">'filter'</span><span class=\"k\">,</span> <span class=\"s\">'select'</span><span class=\"k\">,</span>","    <span class=\"s\">'reject'</span><span class=\"k\">,</span> <span class=\"s\">'every'</span><span class=\"k\">,</span> <span class=\"s\">'all'</span><span class=\"k\">,</span> <span class=\"s\">'some'</span><span class=\"k\">,</span> <span class=\"s\">'any'</span><span class=\"k\">,</span> <span class=\"s\">'include'</span><span class=\"k\">,</span> <span class=\"s\">'contains'</span><span class=\"k\">,</span> <span class=\"s\">'invoke'</span><span class=\"k\">,</span>","    <span class=\"s\">'max'</span><span class=\"k\">,</span> <span class=\"s\">'min'</span><span class=\"k\">,</span> <span class=\"s\">'toArray'</span><span class=\"k\">,</span> <span class=\"s\">'size'</span><span class=\"k\">,</span> <span class=\"s\">'first'</span><span class=\"k\">,</span> <span class=\"s\">'head'</span><span class=\"k\">,</span> <span class=\"s\">'take'</span><span class=\"k\">,</span> <span class=\"s\">'initial'</span><span class=\"k\">,</span> <span class=\"s\">'rest'</span><span class=\"k\">,</span>","    <span class=\"s\">'tail'</span><span class=\"k\">,</span> <span class=\"s\">'drop'</span><span class=\"k\">,</span> <span class=\"s\">'last'</span><span class=\"k\">,</span> <span class=\"s\">'without'</span><span class=\"k\">,</span> <span class=\"s\">'difference'</span><span class=\"k\">,</span> <span class=\"s\">'indexOf'</span><span class=\"k\">,</span> <span class=\"s\">'shuffle'</span><span class=\"k\">,</span>","    <span class=\"s\">'lastIndexOf'</span><span class=\"k\">,</span> <span class=\"s\">'isEmpty'</span><span class=\"k\">,</span> <span class=\"s\">'chain'</span><span class=\"k\">,</span> <span class=\"s\">'sample'</span><span class=\"k\">];</span>","","  <span class=\"c\">// Mix in each Underscore method as a proxy to `Collection#models`.</span>","  _<span class=\"k\">.</span>each<span class=\"k\">(</span>methods<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>method<span class=\"k\">)</span> <span class=\"k\">{</span>","    Collection<span class=\"k\">.</span>prototype<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> args <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","      args<span class=\"k\">.</span>unshift<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">);</span>","      <span class=\"k\">return</span> _<span class=\"k\">[</span>method<span class=\"k\">].</span>apply<span class=\"k\">(</span>_<span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Underscore methods that take a property name as an argument.</span>","  <span class=\"k\">var</span> attributeMethods <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'groupBy'</span><span class=\"k\">,</span> <span class=\"s\">'countBy'</span><span class=\"k\">,</span> <span class=\"s\">'sortBy'</span><span class=\"k\">,</span> <span class=\"s\">'indexBy'</span><span class=\"k\">];</span>","","  <span class=\"c\">// Use attributes instead of properties.</span>","  _<span class=\"k\">.</span>each<span class=\"k\">(</span>attributeMethods<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>method<span class=\"k\">)</span> <span class=\"k\">{</span>","    Collection<span class=\"k\">.</span>prototype<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> iterator <span class=\"k\">=</span> _<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">?</span> value <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> model<span class=\"k\">.</span>get<span class=\"k\">(</span>value<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> _<span class=\"k\">[</span>method<span class=\"k\">](</span><span class=\"k\">this</span><span class=\"k\">.</span>models<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Backbone.View</span>","  <span class=\"c\">// -------------</span>","","  <span class=\"c\">// Backbone Views are almost more convention than they are actual code. A View</span>","  <span class=\"c\">// is simply a JavaScript object that represents a logical chunk of UI in the</span>","  <span class=\"c\">// DOM. This might be a single item, an entire list, a sidebar or panel, or</span>","  <span class=\"c\">// even the surrounding frame which wraps your whole app. Defining a chunk of</span>","  <span class=\"c\">// UI as a **View** allows you to define your DOM events declaratively, without</span>","  <span class=\"c\">// having to worry about render order ... and makes it easy for the view to</span>","  <span class=\"c\">// react to specific changes in the state of your models.</span>","","  <span class=\"c\">// Creating a Backbone.View creates its initial element outside of the DOM,</span>","  <span class=\"c\">// if an existing element is not provided...</span>","  <span class=\"k\">var</span> View <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>View <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>cid <span class=\"k\">=</span> _<span class=\"k\">.</span>uniqueId<span class=\"k\">(</span><span class=\"s\">'view'</span><span class=\"k\">);</span>","    options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> _<span class=\"k\">.</span>pick<span class=\"k\">(</span>options<span class=\"k\">,</span> viewOptions<span class=\"k\">));</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_ensureElement<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>initialize<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>delegateEvents<span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regex to split keys for `delegate`.</span>","  <span class=\"k\">var</span> delegateEventSplitter <span class=\"k\">=</span> <span class=\"s\">/^(\\S+)\\s*(.*)$/</span><span class=\"k\">;</span>","","  <span class=\"c\">// List of view options to be merged as properties.</span>","  <span class=\"k\">var</span> viewOptions <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'model'</span><span class=\"k\">,</span> <span class=\"s\">'collection'</span><span class=\"k\">,</span> <span class=\"s\">'el'</span><span class=\"k\">,</span> <span class=\"s\">'id'</span><span class=\"k\">,</span> <span class=\"s\">'attributes'</span><span class=\"k\">,</span> <span class=\"s\">'className'</span><span class=\"k\">,</span> <span class=\"s\">'tagName'</span><span class=\"k\">,</span> <span class=\"s\">'events'</span><span class=\"k\">];</span>","","  <span class=\"c\">// Set up all inheritable **Backbone.View** properties and methods.</span>","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>View<span class=\"k\">.</span>prototype<span class=\"k\">,</span> Events<span class=\"k\">,</span> <span class=\"k\">{</span>","","    <span class=\"c\">// The default `tagName` of a View's element is `\"div\"`.</span>","    tagName<span class=\"k\">:</span> <span class=\"s\">'div'</span><span class=\"k\">,</span>","","    <span class=\"c\">// jQuery delegate for element lookup, scoped to DOM elements within the</span>","    <span class=\"c\">// current view. This should be preferred to global lookups where possible.</span>","    $<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selector<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">.</span>find<span class=\"k\">(</span>selector<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Initialize is an empty function by default. Override it with your own</span>","    <span class=\"c\">// initialization logic.</span>","    initialize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// **render** is the core function that your view should override, in order</span>","    <span class=\"c\">// to populate its element (`this.el`), with the appropriate HTML. The</span>","    <span class=\"c\">// convention is for **render** to always return `this`.</span>","    render<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Remove this view by taking the element out of the DOM, and removing any</span>","    <span class=\"c\">// applicable Backbone.Events listeners.</span>","    remove<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">.</span>remove<span class=\"k\">();</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>stopListening<span class=\"k\">();</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Change the view's element (`this.el` property), including event</span>","    <span class=\"c\">// re-delegation.</span>","    setElement<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span> delegate<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>undelegateEvents<span class=\"k\">();</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>$el <span class=\"k\">=</span> element <span class=\"k\">instanceof</span> Backbone<span class=\"k\">.</span>$ <span class=\"k\">?</span> element <span class=\"k\">:</span> Backbone<span class=\"k\">.</span>$<span class=\"k\">(</span>element<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>el <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>delegate <span class=\"k\">!==</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegateEvents<span class=\"k\">();</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Set callbacks, where `this.events` is a hash of</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// *{\"event selector\": \"callback\"}*</span>","    <span class=\"c\">//</span>","    <span class=\"c\">//     {</span>","    <span class=\"c\">//       'mousedown .title':  'edit',</span>","    <span class=\"c\">//       'click .button':     'save',</span>","    <span class=\"c\">//       'click .open':       function(e) { ... }</span>","    <span class=\"c\">//     }</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// pairs. Callbacks will be bound to the view, with `this` set properly.</span>","    <span class=\"c\">// Uses event delegation for efficiency.</span>","    <span class=\"c\">// Omitting the selector binds the event to `this.el`.</span>","    <span class=\"c\">// This only works for delegate-able events: not `focus`, `blur`, and</span>","    <span class=\"c\">// not `change`, `submit`, and `reset` in Internet Explorer.</span>","    delegateEvents<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>events<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span>events <span class=\"k\">||</span> <span class=\"k\">(</span>events <span class=\"k\">=</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'events'</span><span class=\"k\">))))</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>undelegateEvents<span class=\"k\">();</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> events<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> method <span class=\"k\">=</span> events<span class=\"k\">[</span>key<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>method<span class=\"k\">))</span> method <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">[</span>events<span class=\"k\">[</span>key<span class=\"k\">]];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>method<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> match <span class=\"k\">=</span> key<span class=\"k\">.</span>match<span class=\"k\">(</span>delegateEventSplitter<span class=\"k\">);</span>","        <span class=\"k\">var</span> eventName <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> selector <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","        method <span class=\"k\">=</span> _<span class=\"k\">.</span>bind<span class=\"k\">(</span>method<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        eventName <span class=\"k\">+=</span> <span class=\"s\">'.delegateEvents'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>cid<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>selector <span class=\"k\">===</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">.</span>on<span class=\"k\">(</span>eventName<span class=\"k\">,</span> method<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">.</span>on<span class=\"k\">(</span>eventName<span class=\"k\">,</span> selector<span class=\"k\">,</span> method<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Clears all callbacks previously bound to the view with `delegateEvents`.</span>","    <span class=\"c\">// You usually don't need to use this, but may wish to if you have multiple</span>","    <span class=\"c\">// Backbone views attached to the same DOM element.</span>","    undelegateEvents<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>$el<span class=\"k\">.</span>off<span class=\"k\">(</span><span class=\"s\">'.delegateEvents'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>cid<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Ensure that the View has a DOM element to render into.</span>","    <span class=\"c\">// If `this.el` is a string, pass it through `$()`, take the first</span>","    <span class=\"c\">// matching element, and re-assign it to `el`. Otherwise, create</span>","    <span class=\"c\">// an element from the `id`, `className` and `tagName` properties.</span>","    _ensureElement<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>el<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> attrs <span class=\"k\">=</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'attributes'</span><span class=\"k\">));</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">)</span> attrs<span class=\"k\">.</span>id <span class=\"k\">=</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'id'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>className<span class=\"k\">)</span> attrs<span class=\"k\">[</span><span class=\"s\">'class'</span><span class=\"k\">]</span> <span class=\"k\">=</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'className'</span><span class=\"k\">);</span>","        <span class=\"k\">var</span> $el <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>$<span class=\"k\">(</span><span class=\"s\">'&lt;'</span> <span class=\"k\">+</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'tagName'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'&gt;'</span><span class=\"k\">).</span>attr<span class=\"k\">(</span>attrs<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>setElement<span class=\"k\">(</span>$el<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>setElement<span class=\"k\">(</span>_<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'el'</span><span class=\"k\">),</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Backbone.sync</span>","  <span class=\"c\">// -------------</span>","","  <span class=\"c\">// Override this function to change the manner in which Backbone persists</span>","  <span class=\"c\">// models to the server. You will be passed the type of request, and the</span>","  <span class=\"c\">// model in question. By default, makes a RESTful Ajax request</span>","  <span class=\"c\">// to the model's `url()`. Some possible customizations could be:</span>","  <span class=\"c\">//</span>","  <span class=\"c\">// * Use `setTimeout` to batch rapid-fire updates into a single request.</span>","  <span class=\"c\">// * Send up the models as XML instead of JSON.</span>","  <span class=\"c\">// * Persist models via WebSockets instead of Ajax.</span>","  <span class=\"c\">//</span>","  <span class=\"c\">// Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests</span>","  <span class=\"c\">// as `POST`, with a `_method` parameter containing the true HTTP method,</span>","  <span class=\"c\">// as well as all requests with the body as `application/x-www-form-urlencoded`</span>","  <span class=\"c\">// instead of `application/json` with the model in a param named `model`.</span>","  <span class=\"c\">// Useful when interfacing with server-side languages like **PHP** that make</span>","  <span class=\"c\">// it difficult to read the body of `PUT` requests.</span>","  Backbone<span class=\"k\">.</span>sync <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>method<span class=\"k\">,</span> model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> type <span class=\"k\">=</span> methodMap<span class=\"k\">[</span>method<span class=\"k\">];</span>","","    <span class=\"c\">// Default options, unless specified.</span>","    _<span class=\"k\">.</span>defaults<span class=\"k\">(</span>options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">),</span> <span class=\"k\">{</span>","      emulateHTTP<span class=\"k\">:</span> Backbone<span class=\"k\">.</span>emulateHTTP<span class=\"k\">,</span>","      emulateJSON<span class=\"k\">:</span> Backbone<span class=\"k\">.</span>emulateJSON","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// Default JSON-request options.</span>","    <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">{</span>type<span class=\"k\">:</span> type<span class=\"k\">,</span> dataType<span class=\"k\">:</span> <span class=\"s\">'json'</span><span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// Ensure that we have a URL.</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>url<span class=\"k\">)</span> <span class=\"k\">{</span>","      params<span class=\"k\">.</span>url <span class=\"k\">=</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span>model<span class=\"k\">,</span> <span class=\"s\">'url'</span><span class=\"k\">)</span> <span class=\"k\">||</span> urlError<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Ensure that we have the appropriate request data.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>data <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> model <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>method <span class=\"k\">===</span> <span class=\"s\">'create'</span> <span class=\"k\">||</span> method <span class=\"k\">===</span> <span class=\"s\">'update'</span> <span class=\"k\">||</span> method <span class=\"k\">===</span> <span class=\"s\">'patch'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      params<span class=\"k\">.</span>contentType <span class=\"k\">=</span> <span class=\"s\">'application/json'</span><span class=\"k\">;</span>","      params<span class=\"k\">.</span>data <span class=\"k\">=</span> JSON<span class=\"k\">.</span>stringify<span class=\"k\">(</span>options<span class=\"k\">.</span>attrs <span class=\"k\">||</span> model<span class=\"k\">.</span>toJSON<span class=\"k\">(</span>options<span class=\"k\">));</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// For older servers, emulate JSON by encoding the request into an HTML-form.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>emulateJSON<span class=\"k\">)</span> <span class=\"k\">{</span>","      params<span class=\"k\">.</span>contentType <span class=\"k\">=</span> <span class=\"s\">'application/x-www-form-urlencoded'</span><span class=\"k\">;</span>","      params<span class=\"k\">.</span>data <span class=\"k\">=</span> params<span class=\"k\">.</span>data <span class=\"k\">?</span> <span class=\"k\">{</span>model<span class=\"k\">:</span> params<span class=\"k\">.</span>data<span class=\"k\">}</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// For older servers, emulate HTTP by mimicking the HTTP method with `_method`</span>","    <span class=\"c\">// And an `X-HTTP-Method-Override` header.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>emulateHTTP <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">'PUT'</span> <span class=\"k\">||</span> type <span class=\"k\">===</span> <span class=\"s\">'DELETE'</span> <span class=\"k\">||</span> type <span class=\"k\">===</span> <span class=\"s\">'PATCH'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      params<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'POST'</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>emulateJSON<span class=\"k\">)</span> params<span class=\"k\">.</span>data<span class=\"k\">.</span>_method <span class=\"k\">=</span> type<span class=\"k\">;</span>","      <span class=\"k\">var</span> beforeSend <span class=\"k\">=</span> options<span class=\"k\">.</span>beforeSend<span class=\"k\">;</span>","      options<span class=\"k\">.</span>beforeSend <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>xhr<span class=\"k\">)</span> <span class=\"k\">{</span>","        xhr<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">'X-HTTP-Method-Override'</span><span class=\"k\">,</span> type<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>beforeSend<span class=\"k\">)</span> <span class=\"k\">return</span> beforeSend<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Don't process data on a non-GET request.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>params<span class=\"k\">.</span>type <span class=\"k\">!==</span> <span class=\"s\">'GET'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>options<span class=\"k\">.</span>emulateJSON<span class=\"k\">)</span> <span class=\"k\">{</span>","      params<span class=\"k\">.</span>processData <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// If we're sending a `PATCH` request, and we're in an old Internet Explorer</span>","    <span class=\"c\">// that still has ActiveX enabled by default, override jQuery to use that</span>","    <span class=\"c\">// for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>params<span class=\"k\">.</span>type <span class=\"k\">===</span> <span class=\"s\">'PATCH'</span> <span class=\"k\">&amp;&amp;</span> noXhrPatch<span class=\"k\">)</span> <span class=\"k\">{</span>","      params<span class=\"k\">.</span>xhr <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"Microsoft.XMLHTTP\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Make the request, allowing the user to override any Ajax options.</span>","    <span class=\"k\">var</span> xhr <span class=\"k\">=</span> options<span class=\"k\">.</span>xhr <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>ajax<span class=\"k\">(</span>_<span class=\"k\">.</span>extend<span class=\"k\">(</span>params<span class=\"k\">,</span> options<span class=\"k\">));</span>","    model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'request'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> xhr<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">return</span> xhr<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> noXhrPatch <span class=\"k\">=</span>","    <span class=\"k\">typeof</span> window <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!!</span>window<span class=\"k\">.</span>ActiveXObject <span class=\"k\">&amp;&amp;</span>","      <span class=\"k\">!(</span>window<span class=\"k\">.</span>XMLHttpRequest <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span><span class=\"k\">new</span> XMLHttpRequest<span class=\"k\">).</span>dispatchEvent<span class=\"k\">);</span>","","  <span class=\"c\">// Map from CRUD to HTTP for our default `Backbone.sync` implementation.</span>","  <span class=\"k\">var</span> methodMap <span class=\"k\">=</span> <span class=\"k\">{</span>","    <span class=\"s\">'create'</span><span class=\"k\">:</span> <span class=\"s\">'POST'</span><span class=\"k\">,</span>","    <span class=\"s\">'update'</span><span class=\"k\">:</span> <span class=\"s\">'PUT'</span><span class=\"k\">,</span>","    <span class=\"s\">'patch'</span><span class=\"k\">:</span>  <span class=\"s\">'PATCH'</span><span class=\"k\">,</span>","    <span class=\"s\">'delete'</span><span class=\"k\">:</span> <span class=\"s\">'DELETE'</span><span class=\"k\">,</span>","    <span class=\"s\">'read'</span><span class=\"k\">:</span>   <span class=\"s\">'GET'</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Set the default implementation of `Backbone.ajax` to proxy through to `$`.</span>","  <span class=\"c\">// Override this if you'd like to use a different library.</span>","  Backbone<span class=\"k\">.</span>ajax <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> Backbone<span class=\"k\">.</span>$<span class=\"k\">.</span>ajax<span class=\"k\">.</span>apply<span class=\"k\">(</span>Backbone<span class=\"k\">.</span>$<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Backbone.Router</span>","  <span class=\"c\">// ---------------</span>","","  <span class=\"c\">// Routers map faux-URLs to actions, and fire events when routes are</span>","  <span class=\"c\">// matched. Creating a new one sets its `routes` hash, if not set statically.</span>","  <span class=\"k\">var</span> Router <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>Router <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","    options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>routes<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>routes <span class=\"k\">=</span> options<span class=\"k\">.</span>routes<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_bindRoutes<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>initialize<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regular expressions for matching named param parts and splatted</span>","  <span class=\"c\">// parts of route strings.</span>","  <span class=\"k\">var</span> optionalParam <span class=\"k\">=</span> <span class=\"s\">/\\((.*?)\\)/g</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> namedParam    <span class=\"k\">=</span> <span class=\"s\">/(\\(\\?)?:\\w+/g</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> splatParam    <span class=\"k\">=</span> <span class=\"s\">/\\*\\w+/g</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> escapeRegExp  <span class=\"k\">=</span> <span class=\"s\">/[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g</span><span class=\"k\">;</span>","","  <span class=\"c\">// Set up all inheritable **Backbone.Router** properties and methods.</span>","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>Router<span class=\"k\">.</span>prototype<span class=\"k\">,</span> Events<span class=\"k\">,</span> <span class=\"k\">{</span>","","    <span class=\"c\">// Initialize is an empty function by default. Override it with your own</span>","    <span class=\"c\">// initialization logic.</span>","    initialize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Manually bind a single named route to a callback. For example:</span>","    <span class=\"c\">//</span>","    <span class=\"c\">//     this.route('search/:query/p:num', 'search', function(query, num) {</span>","    <span class=\"c\">//       ...</span>","    <span class=\"c\">//     });</span>","    <span class=\"c\">//</span>","    route<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>route<span class=\"k\">,</span> name<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isRegExp<span class=\"k\">(</span>route<span class=\"k\">))</span> route <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_routeToRegExp<span class=\"k\">(</span>route<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","        callback <span class=\"k\">=</span> name<span class=\"k\">;</span>","        name <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>callback<span class=\"k\">)</span> callback <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">[</span>name<span class=\"k\">];</span>","      <span class=\"k\">var</span> router <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      Backbone<span class=\"k\">.</span>history<span class=\"k\">.</span>route<span class=\"k\">(</span>route<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>fragment<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> args <span class=\"k\">=</span> router<span class=\"k\">.</span>_extractParameters<span class=\"k\">(</span>route<span class=\"k\">,</span> fragment<span class=\"k\">);</span>","        router<span class=\"k\">.</span>execute<span class=\"k\">(</span>callback<span class=\"k\">,</span> args<span class=\"k\">);</span>","        router<span class=\"k\">.</span>trigger<span class=\"k\">.</span>apply<span class=\"k\">(</span>router<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">'route:'</span> <span class=\"k\">+</span> name<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","        router<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'route'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> args<span class=\"k\">);</span>","        Backbone<span class=\"k\">.</span>history<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'route'</span><span class=\"k\">,</span> router<span class=\"k\">,</span> name<span class=\"k\">,</span> args<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Execute a route handler with the provided parameters.  This is an</span>","    <span class=\"c\">// excellent place to do pre-route setup or post-route cleanup.</span>","    execute<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>callback<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>callback<span class=\"k\">)</span> callback<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Simple proxy to `Backbone.history` to save a fragment into the history.</span>","    navigate<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fragment<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      Backbone<span class=\"k\">.</span>history<span class=\"k\">.</span>navigate<span class=\"k\">(</span>fragment<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Bind all defined routes to `Backbone.history`. We have to reverse the</span>","    <span class=\"c\">// order of the routes here to support behavior where the most general</span>","    <span class=\"c\">// routes can be defined at the bottom of the route map.</span>","    _bindRoutes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>routes<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>routes <span class=\"k\">=</span> _<span class=\"k\">.</span>result<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'routes'</span><span class=\"k\">);</span>","      <span class=\"k\">var</span> route<span class=\"k\">,</span> routes <span class=\"k\">=</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>routes<span class=\"k\">);</span>","      <span class=\"k\">while</span> <span class=\"k\">((</span>route <span class=\"k\">=</span> routes<span class=\"k\">.</span>pop<span class=\"k\">())</span> <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>route<span class=\"k\">(</span>route<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>routes<span class=\"k\">[</span>route<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Convert a route string into a regular expression, suitable for matching</span>","    <span class=\"c\">// against the current location hash.</span>","    _routeToRegExp<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>route<span class=\"k\">)</span> <span class=\"k\">{</span>","      route <span class=\"k\">=</span> route<span class=\"k\">.</span>replace<span class=\"k\">(</span>escapeRegExp<span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">$&amp;'</span><span class=\"k\">)</span>","                   <span class=\"k\">.</span>replace<span class=\"k\">(</span>optionalParam<span class=\"k\">,</span> <span class=\"s\">'(?:$1)?'</span><span class=\"k\">)</span>","                   <span class=\"k\">.</span>replace<span class=\"k\">(</span>namedParam<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>match<span class=\"k\">,</span> optional<span class=\"k\">)</span> <span class=\"k\">{</span>","                     <span class=\"k\">return</span> optional <span class=\"k\">?</span> match <span class=\"k\">:</span> <span class=\"s\">'([^/?]+)'</span><span class=\"k\">;</span>","                   <span class=\"k\">}</span><span class=\"k\">)</span>","                   <span class=\"k\">.</span>replace<span class=\"k\">(</span>splatParam<span class=\"k\">,</span> <span class=\"s\">'([^?]*?)'</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'^'</span> <span class=\"k\">+</span> route <span class=\"k\">+</span> <span class=\"s\">'(?:</span><span class=\"t\">\\\\</span><span class=\"s\">?([</span><span class=\"t\">\\\\</span><span class=\"s\">s</span><span class=\"t\">\\\\</span><span class=\"s\">S]*))?$'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Given a route, and a URL fragment that it matches, return the array of</span>","    <span class=\"c\">// extracted decoded parameters. Empty or unmatched parameters will be</span>","    <span class=\"c\">// treated as `null` to normalize cross-browser behavior.</span>","    _extractParameters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>route<span class=\"k\">,</span> fragment<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> route<span class=\"k\">.</span>exec<span class=\"k\">(</span>fragment<span class=\"k\">).</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>map<span class=\"k\">(</span>params<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span> i<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Don't decode the search params.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">===</span> params<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">return</span> param <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> param <span class=\"k\">?</span> decodeURIComponent<span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Backbone.History</span>","  <span class=\"c\">// ----------------</span>","","  <span class=\"c\">// Handles cross-browser history management, based on either</span>","  <span class=\"c\">// [pushState](http://diveintohtml5.info/history.html) and real URLs, or</span>","  <span class=\"c\">// [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)</span>","  <span class=\"c\">// and URL fragments. If the browser supports neither (old IE, natch),</span>","  <span class=\"c\">// falls back to polling.</span>","  <span class=\"k\">var</span> History <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>History <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>handlers <span class=\"k\">=</span> <span class=\"k\">[];</span>","    _<span class=\"k\">.</span>bindAll<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'checkUrl'</span><span class=\"k\">);</span>","","    <span class=\"c\">// Ensure that `History` can be used outside of the browser.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> window <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>location <span class=\"k\">=</span> window<span class=\"k\">.</span>location<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>history <span class=\"k\">=</span> window<span class=\"k\">.</span>history<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regex for stripping a leading hash/slash and trailing space.</span>","  <span class=\"k\">var</span> routeStripper <span class=\"k\">=</span> <span class=\"s\">/^[#\\/]|\\s+$/g</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regex for stripping leading and trailing slashes.</span>","  <span class=\"k\">var</span> rootStripper <span class=\"k\">=</span> <span class=\"s\">/^\\/+|\\/+$/g</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regex for detecting MSIE.</span>","  <span class=\"k\">var</span> isExplorer <span class=\"k\">=</span> <span class=\"s\">/msie [\\w.]+/</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regex for removing a trailing slash.</span>","  <span class=\"k\">var</span> trailingSlash <span class=\"k\">=</span> <span class=\"s\">/\\/$/</span><span class=\"k\">;</span>","","  <span class=\"c\">// Cached regex for stripping urls of hash.</span>","  <span class=\"k\">var</span> pathStripper <span class=\"k\">=</span> <span class=\"s\">/#.*$/</span><span class=\"k\">;</span>","","  <span class=\"c\">// Has the history handling already been started?</span>","  History<span class=\"k\">.</span>started <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","  <span class=\"c\">// Set up all inheritable **Backbone.History** properties and methods.</span>","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>History<span class=\"k\">.</span>prototype<span class=\"k\">,</span> Events<span class=\"k\">,</span> <span class=\"k\">{</span>","","    <span class=\"c\">// The default interval to poll for hash changes, if necessary, is</span>","    <span class=\"c\">// twenty times a second.</span>","    interval<span class=\"k\">:</span> <span class=\"s\">50</span><span class=\"k\">,</span>","","    <span class=\"c\">// Are we at the app root?</span>","    atRoot<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">.</span>pathname<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/[^\\/]$/</span><span class=\"k\">,</span> <span class=\"s\">'$&amp;/'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>root<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Gets the true hash value. Cannot use location.hash directly due to bug</span>","    <span class=\"c\">// in Firefox where location.hash will always be decoded.</span>","    getHash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>window<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> match <span class=\"k\">=</span> <span class=\"k\">(</span>window <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">).</span>location<span class=\"k\">.</span>href<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/#(.*)$/</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> match <span class=\"k\">?</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Get the cross-browser normalized URL fragment, either from the URL,</span>","    <span class=\"c\">// the hash, or the override.</span>","    getFragment<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fragment<span class=\"k\">,</span> forcePushState<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>fragment <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasPushState <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange <span class=\"k\">||</span> forcePushState<span class=\"k\">)</span> <span class=\"k\">{</span>","          fragment <span class=\"k\">=</span> decodeURI<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">.</span>pathname <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">.</span>search<span class=\"k\">);</span>","          <span class=\"k\">var</span> root <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>root<span class=\"k\">.</span>replace<span class=\"k\">(</span>trailingSlash<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>fragment<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>root<span class=\"k\">))</span> fragment <span class=\"k\">=</span> fragment<span class=\"k\">.</span>slice<span class=\"k\">(</span>root<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getHash<span class=\"k\">();</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> fragment<span class=\"k\">.</span>replace<span class=\"k\">(</span>routeStripper<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Start the hash change handling, returning `true` if the current URL matches</span>","    <span class=\"c\">// an existing route, and `false` otherwise.</span>","    start<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>History<span class=\"k\">.</span>started<span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Backbone.history has already been started\"</span><span class=\"k\">);</span>","      History<span class=\"k\">.</span>started <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","      <span class=\"c\">// Figure out the initial configuration. Do we need an iframe?</span>","      <span class=\"c\">// Is pushState desired ... is it available?</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>options          <span class=\"k\">=</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>root<span class=\"k\">:</span> <span class=\"s\">'/'</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>root             <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>root<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>hashChange <span class=\"k\">!==</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_wantsPushState  <span class=\"k\">=</span> <span class=\"k\">!!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>pushState<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_hasPushState    <span class=\"k\">=</span> <span class=\"k\">!!(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>pushState <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>history <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>history<span class=\"k\">.</span>pushState<span class=\"k\">);</span>","      <span class=\"k\">var</span> fragment          <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">();</span>","      <span class=\"k\">var</span> docMode           <span class=\"k\">=</span> document<span class=\"k\">.</span>documentMode<span class=\"k\">;</span>","      <span class=\"k\">var</span> oldIE             <span class=\"k\">=</span> <span class=\"k\">(</span>isExplorer<span class=\"k\">.</span>exec<span class=\"k\">(</span>navigator<span class=\"k\">.</span>userAgent<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>docMode <span class=\"k\">||</span> docMode <span class=\"k\">&lt;=</span> <span class=\"s\">7</span><span class=\"k\">));</span>","","      <span class=\"c\">// Normalize root to always include a leading and trailing slash.</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">'/'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">+</span> <span class=\"s\">'/'</span><span class=\"k\">).</span>replace<span class=\"k\">(</span>rootStripper<span class=\"k\">,</span> <span class=\"s\">'/'</span><span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>oldIE <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> frame <span class=\"k\">=</span> Backbone<span class=\"k\">.</span>$<span class=\"k\">(</span><span class=\"s\">'&lt;iframe src=\"javascript:0\" tabindex=\"-1\"&gt;'</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>iframe <span class=\"k\">=</span> frame<span class=\"k\">.</span>hide<span class=\"k\">().</span>appendTo<span class=\"k\">(</span><span class=\"s\">'body'</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">].</span>contentWindow<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>navigate<span class=\"k\">(</span>fragment<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Depending on whether we're using pushState or hashes, and whether</span>","      <span class=\"c\">// 'onhashchange' is supported, determine how we check the URL state.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasPushState<span class=\"k\">)</span> <span class=\"k\">{</span>","        Backbone<span class=\"k\">.</span>$<span class=\"k\">(</span>window<span class=\"k\">).</span>on<span class=\"k\">(</span><span class=\"s\">'popstate'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>checkUrl<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span><span class=\"s\">'onhashchange'</span> <span class=\"k\">in</span> window<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>oldIE<span class=\"k\">)</span> <span class=\"k\">{</span>","        Backbone<span class=\"k\">.</span>$<span class=\"k\">(</span>window<span class=\"k\">).</span>on<span class=\"k\">(</span><span class=\"s\">'hashchange'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>checkUrl<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_checkUrlInterval <span class=\"k\">=</span> setInterval<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>checkUrl<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>interval<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Determine if we need to change the base url, for a pushState link</span>","      <span class=\"c\">// opened by a non-pushState browser.</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">=</span> fragment<span class=\"k\">;</span>","      <span class=\"k\">var</span> loc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">;</span>","","      <span class=\"c\">// Transition from hashChange to pushState or vice versa if both are</span>","      <span class=\"c\">// requested.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_wantsPushState<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// If we've started off with a route from a `pushState`-enabled</span>","        <span class=\"c\">// browser, but we're currently in a browser that doesn't support it...</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasPushState <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>atRoot<span class=\"k\">())</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">+</span> <span class=\"s\">'#'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>fragment<span class=\"k\">);</span>","          <span class=\"c\">// Return immediately as browser will do redirect to new url</span>","          <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"c\">// Or if we've started out with a hash-based route, but we're currently</span>","        <span class=\"c\">// in a browser where it could be `pushState`-based instead...</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasPushState <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>atRoot<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> loc<span class=\"k\">.</span>hash<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getHash<span class=\"k\">().</span>replace<span class=\"k\">(</span>routeStripper<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>history<span class=\"k\">.</span>replaceState<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> document<span class=\"k\">.</span>title<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>fragment<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>silent<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>loadUrl<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Disable Backbone.history, perhaps temporarily. Not useful in a real app,</span>","    <span class=\"c\">// but possibly useful for unit testing Routers.</span>","    stop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      Backbone<span class=\"k\">.</span>$<span class=\"k\">(</span>window<span class=\"k\">).</span>off<span class=\"k\">(</span><span class=\"s\">'popstate'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>checkUrl<span class=\"k\">).</span>off<span class=\"k\">(</span><span class=\"s\">'hashchange'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>checkUrl<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_checkUrlInterval<span class=\"k\">)</span> clearInterval<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_checkUrlInterval<span class=\"k\">);</span>","      History<span class=\"k\">.</span>started <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Add a route to be tested when the fragment changes. Routes added later</span>","    <span class=\"c\">// may override previous routes.</span>","    route<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>route<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>handlers<span class=\"k\">.</span>unshift<span class=\"k\">(</span><span class=\"k\">{</span>route<span class=\"k\">:</span> route<span class=\"k\">,</span> callback<span class=\"k\">:</span> callback<span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Checks the current URL to see if it has changed, and if it has,</span>","    <span class=\"c\">// calls `loadUrl`, normalizing across the hidden iframe.</span>","    checkUrl<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>current <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>iframe<span class=\"k\">)</span> <span class=\"k\">{</span>","        current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getHash<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>iframe<span class=\"k\">));</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>current <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>fragment<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>iframe<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>navigate<span class=\"k\">(</span>current<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>loadUrl<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Attempt to load the current URL fragment. If a route succeeds with a</span>","    <span class=\"c\">// match, returns `true`. If no defined routes matches the fragment,</span>","    <span class=\"c\">// returns `false`.</span>","    loadUrl<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fragment<span class=\"k\">)</span> <span class=\"k\">{</span>","      fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">(</span>fragment<span class=\"k\">);</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>any<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>handlers<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>handler<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>route<span class=\"k\">.</span>test<span class=\"k\">(</span>fragment<span class=\"k\">))</span> <span class=\"k\">{</span>","          handler<span class=\"k\">.</span>callback<span class=\"k\">(</span>fragment<span class=\"k\">);</span>","          <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Save a fragment into the hash history, or replace the URL state if the</span>","    <span class=\"c\">// 'replace' option is passed. You are responsible for properly URL-encoding</span>","    <span class=\"c\">// the fragment in advance.</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// The options object can contain `trigger: true` if you wish to have the</span>","    <span class=\"c\">// route callback be fired (not usually desirable), or `replace: true`, if</span>","    <span class=\"c\">// you wish to modify the current URL without adding an entry to the history.</span>","    navigate<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fragment<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>History<span class=\"k\">.</span>started<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>options <span class=\"k\">||</span> options <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> options <span class=\"k\">=</span> <span class=\"k\">{</span>trigger<span class=\"k\">:</span> <span class=\"k\">!!</span>options<span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">+</span> <span class=\"k\">(</span>fragment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">(</span>fragment <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">));</span>","","      <span class=\"c\">// Strip the hash for matching.</span>","      fragment <span class=\"k\">=</span> fragment<span class=\"k\">.</span>replace<span class=\"k\">(</span>pathStripper<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">===</span> fragment<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>fragment <span class=\"k\">=</span> fragment<span class=\"k\">;</span>","","      <span class=\"c\">// Don't include a trailing slash on the root.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>fragment <span class=\"k\">===</span> <span class=\"s\">''</span> <span class=\"k\">&amp;&amp;</span> url <span class=\"k\">!==</span> <span class=\"s\">'/'</span><span class=\"k\">)</span> url <span class=\"k\">=</span> url<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","","      <span class=\"c\">// If pushState is available, we use it to set the fragment as a real URL.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasPushState<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>history<span class=\"k\">[</span>options<span class=\"k\">.</span>replace <span class=\"k\">?</span> <span class=\"s\">'replaceState'</span> <span class=\"k\">:</span> <span class=\"s\">'pushState'</span><span class=\"k\">](</span><span class=\"k\">{}</span><span class=\"k\">,</span> document<span class=\"k\">.</span>title<span class=\"k\">,</span> url<span class=\"k\">);</span>","","      <span class=\"c\">// If hash changes haven't been explicitly disabled, update the hash</span>","      <span class=\"c\">// fragment to store history.</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_wantsHashChange<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_updateHash<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">,</span> fragment<span class=\"k\">,</span> options<span class=\"k\">.</span>replace<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>iframe <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>fragment <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFragment<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getHash<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>iframe<span class=\"k\">))))</span> <span class=\"k\">{</span>","          <span class=\"c\">// Opening and closing the iframe tricks IE7 and earlier to push a</span>","          <span class=\"c\">// history entry on hash-tag change.  When replace is true, we don't</span>","          <span class=\"c\">// want this.</span>","          <span class=\"k\">if</span><span class=\"k\">(!</span>options<span class=\"k\">.</span>replace<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>iframe<span class=\"k\">.</span>document<span class=\"k\">.</span>open<span class=\"k\">().</span>close<span class=\"k\">();</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>_updateHash<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>iframe<span class=\"k\">.</span>location<span class=\"k\">,</span> fragment<span class=\"k\">,</span> options<span class=\"k\">.</span>replace<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","      <span class=\"c\">// If you've told us that you explicitly don't want fallback hashchange-</span>","      <span class=\"c\">// based history, then `navigate` becomes a page refresh.</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>location<span class=\"k\">.</span>assign<span class=\"k\">(</span>url<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>trigger<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>loadUrl<span class=\"k\">(</span>fragment<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Update the hash location, either replacing the current entry, or adding</span>","    <span class=\"c\">// a new one to the browser history.</span>","    _updateHash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>location<span class=\"k\">,</span> fragment<span class=\"k\">,</span> replace<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>replace<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> href <span class=\"k\">=</span> location<span class=\"k\">.</span>href<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(javascript:|#).*$/</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","        location<span class=\"k\">.</span>replace<span class=\"k\">(</span>href <span class=\"k\">+</span> <span class=\"s\">'#'</span> <span class=\"k\">+</span> fragment<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// Some browsers require that `hash` contains a leading #.</span>","        location<span class=\"k\">.</span>hash <span class=\"k\">=</span> <span class=\"s\">'#'</span> <span class=\"k\">+</span> fragment<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Create the default Backbone.history.</span>","  Backbone<span class=\"k\">.</span>history <span class=\"k\">=</span> <span class=\"k\">new</span> History<span class=\"k\">;</span>","","  <span class=\"c\">// Helpers</span>","  <span class=\"c\">// -------</span>","","  <span class=\"c\">// Helper function to correctly set up the prototype chain, for subclasses.</span>","  <span class=\"c\">// Similar to `goog.inherits`, but uses a hash of prototype properties and</span>","  <span class=\"c\">// class properties to be extended.</span>","  <span class=\"k\">var</span> extend <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>protoProps<span class=\"k\">,</span> staticProps<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> parent <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> child<span class=\"k\">;</span>","","    <span class=\"c\">// The constructor function for the new subclass is either defined by you</span>","    <span class=\"c\">// (the \"constructor\" property in your `extend` definition), or defaulted</span>","    <span class=\"c\">// by us to simply call the parent's constructor.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>protoProps <span class=\"k\">&amp;&amp;</span> _<span class=\"k\">.</span>has<span class=\"k\">(</span>protoProps<span class=\"k\">,</span> <span class=\"s\">'constructor'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      child <span class=\"k\">=</span> protoProps<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      child <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span> <span class=\"k\">return</span> parent<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Add static properties to the constructor function, if supplied.</span>","    _<span class=\"k\">.</span>extend<span class=\"k\">(</span>child<span class=\"k\">,</span> parent<span class=\"k\">,</span> staticProps<span class=\"k\">);</span>","","    <span class=\"c\">// Set the prototype chain to inherit from `parent`, without calling</span>","    <span class=\"c\">// `parent`'s constructor function.</span>","    <span class=\"k\">var</span> Surrogate <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> child<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">;</span>","    Surrogate<span class=\"k\">.</span>prototype <span class=\"k\">=</span> parent<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","    child<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">new</span> Surrogate<span class=\"k\">;</span>","","    <span class=\"c\">// Add prototype properties (instance properties) to the subclass,</span>","    <span class=\"c\">// if supplied.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>protoProps<span class=\"k\">)</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span>child<span class=\"k\">.</span>prototype<span class=\"k\">,</span> protoProps<span class=\"k\">);</span>","","    <span class=\"c\">// Set a convenience property in case the parent's prototype is needed</span>","    <span class=\"c\">// later.</span>","    child<span class=\"k\">.</span>__super__ <span class=\"k\">=</span> parent<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","","    <span class=\"k\">return</span> child<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Set up inheritance for the model, collection, router, view and history.</span>","  Model<span class=\"k\">.</span>extend <span class=\"k\">=</span> Collection<span class=\"k\">.</span>extend <span class=\"k\">=</span> Router<span class=\"k\">.</span>extend <span class=\"k\">=</span> View<span class=\"k\">.</span>extend <span class=\"k\">=</span> History<span class=\"k\">.</span>extend <span class=\"k\">=</span> extend<span class=\"k\">;</span>","","  <span class=\"c\">// Throw an error when a URL is needed, and none is supplied.</span>","  <span class=\"k\">var</span> urlError <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'A \"url\" property or function must be specified'</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Wrap an optional error callback with a fallback error event.</span>","  <span class=\"k\">var</span> wrapError <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> error <span class=\"k\">=</span> options<span class=\"k\">.</span>error<span class=\"k\">;</span>","    options<span class=\"k\">.</span>error <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>resp<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> error<span class=\"k\">(</span>model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","      model<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"s\">'error'</span><span class=\"k\">,</span> model<span class=\"k\">,</span> resp<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">return</span> Backbone<span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">));</span>"];
_$jscoverage['js/lib/backbone.js'][8]++;
(function (root, factory) {
  _$jscoverage['js/lib/backbone.js'][11]++;
  if ((((typeof define) === "function") && define.amd)) {
    _$jscoverage['js/lib/backbone.js'][12]++;
    define(["underscore", "jquery", "exports"], (function (_, $, exports) {
  _$jscoverage['js/lib/backbone.js'][15]++;
  root.Backbone = factory(root, exports, _, $);
}));
  }
  else {
    _$jscoverage['js/lib/backbone.js'][19]++;
    if (((typeof exports) !== "undefined")) {
      _$jscoverage['js/lib/backbone.js'][20]++;
      var _ = require("underscore");
      _$jscoverage['js/lib/backbone.js'][21]++;
      factory(root, exports, _);
    }
    else {
      _$jscoverage['js/lib/backbone.js'][25]++;
      root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
    }
  }
})(this, (function (root, Backbone, _, $) {
  _$jscoverage['js/lib/backbone.js'][35]++;
  var previousBackbone = root.Backbone;
  _$jscoverage['js/lib/backbone.js'][38]++;
  var array = [];
  _$jscoverage['js/lib/backbone.js'][39]++;
  var push = array.push;
  _$jscoverage['js/lib/backbone.js'][40]++;
  var slice = array.slice;
  _$jscoverage['js/lib/backbone.js'][41]++;
  var splice = array.splice;
  _$jscoverage['js/lib/backbone.js'][44]++;
  Backbone.VERSION = "1.1.2";
  _$jscoverage['js/lib/backbone.js'][48]++;
  Backbone.$ = $;
  _$jscoverage['js/lib/backbone.js'][52]++;
  Backbone.noConflict = (function () {
  _$jscoverage['js/lib/backbone.js'][53]++;
  root.Backbone = previousBackbone;
  _$jscoverage['js/lib/backbone.js'][54]++;
  return this;
});
  _$jscoverage['js/lib/backbone.js'][60]++;
  Backbone.emulateHTTP = false;
  _$jscoverage['js/lib/backbone.js'][66]++;
  Backbone.emulateJSON = false;
  _$jscoverage['js/lib/backbone.js'][81]++;
  var Events = (Backbone.Events = {on: (function (name, callback, context) {
  _$jscoverage['js/lib/backbone.js'][86]++;
  if (((! eventsApi(this, "on", name, [callback, context])) || (! callback))) {
    _$jscoverage['js/lib/backbone.js'][86]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][87]++;
  (this._events || (this._events = {}));
  _$jscoverage['js/lib/backbone.js'][88]++;
  var events = (this._events[name] || (this._events[name] = []));
  _$jscoverage['js/lib/backbone.js'][89]++;
  events.push({callback: callback, context: context, ctx: (context || this)});
  _$jscoverage['js/lib/backbone.js'][90]++;
  return this;
}), once: (function (name, callback, context) {
  _$jscoverage['js/lib/backbone.js'][96]++;
  if (((! eventsApi(this, "once", name, [callback, context])) || (! callback))) {
    _$jscoverage['js/lib/backbone.js'][96]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][97]++;
  var self = this;
  _$jscoverage['js/lib/backbone.js'][98]++;
  var once = _.once((function () {
  _$jscoverage['js/lib/backbone.js'][99]++;
  self.off(name, once);
  _$jscoverage['js/lib/backbone.js'][100]++;
  callback.apply(this, arguments);
}));
  _$jscoverage['js/lib/backbone.js'][102]++;
  once._callback = callback;
  _$jscoverage['js/lib/backbone.js'][103]++;
  return this.on(name, once, context);
}), off: (function (name, callback, context) {
  _$jscoverage['js/lib/backbone.js'][111]++;
  var retain, ev, events, names, i, l, j, k;
  _$jscoverage['js/lib/backbone.js'][112]++;
  if (((! this._events) || (! eventsApi(this, "off", name, [callback, context])))) {
    _$jscoverage['js/lib/backbone.js'][112]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][113]++;
  if (((! name) && (! callback) && (! context))) {
    _$jscoverage['js/lib/backbone.js'][114]++;
    this._events = (void 0);
    _$jscoverage['js/lib/backbone.js'][115]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][117]++;
  names = (name? [name]: _.keys(this._events));
  _$jscoverage['js/lib/backbone.js'][118]++;
  for (((i = 0), (l = names.length)); (i < l); (i++)) {
    _$jscoverage['js/lib/backbone.js'][119]++;
    name = names[i];
    _$jscoverage['js/lib/backbone.js'][120]++;
    if ((events = this._events[name])) {
      _$jscoverage['js/lib/backbone.js'][121]++;
      this._events[name] = (retain = []);
      _$jscoverage['js/lib/backbone.js'][122]++;
      if ((callback || context)) {
        _$jscoverage['js/lib/backbone.js'][123]++;
        for (((j = 0), (k = events.length)); (j < k); (j++)) {
          _$jscoverage['js/lib/backbone.js'][124]++;
          ev = events[j];
          _$jscoverage['js/lib/backbone.js'][125]++;
          if (((callback && (callback !== ev.callback) && (callback !== ev.callback._callback)) || (context && (context !== ev.context)))) {
            _$jscoverage['js/lib/backbone.js'][127]++;
            retain.push(ev);
          }
}
      }
      _$jscoverage['js/lib/backbone.js'][131]++;
      if ((! retain.length)) {
        _$jscoverage['js/lib/backbone.js'][131]++;
        (delete this._events[name]);
      }
    }
}
  _$jscoverage['js/lib/backbone.js'][135]++;
  return this;
}), trigger: (function (name) {
  _$jscoverage['js/lib/backbone.js'][143]++;
  if ((! this._events)) {
    _$jscoverage['js/lib/backbone.js'][143]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][144]++;
  var args = slice.call(arguments, 1);
  _$jscoverage['js/lib/backbone.js'][145]++;
  if ((! eventsApi(this, "trigger", name, args))) {
    _$jscoverage['js/lib/backbone.js'][145]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][146]++;
  var events = this._events[name];
  _$jscoverage['js/lib/backbone.js'][147]++;
  var allEvents = this._events.all;
  _$jscoverage['js/lib/backbone.js'][148]++;
  if (events) {
    _$jscoverage['js/lib/backbone.js'][148]++;
    triggerEvents(events, args);
  }
  _$jscoverage['js/lib/backbone.js'][149]++;
  if (allEvents) {
    _$jscoverage['js/lib/backbone.js'][149]++;
    triggerEvents(allEvents, arguments);
  }
  _$jscoverage['js/lib/backbone.js'][150]++;
  return this;
}), stopListening: (function (obj, name, callback) {
  _$jscoverage['js/lib/backbone.js'][156]++;
  var listeningTo = this._listeningTo;
  _$jscoverage['js/lib/backbone.js'][157]++;
  if ((! listeningTo)) {
    _$jscoverage['js/lib/backbone.js'][157]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][158]++;
  var remove = ((! name) && (! callback));
  _$jscoverage['js/lib/backbone.js'][159]++;
  if (((! callback) && ((typeof name) === "object"))) {
    _$jscoverage['js/lib/backbone.js'][159]++;
    callback = this;
  }
  _$jscoverage['js/lib/backbone.js'][160]++;
  if (obj) {
    _$jscoverage['js/lib/backbone.js'][160]++;
    (listeningTo = {})[obj._listenId] = obj;
  }
  _$jscoverage['js/lib/backbone.js'][161]++;
  for (var id in listeningTo) {
    _$jscoverage['js/lib/backbone.js'][162]++;
    obj = listeningTo[id];
    _$jscoverage['js/lib/backbone.js'][163]++;
    obj.off(name, callback, this);
    _$jscoverage['js/lib/backbone.js'][164]++;
    if ((remove || _.isEmpty(obj._events))) {
      _$jscoverage['js/lib/backbone.js'][164]++;
      (delete this._listeningTo[id]);
    }
}
  _$jscoverage['js/lib/backbone.js'][166]++;
  return this;
})});
  _$jscoverage['js/lib/backbone.js'][172]++;
  var eventSplitter = /\s+/;
  _$jscoverage['js/lib/backbone.js'][177]++;
  var eventsApi = (function (obj, action, name, rest) {
  _$jscoverage['js/lib/backbone.js'][178]++;
  if ((! name)) {
    _$jscoverage['js/lib/backbone.js'][178]++;
    return true;
  }
  _$jscoverage['js/lib/backbone.js'][181]++;
  if (((typeof name) === "object")) {
    _$jscoverage['js/lib/backbone.js'][182]++;
    for (var key in name) {
      _$jscoverage['js/lib/backbone.js'][183]++;
      obj[action].apply(obj, [key, name[key]].concat(rest));
}
    _$jscoverage['js/lib/backbone.js'][185]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][189]++;
  if (eventSplitter.test(name)) {
    _$jscoverage['js/lib/backbone.js'][190]++;
    var names = name.split(eventSplitter);
    _$jscoverage['js/lib/backbone.js'][191]++;
    for (var i = 0, l = names.length; (i < l); (i++)) {
      _$jscoverage['js/lib/backbone.js'][192]++;
      obj[action].apply(obj, [names[i]].concat(rest));
}
    _$jscoverage['js/lib/backbone.js'][194]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][197]++;
  return true;
});
  _$jscoverage['js/lib/backbone.js'][203]++;
  var triggerEvents = (function (events, args) {
  _$jscoverage['js/lib/backbone.js'][204]++;
  var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
  _$jscoverage['js/lib/backbone.js'][205]++;
  switch (args.length) {
  case 0:
    _$jscoverage['js/lib/backbone.js'][206]++;
    while (((++i) < l)) {
      _$jscoverage['js/lib/backbone.js'][206]++;
      (ev = events[i]).callback.call(ev.ctx);
}
    _$jscoverage['js/lib/backbone.js'][206]++;
    return;
  case 1:
    _$jscoverage['js/lib/backbone.js'][207]++;
    while (((++i) < l)) {
      _$jscoverage['js/lib/backbone.js'][207]++;
      (ev = events[i]).callback.call(ev.ctx, a1);
}
    _$jscoverage['js/lib/backbone.js'][207]++;
    return;
  case 2:
    _$jscoverage['js/lib/backbone.js'][208]++;
    while (((++i) < l)) {
      _$jscoverage['js/lib/backbone.js'][208]++;
      (ev = events[i]).callback.call(ev.ctx, a1, a2);
}
    _$jscoverage['js/lib/backbone.js'][208]++;
    return;
  case 3:
    _$jscoverage['js/lib/backbone.js'][209]++;
    while (((++i) < l)) {
      _$jscoverage['js/lib/backbone.js'][209]++;
      (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
}
    _$jscoverage['js/lib/backbone.js'][209]++;
    return;
  default:
    _$jscoverage['js/lib/backbone.js'][210]++;
    while (((++i) < l)) {
      _$jscoverage['js/lib/backbone.js'][210]++;
      (ev = events[i]).callback.apply(ev.ctx, args);
}
    _$jscoverage['js/lib/backbone.js'][210]++;
    return;
  }
});
  _$jscoverage['js/lib/backbone.js'][214]++;
  var listenMethods = {listenTo: "on", listenToOnce: "once"};
  _$jscoverage['js/lib/backbone.js'][219]++;
  _.each(listenMethods, (function (implementation, method) {
  _$jscoverage['js/lib/backbone.js'][220]++;
  Events[method] = (function (obj, name, callback) {
  _$jscoverage['js/lib/backbone.js'][221]++;
  var listeningTo = (this._listeningTo || (this._listeningTo = {}));
  _$jscoverage['js/lib/backbone.js'][222]++;
  var id = (obj._listenId || (obj._listenId = _.uniqueId("l")));
  _$jscoverage['js/lib/backbone.js'][223]++;
  listeningTo[id] = obj;
  _$jscoverage['js/lib/backbone.js'][224]++;
  if (((! callback) && ((typeof name) === "object"))) {
    _$jscoverage['js/lib/backbone.js'][224]++;
    callback = this;
  }
  _$jscoverage['js/lib/backbone.js'][225]++;
  (obj[implementation])(name, callback, this);
  _$jscoverage['js/lib/backbone.js'][226]++;
  return this;
});
}));
  _$jscoverage['js/lib/backbone.js'][231]++;
  Events.bind = Events.on;
  _$jscoverage['js/lib/backbone.js'][232]++;
  Events.unbind = Events.off;
  _$jscoverage['js/lib/backbone.js'][236]++;
  _.extend(Backbone, Events);
  _$jscoverage['js/lib/backbone.js'][248]++;
  var Model = (Backbone.Model = (function (attributes, options) {
  _$jscoverage['js/lib/backbone.js'][249]++;
  var attrs = (attributes || {});
  _$jscoverage['js/lib/backbone.js'][250]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][251]++;
  this.cid = _.uniqueId("c");
  _$jscoverage['js/lib/backbone.js'][252]++;
  this.attributes = {};
  _$jscoverage['js/lib/backbone.js'][253]++;
  if (options.collection) {
    _$jscoverage['js/lib/backbone.js'][253]++;
    this.collection = options.collection;
  }
  _$jscoverage['js/lib/backbone.js'][254]++;
  if (options.parse) {
    _$jscoverage['js/lib/backbone.js'][254]++;
    attrs = (this.parse(attrs, options) || {});
  }
  _$jscoverage['js/lib/backbone.js'][255]++;
  attrs = _.defaults({}, attrs, _.result(this, "defaults"));
  _$jscoverage['js/lib/backbone.js'][256]++;
  this.set(attrs, options);
  _$jscoverage['js/lib/backbone.js'][257]++;
  this.changed = {};
  _$jscoverage['js/lib/backbone.js'][258]++;
  this.initialize.apply(this, arguments);
}));
  _$jscoverage['js/lib/backbone.js'][262]++;
  _.extend(Model.prototype, Events, {changed: null, validationError: null, idAttribute: "id", initialize: (function () {
}), toJSON: (function (options) {
  _$jscoverage['js/lib/backbone.js'][280]++;
  return _.clone(this.attributes);
}), sync: (function () {
  _$jscoverage['js/lib/backbone.js'][286]++;
  return Backbone.sync.apply(this, arguments);
}), get: (function (attr) {
  _$jscoverage['js/lib/backbone.js'][291]++;
  return this.attributes[attr];
}), escape: (function (attr) {
  _$jscoverage['js/lib/backbone.js'][296]++;
  return _.escape(this.get(attr));
}), has: (function (attr) {
  _$jscoverage['js/lib/backbone.js'][302]++;
  return (this.get(attr) != null);
}), set: (function (key, val, options) {
  _$jscoverage['js/lib/backbone.js'][309]++;
  var attr, attrs, unset, changes, silent, changing, prev, current;
  _$jscoverage['js/lib/backbone.js'][310]++;
  if ((key == null)) {
    _$jscoverage['js/lib/backbone.js'][310]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][313]++;
  if (((typeof key) === "object")) {
    _$jscoverage['js/lib/backbone.js'][314]++;
    attrs = key;
    _$jscoverage['js/lib/backbone.js'][315]++;
    options = val;
  }
  else {
    _$jscoverage['js/lib/backbone.js'][317]++;
    (attrs = {})[key] = val;
  }
  _$jscoverage['js/lib/backbone.js'][320]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][323]++;
  if ((! this._validate(attrs, options))) {
    _$jscoverage['js/lib/backbone.js'][323]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][326]++;
  unset = options.unset;
  _$jscoverage['js/lib/backbone.js'][327]++;
  silent = options.silent;
  _$jscoverage['js/lib/backbone.js'][328]++;
  changes = [];
  _$jscoverage['js/lib/backbone.js'][329]++;
  changing = this._changing;
  _$jscoverage['js/lib/backbone.js'][330]++;
  this._changing = true;
  _$jscoverage['js/lib/backbone.js'][332]++;
  if ((! changing)) {
    _$jscoverage['js/lib/backbone.js'][333]++;
    this._previousAttributes = _.clone(this.attributes);
    _$jscoverage['js/lib/backbone.js'][334]++;
    this.changed = {};
  }
  _$jscoverage['js/lib/backbone.js'][336]++;
  ((current = this.attributes), (prev = this._previousAttributes));
  _$jscoverage['js/lib/backbone.js'][339]++;
  if ((this.idAttribute in attrs)) {
    _$jscoverage['js/lib/backbone.js'][339]++;
    this.id = attrs[this.idAttribute];
  }
  _$jscoverage['js/lib/backbone.js'][342]++;
  for (attr in attrs) {
    _$jscoverage['js/lib/backbone.js'][343]++;
    val = attrs[attr];
    _$jscoverage['js/lib/backbone.js'][344]++;
    if ((! _.isEqual(current[attr], val))) {
      _$jscoverage['js/lib/backbone.js'][344]++;
      changes.push(attr);
    }
    _$jscoverage['js/lib/backbone.js'][345]++;
    if ((! _.isEqual(prev[attr], val))) {
      _$jscoverage['js/lib/backbone.js'][346]++;
      this.changed[attr] = val;
    }
    else {
      _$jscoverage['js/lib/backbone.js'][348]++;
      (delete this.changed[attr]);
    }
    _$jscoverage['js/lib/backbone.js'][350]++;
    (unset? (delete current[attr]): (current[attr] = val));
}
  _$jscoverage['js/lib/backbone.js'][354]++;
  if ((! silent)) {
    _$jscoverage['js/lib/backbone.js'][355]++;
    if (changes.length) {
      _$jscoverage['js/lib/backbone.js'][355]++;
      this._pending = options;
    }
    _$jscoverage['js/lib/backbone.js'][356]++;
    for (var i = 0, l = changes.length; (i < l); (i++)) {
      _$jscoverage['js/lib/backbone.js'][357]++;
      this.trigger(("change:" + changes[i]), this, current[changes[i]], options);
}
  }
  _$jscoverage['js/lib/backbone.js'][363]++;
  if (changing) {
    _$jscoverage['js/lib/backbone.js'][363]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][364]++;
  if ((! silent)) {
    _$jscoverage['js/lib/backbone.js'][365]++;
    while (this._pending) {
      _$jscoverage['js/lib/backbone.js'][366]++;
      options = this._pending;
      _$jscoverage['js/lib/backbone.js'][367]++;
      this._pending = false;
      _$jscoverage['js/lib/backbone.js'][368]++;
      this.trigger("change", this, options);
}
  }
  _$jscoverage['js/lib/backbone.js'][371]++;
  this._pending = false;
  _$jscoverage['js/lib/backbone.js'][372]++;
  this._changing = false;
  _$jscoverage['js/lib/backbone.js'][373]++;
  return this;
}), unset: (function (attr, options) {
  _$jscoverage['js/lib/backbone.js'][379]++;
  return this.set(attr, (void 0), _.extend({}, options, {unset: true}));
}), clear: (function (options) {
  _$jscoverage['js/lib/backbone.js'][384]++;
  var attrs = {};
  _$jscoverage['js/lib/backbone.js'][385]++;
  for (var key in this.attributes) {
    _$jscoverage['js/lib/backbone.js'][385]++;
    attrs[key] = (void 0);
}
  _$jscoverage['js/lib/backbone.js'][386]++;
  return this.set(attrs, _.extend({}, options, {unset: true}));
}), hasChanged: (function (attr) {
  _$jscoverage['js/lib/backbone.js'][392]++;
  if ((attr == null)) {
    _$jscoverage['js/lib/backbone.js'][392]++;
    return (! _.isEmpty(this.changed));
  }
  _$jscoverage['js/lib/backbone.js'][393]++;
  return _.has(this.changed, attr);
}), changedAttributes: (function (diff) {
  _$jscoverage['js/lib/backbone.js'][403]++;
  if ((! diff)) {
    _$jscoverage['js/lib/backbone.js'][403]++;
    return (this.hasChanged()? _.clone(this.changed): false);
  }
  _$jscoverage['js/lib/backbone.js'][404]++;
  var val, changed = false;
  _$jscoverage['js/lib/backbone.js'][405]++;
  var old = (this._changing? this._previousAttributes: this.attributes);
  _$jscoverage['js/lib/backbone.js'][406]++;
  for (var attr in diff) {
    _$jscoverage['js/lib/backbone.js'][407]++;
    if (_.isEqual(old[attr], (val = diff[attr]))) {
      _$jscoverage['js/lib/backbone.js'][407]++;
      continue;
    }
    _$jscoverage['js/lib/backbone.js'][408]++;
    (changed || (changed = {}))[attr] = val;
}
  _$jscoverage['js/lib/backbone.js'][410]++;
  return changed;
}), previous: (function (attr) {
  _$jscoverage['js/lib/backbone.js'][416]++;
  if (((attr == null) || (! this._previousAttributes))) {
    _$jscoverage['js/lib/backbone.js'][416]++;
    return null;
  }
  _$jscoverage['js/lib/backbone.js'][417]++;
  return this._previousAttributes[attr];
}), previousAttributes: (function () {
  _$jscoverage['js/lib/backbone.js'][423]++;
  return _.clone(this._previousAttributes);
}), fetch: (function (options) {
  _$jscoverage['js/lib/backbone.js'][430]++;
  options = (options? _.clone(options): {});
  _$jscoverage['js/lib/backbone.js'][431]++;
  if ((options.parse === (void 0))) {
    _$jscoverage['js/lib/backbone.js'][431]++;
    options.parse = true;
  }
  _$jscoverage['js/lib/backbone.js'][432]++;
  var model = this;
  _$jscoverage['js/lib/backbone.js'][433]++;
  var success = options.success;
  _$jscoverage['js/lib/backbone.js'][434]++;
  options.success = (function (resp) {
  _$jscoverage['js/lib/backbone.js'][435]++;
  if ((! model.set(model.parse(resp, options), options))) {
    _$jscoverage['js/lib/backbone.js'][435]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][436]++;
  if (success) {
    _$jscoverage['js/lib/backbone.js'][436]++;
    success(model, resp, options);
  }
  _$jscoverage['js/lib/backbone.js'][437]++;
  model.trigger("sync", model, resp, options);
});
  _$jscoverage['js/lib/backbone.js'][439]++;
  wrapError(this, options);
  _$jscoverage['js/lib/backbone.js'][440]++;
  return this.sync("read", this, options);
}), save: (function (key, val, options) {
  _$jscoverage['js/lib/backbone.js'][447]++;
  var attrs, method, xhr, attributes = this.attributes;
  _$jscoverage['js/lib/backbone.js'][450]++;
  if (((key == null) || ((typeof key) === "object"))) {
    _$jscoverage['js/lib/backbone.js'][451]++;
    attrs = key;
    _$jscoverage['js/lib/backbone.js'][452]++;
    options = val;
  }
  else {
    _$jscoverage['js/lib/backbone.js'][454]++;
    (attrs = {})[key] = val;
  }
  _$jscoverage['js/lib/backbone.js'][457]++;
  options = _.extend({validate: true}, options);
  _$jscoverage['js/lib/backbone.js'][462]++;
  if ((attrs && (! options.wait))) {
    _$jscoverage['js/lib/backbone.js'][463]++;
    if ((! this.set(attrs, options))) {
      _$jscoverage['js/lib/backbone.js'][463]++;
      return false;
    }
  }
  else {
    _$jscoverage['js/lib/backbone.js'][465]++;
    if ((! this._validate(attrs, options))) {
      _$jscoverage['js/lib/backbone.js'][465]++;
      return false;
    }
  }
  _$jscoverage['js/lib/backbone.js'][469]++;
  if ((attrs && options.wait)) {
    _$jscoverage['js/lib/backbone.js'][470]++;
    this.attributes = _.extend({}, attributes, attrs);
  }
  _$jscoverage['js/lib/backbone.js'][475]++;
  if ((options.parse === (void 0))) {
    _$jscoverage['js/lib/backbone.js'][475]++;
    options.parse = true;
  }
  _$jscoverage['js/lib/backbone.js'][476]++;
  var model = this;
  _$jscoverage['js/lib/backbone.js'][477]++;
  var success = options.success;
  _$jscoverage['js/lib/backbone.js'][478]++;
  options.success = (function (resp) {
  _$jscoverage['js/lib/backbone.js'][480]++;
  model.attributes = attributes;
  _$jscoverage['js/lib/backbone.js'][481]++;
  var serverAttrs = model.parse(resp, options);
  _$jscoverage['js/lib/backbone.js'][482]++;
  if (options.wait) {
    _$jscoverage['js/lib/backbone.js'][482]++;
    serverAttrs = _.extend((attrs || {}), serverAttrs);
  }
  _$jscoverage['js/lib/backbone.js'][483]++;
  if ((_.isObject(serverAttrs) && (! model.set(serverAttrs, options)))) {
    _$jscoverage['js/lib/backbone.js'][484]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][486]++;
  if (success) {
    _$jscoverage['js/lib/backbone.js'][486]++;
    success(model, resp, options);
  }
  _$jscoverage['js/lib/backbone.js'][487]++;
  model.trigger("sync", model, resp, options);
});
  _$jscoverage['js/lib/backbone.js'][489]++;
  wrapError(this, options);
  _$jscoverage['js/lib/backbone.js'][491]++;
  method = (this.isNew()? "create": (options.patch? "patch": "update"));
  _$jscoverage['js/lib/backbone.js'][492]++;
  if ((method === "patch")) {
    _$jscoverage['js/lib/backbone.js'][492]++;
    options.attrs = attrs;
  }
  _$jscoverage['js/lib/backbone.js'][493]++;
  xhr = this.sync(method, this, options);
  _$jscoverage['js/lib/backbone.js'][496]++;
  if ((attrs && options.wait)) {
    _$jscoverage['js/lib/backbone.js'][496]++;
    this.attributes = attributes;
  }
  _$jscoverage['js/lib/backbone.js'][498]++;
  return xhr;
}), destroy: (function (options) {
  _$jscoverage['js/lib/backbone.js'][505]++;
  options = (options? _.clone(options): {});
  _$jscoverage['js/lib/backbone.js'][506]++;
  var model = this;
  _$jscoverage['js/lib/backbone.js'][507]++;
  var success = options.success;
  _$jscoverage['js/lib/backbone.js'][509]++;
  var destroy = (function () {
  _$jscoverage['js/lib/backbone.js'][510]++;
  model.trigger("destroy", model, model.collection, options);
});
  _$jscoverage['js/lib/backbone.js'][513]++;
  options.success = (function (resp) {
  _$jscoverage['js/lib/backbone.js'][514]++;
  if ((options.wait || model.isNew())) {
    _$jscoverage['js/lib/backbone.js'][514]++;
    destroy();
  }
  _$jscoverage['js/lib/backbone.js'][515]++;
  if (success) {
    _$jscoverage['js/lib/backbone.js'][515]++;
    success(model, resp, options);
  }
  _$jscoverage['js/lib/backbone.js'][516]++;
  if ((! model.isNew())) {
    _$jscoverage['js/lib/backbone.js'][516]++;
    model.trigger("sync", model, resp, options);
  }
});
  _$jscoverage['js/lib/backbone.js'][519]++;
  if (this.isNew()) {
    _$jscoverage['js/lib/backbone.js'][520]++;
    options.success();
    _$jscoverage['js/lib/backbone.js'][521]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][523]++;
  wrapError(this, options);
  _$jscoverage['js/lib/backbone.js'][525]++;
  var xhr = this.sync("delete", this, options);
  _$jscoverage['js/lib/backbone.js'][526]++;
  if ((! options.wait)) {
    _$jscoverage['js/lib/backbone.js'][526]++;
    destroy();
  }
  _$jscoverage['js/lib/backbone.js'][527]++;
  return xhr;
}), url: (function () {
  _$jscoverage['js/lib/backbone.js'][534]++;
  var base = (_.result(this, "urlRoot") || _.result(this.collection, "url") || urlError());
  _$jscoverage['js/lib/backbone.js'][538]++;
  if (this.isNew()) {
    _$jscoverage['js/lib/backbone.js'][538]++;
    return base;
  }
  _$jscoverage['js/lib/backbone.js'][539]++;
  return (base.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id));
}), parse: (function (resp, options) {
  _$jscoverage['js/lib/backbone.js'][545]++;
  return resp;
}), clone: (function () {
  _$jscoverage['js/lib/backbone.js'][550]++;
  return new (this.constructor)(this.attributes);
}), isNew: (function () {
  _$jscoverage['js/lib/backbone.js'][555]++;
  return (! this.has(this.idAttribute));
}), isValid: (function (options) {
  _$jscoverage['js/lib/backbone.js'][560]++;
  return this._validate({}, _.extend((options || {}), {validate: true}));
}), _validate: (function (attrs, options) {
  _$jscoverage['js/lib/backbone.js'][566]++;
  if (((! options.validate) || (! this.validate))) {
    _$jscoverage['js/lib/backbone.js'][566]++;
    return true;
  }
  _$jscoverage['js/lib/backbone.js'][567]++;
  attrs = _.extend({}, this.attributes, attrs);
  _$jscoverage['js/lib/backbone.js'][568]++;
  var error = (this.validationError = (this.validate(attrs, options) || null));
  _$jscoverage['js/lib/backbone.js'][569]++;
  if ((! error)) {
    _$jscoverage['js/lib/backbone.js'][569]++;
    return true;
  }
  _$jscoverage['js/lib/backbone.js'][570]++;
  this.trigger("invalid", this, error, _.extend(options, {validationError: error}));
  _$jscoverage['js/lib/backbone.js'][571]++;
  return false;
})});
  _$jscoverage['js/lib/backbone.js'][577]++;
  var modelMethods = ["keys", "values", "pairs", "invert", "pick", "omit"];
  _$jscoverage['js/lib/backbone.js'][580]++;
  _.each(modelMethods, (function (method) {
  _$jscoverage['js/lib/backbone.js'][581]++;
  Model.prototype[method] = (function () {
  _$jscoverage['js/lib/backbone.js'][582]++;
  var args = slice.call(arguments);
  _$jscoverage['js/lib/backbone.js'][583]++;
  args.unshift(this.attributes);
  _$jscoverage['js/lib/backbone.js'][584]++;
  return _[method].apply(_, args);
});
}));
  _$jscoverage['js/lib/backbone.js'][601]++;
  var Collection = (Backbone.Collection = (function (models, options) {
  _$jscoverage['js/lib/backbone.js'][602]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][603]++;
  if (options.model) {
    _$jscoverage['js/lib/backbone.js'][603]++;
    this.model = options.model;
  }
  _$jscoverage['js/lib/backbone.js'][604]++;
  if ((options.comparator !== (void 0))) {
    _$jscoverage['js/lib/backbone.js'][604]++;
    this.comparator = options.comparator;
  }
  _$jscoverage['js/lib/backbone.js'][605]++;
  this._reset();
  _$jscoverage['js/lib/backbone.js'][606]++;
  this.initialize.apply(this, arguments);
  _$jscoverage['js/lib/backbone.js'][607]++;
  if (models) {
    _$jscoverage['js/lib/backbone.js'][607]++;
    this.reset(models, _.extend({silent: true}, options));
  }
}));
  _$jscoverage['js/lib/backbone.js'][611]++;
  var setOptions = {add: true, remove: true, merge: true};
  _$jscoverage['js/lib/backbone.js'][612]++;
  var addOptions = {add: true, remove: false};
  _$jscoverage['js/lib/backbone.js'][615]++;
  _.extend(Collection.prototype, Events, {model: Model, initialize: (function () {
}), toJSON: (function (options) {
  _$jscoverage['js/lib/backbone.js'][628]++;
  return this.map((function (model) {
  _$jscoverage['js/lib/backbone.js'][628]++;
  return model.toJSON(options);
}));
}), sync: (function () {
  _$jscoverage['js/lib/backbone.js'][633]++;
  return Backbone.sync.apply(this, arguments);
}), add: (function (models, options) {
  _$jscoverage['js/lib/backbone.js'][638]++;
  return this.set(models, _.extend({merge: false}, options, addOptions));
}), remove: (function (models, options) {
  _$jscoverage['js/lib/backbone.js'][643]++;
  var singular = (! _.isArray(models));
  _$jscoverage['js/lib/backbone.js'][644]++;
  models = (singular? [models]: _.clone(models));
  _$jscoverage['js/lib/backbone.js'][645]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][646]++;
  var i, l, index, model;
  _$jscoverage['js/lib/backbone.js'][647]++;
  for (((i = 0), (l = models.length)); (i < l); (i++)) {
    _$jscoverage['js/lib/backbone.js'][648]++;
    model = (models[i] = this.get(models[i]));
    _$jscoverage['js/lib/backbone.js'][649]++;
    if ((! model)) {
      _$jscoverage['js/lib/backbone.js'][649]++;
      continue;
    }
    _$jscoverage['js/lib/backbone.js'][650]++;
    (delete this._byId[model.id]);
    _$jscoverage['js/lib/backbone.js'][651]++;
    (delete this._byId[model.cid]);
    _$jscoverage['js/lib/backbone.js'][652]++;
    index = this.indexOf(model);
    _$jscoverage['js/lib/backbone.js'][653]++;
    this.models.splice(index, 1);
    _$jscoverage['js/lib/backbone.js'][654]++;
    (this.length--);
    _$jscoverage['js/lib/backbone.js'][655]++;
    if ((! options.silent)) {
      _$jscoverage['js/lib/backbone.js'][656]++;
      options.index = index;
      _$jscoverage['js/lib/backbone.js'][657]++;
      model.trigger("remove", model, this, options);
    }
    _$jscoverage['js/lib/backbone.js'][659]++;
    this._removeReference(model, options);
}
  _$jscoverage['js/lib/backbone.js'][661]++;
  return (singular? models[0]: models);
}), set: (function (models, options) {
  _$jscoverage['js/lib/backbone.js'][669]++;
  options = _.defaults({}, options, setOptions);
  _$jscoverage['js/lib/backbone.js'][670]++;
  if (options.parse) {
    _$jscoverage['js/lib/backbone.js'][670]++;
    models = this.parse(models, options);
  }
  _$jscoverage['js/lib/backbone.js'][671]++;
  var singular = (! _.isArray(models));
  _$jscoverage['js/lib/backbone.js'][672]++;
  models = (singular? (models? [models]: []): _.clone(models));
  _$jscoverage['js/lib/backbone.js'][673]++;
  var i, l, id, model, attrs, existing, sort;
  _$jscoverage['js/lib/backbone.js'][674]++;
  var at = options.at;
  _$jscoverage['js/lib/backbone.js'][675]++;
  var targetModel = this.model;
  _$jscoverage['js/lib/backbone.js'][676]++;
  var sortable = (this.comparator && (at == null) && (options.sort !== false));
  _$jscoverage['js/lib/backbone.js'][677]++;
  var sortAttr = (_.isString(this.comparator)? this.comparator: null);
  _$jscoverage['js/lib/backbone.js'][678]++;
  var toAdd = [], toRemove = [], modelMap = {};
  _$jscoverage['js/lib/backbone.js'][679]++;
  var add = options.add, merge = options.merge, remove = options.remove;
  _$jscoverage['js/lib/backbone.js'][680]++;
  var order = (((! sortable) && add && remove)? []: false);
  _$jscoverage['js/lib/backbone.js'][684]++;
  for (((i = 0), (l = models.length)); (i < l); (i++)) {
    _$jscoverage['js/lib/backbone.js'][685]++;
    attrs = (models[i] || {});
    _$jscoverage['js/lib/backbone.js'][686]++;
    if ((attrs instanceof Model)) {
      _$jscoverage['js/lib/backbone.js'][687]++;
      id = (model = attrs);
    }
    else {
      _$jscoverage['js/lib/backbone.js'][689]++;
      id = attrs[(targetModel.prototype.idAttribute || "id")];
    }
    _$jscoverage['js/lib/backbone.js'][694]++;
    if ((existing = this.get(id))) {
      _$jscoverage['js/lib/backbone.js'][695]++;
      if (remove) {
        _$jscoverage['js/lib/backbone.js'][695]++;
        modelMap[existing.cid] = true;
      }
      _$jscoverage['js/lib/backbone.js'][696]++;
      if (merge) {
        _$jscoverage['js/lib/backbone.js'][697]++;
        attrs = ((attrs === model)? model.attributes: attrs);
        _$jscoverage['js/lib/backbone.js'][698]++;
        if (options.parse) {
          _$jscoverage['js/lib/backbone.js'][698]++;
          attrs = existing.parse(attrs, options);
        }
        _$jscoverage['js/lib/backbone.js'][699]++;
        existing.set(attrs, options);
        _$jscoverage['js/lib/backbone.js'][700]++;
        if ((sortable && (! sort) && existing.hasChanged(sortAttr))) {
          _$jscoverage['js/lib/backbone.js'][700]++;
          sort = true;
        }
      }
      _$jscoverage['js/lib/backbone.js'][702]++;
      models[i] = existing;
    }
    else {
      _$jscoverage['js/lib/backbone.js'][705]++;
      if (add) {
        _$jscoverage['js/lib/backbone.js'][706]++;
        model = (models[i] = this._prepareModel(attrs, options));
        _$jscoverage['js/lib/backbone.js'][707]++;
        if ((! model)) {
          _$jscoverage['js/lib/backbone.js'][707]++;
          continue;
        }
        _$jscoverage['js/lib/backbone.js'][708]++;
        toAdd.push(model);
        _$jscoverage['js/lib/backbone.js'][709]++;
        this._addReference(model, options);
      }
    }
    _$jscoverage['js/lib/backbone.js'][713]++;
    model = (existing || model);
    _$jscoverage['js/lib/backbone.js'][714]++;
    if ((order && (model.isNew() || (! modelMap[model.id])))) {
      _$jscoverage['js/lib/backbone.js'][714]++;
      order.push(model);
    }
    _$jscoverage['js/lib/backbone.js'][715]++;
    modelMap[model.id] = true;
}
  _$jscoverage['js/lib/backbone.js'][719]++;
  if (remove) {
    _$jscoverage['js/lib/backbone.js'][720]++;
    for (((i = 0), (l = this.length)); (i < l); (++i)) {
      _$jscoverage['js/lib/backbone.js'][721]++;
      if ((! modelMap[(model = this.models[i]).cid])) {
        _$jscoverage['js/lib/backbone.js'][721]++;
        toRemove.push(model);
      }
}
    _$jscoverage['js/lib/backbone.js'][723]++;
    if (toRemove.length) {
      _$jscoverage['js/lib/backbone.js'][723]++;
      this.remove(toRemove, options);
    }
  }
  _$jscoverage['js/lib/backbone.js'][727]++;
  if ((toAdd.length || (order && order.length))) {
    _$jscoverage['js/lib/backbone.js'][728]++;
    if (sortable) {
      _$jscoverage['js/lib/backbone.js'][728]++;
      sort = true;
    }
    _$jscoverage['js/lib/backbone.js'][729]++;
    this.length += toAdd.length;
    _$jscoverage['js/lib/backbone.js'][730]++;
    if ((at != null)) {
      _$jscoverage['js/lib/backbone.js'][731]++;
      for (((i = 0), (l = toAdd.length)); (i < l); (i++)) {
        _$jscoverage['js/lib/backbone.js'][732]++;
        this.models.splice((at + i), 0, toAdd[i]);
}
    }
    else {
      _$jscoverage['js/lib/backbone.js'][735]++;
      if (order) {
        _$jscoverage['js/lib/backbone.js'][735]++;
        this.models.length = 0;
      }
      _$jscoverage['js/lib/backbone.js'][736]++;
      var orderedModels = (order || toAdd);
      _$jscoverage['js/lib/backbone.js'][737]++;
      for (((i = 0), (l = orderedModels.length)); (i < l); (i++)) {
        _$jscoverage['js/lib/backbone.js'][738]++;
        this.models.push(orderedModels[i]);
}
    }
  }
  _$jscoverage['js/lib/backbone.js'][744]++;
  if (sort) {
    _$jscoverage['js/lib/backbone.js'][744]++;
    this.sort({silent: true});
  }
  _$jscoverage['js/lib/backbone.js'][747]++;
  if ((! options.silent)) {
    _$jscoverage['js/lib/backbone.js'][748]++;
    for (((i = 0), (l = toAdd.length)); (i < l); (i++)) {
      _$jscoverage['js/lib/backbone.js'][749]++;
      (model = toAdd[i]).trigger("add", model, this, options);
}
    _$jscoverage['js/lib/backbone.js'][751]++;
    if ((sort || (order && order.length))) {
      _$jscoverage['js/lib/backbone.js'][751]++;
      this.trigger("sort", this, options);
    }
  }
  _$jscoverage['js/lib/backbone.js'][755]++;
  return (singular? models[0]: models);
}), reset: (function (models, options) {
  _$jscoverage['js/lib/backbone.js'][763]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][764]++;
  for (var i = 0, l = this.models.length; (i < l); (i++)) {
    _$jscoverage['js/lib/backbone.js'][765]++;
    this._removeReference(this.models[i], options);
}
  _$jscoverage['js/lib/backbone.js'][767]++;
  options.previousModels = this.models;
  _$jscoverage['js/lib/backbone.js'][768]++;
  this._reset();
  _$jscoverage['js/lib/backbone.js'][769]++;
  models = this.add(models, _.extend({silent: true}, options));
  _$jscoverage['js/lib/backbone.js'][770]++;
  if ((! options.silent)) {
    _$jscoverage['js/lib/backbone.js'][770]++;
    this.trigger("reset", this, options);
  }
  _$jscoverage['js/lib/backbone.js'][771]++;
  return models;
}), push: (function (model, options) {
  _$jscoverage['js/lib/backbone.js'][776]++;
  return this.add(model, _.extend({at: this.length}, options));
}), pop: (function (options) {
  _$jscoverage['js/lib/backbone.js'][781]++;
  var model = this.at((this.length - 1));
  _$jscoverage['js/lib/backbone.js'][782]++;
  this.remove(model, options);
  _$jscoverage['js/lib/backbone.js'][783]++;
  return model;
}), unshift: (function (model, options) {
  _$jscoverage['js/lib/backbone.js'][788]++;
  return this.add(model, _.extend({at: 0}, options));
}), shift: (function (options) {
  _$jscoverage['js/lib/backbone.js'][793]++;
  var model = this.at(0);
  _$jscoverage['js/lib/backbone.js'][794]++;
  this.remove(model, options);
  _$jscoverage['js/lib/backbone.js'][795]++;
  return model;
}), slice: (function () {
  _$jscoverage['js/lib/backbone.js'][800]++;
  return slice.apply(this.models, arguments);
}), get: (function (obj) {
  _$jscoverage['js/lib/backbone.js'][805]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/backbone.js'][805]++;
    return (void 0);
  }
  _$jscoverage['js/lib/backbone.js'][806]++;
  return (this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid]);
}), at: (function (index) {
  _$jscoverage['js/lib/backbone.js'][811]++;
  return this.models[index];
}), where: (function (attrs, first) {
  _$jscoverage['js/lib/backbone.js'][817]++;
  if (_.isEmpty(attrs)) {
    _$jscoverage['js/lib/backbone.js'][817]++;
    return (first? (void 0): []);
  }
  _$jscoverage['js/lib/backbone.js'][818]++;
  return (this[(first? "find": "filter")])((function (model) {
  _$jscoverage['js/lib/backbone.js'][819]++;
  for (var key in attrs) {
    _$jscoverage['js/lib/backbone.js'][820]++;
    if ((attrs[key] !== model.get(key))) {
      _$jscoverage['js/lib/backbone.js'][820]++;
      return false;
    }
}
  _$jscoverage['js/lib/backbone.js'][822]++;
  return true;
}));
}), findWhere: (function (attrs) {
  _$jscoverage['js/lib/backbone.js'][829]++;
  return this.where(attrs, true);
}), sort: (function (options) {
  _$jscoverage['js/lib/backbone.js'][836]++;
  if ((! this.comparator)) {
    _$jscoverage['js/lib/backbone.js'][836]++;
    throw new Error("Cannot sort a set without a comparator");
  }
  _$jscoverage['js/lib/backbone.js'][837]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][840]++;
  if ((_.isString(this.comparator) || (this.comparator.length === 1))) {
    _$jscoverage['js/lib/backbone.js'][841]++;
    this.models = this.sortBy(this.comparator, this);
  }
  else {
    _$jscoverage['js/lib/backbone.js'][843]++;
    this.models.sort(_.bind(this.comparator, this));
  }
  _$jscoverage['js/lib/backbone.js'][846]++;
  if ((! options.silent)) {
    _$jscoverage['js/lib/backbone.js'][846]++;
    this.trigger("sort", this, options);
  }
  _$jscoverage['js/lib/backbone.js'][847]++;
  return this;
}), pluck: (function (attr) {
  _$jscoverage['js/lib/backbone.js'][852]++;
  return _.invoke(this.models, "get", attr);
}), fetch: (function (options) {
  _$jscoverage['js/lib/backbone.js'][859]++;
  options = (options? _.clone(options): {});
  _$jscoverage['js/lib/backbone.js'][860]++;
  if ((options.parse === (void 0))) {
    _$jscoverage['js/lib/backbone.js'][860]++;
    options.parse = true;
  }
  _$jscoverage['js/lib/backbone.js'][861]++;
  var success = options.success;
  _$jscoverage['js/lib/backbone.js'][862]++;
  var collection = this;
  _$jscoverage['js/lib/backbone.js'][863]++;
  options.success = (function (resp) {
  _$jscoverage['js/lib/backbone.js'][864]++;
  var method = (options.reset? "reset": "set");
  _$jscoverage['js/lib/backbone.js'][865]++;
  (collection[method])(resp, options);
  _$jscoverage['js/lib/backbone.js'][866]++;
  if (success) {
    _$jscoverage['js/lib/backbone.js'][866]++;
    success(collection, resp, options);
  }
  _$jscoverage['js/lib/backbone.js'][867]++;
  collection.trigger("sync", collection, resp, options);
});
  _$jscoverage['js/lib/backbone.js'][869]++;
  wrapError(this, options);
  _$jscoverage['js/lib/backbone.js'][870]++;
  return this.sync("read", this, options);
}), create: (function (model, options) {
  _$jscoverage['js/lib/backbone.js'][877]++;
  options = (options? _.clone(options): {});
  _$jscoverage['js/lib/backbone.js'][878]++;
  if ((! (model = this._prepareModel(model, options)))) {
    _$jscoverage['js/lib/backbone.js'][878]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][879]++;
  if ((! options.wait)) {
    _$jscoverage['js/lib/backbone.js'][879]++;
    this.add(model, options);
  }
  _$jscoverage['js/lib/backbone.js'][880]++;
  var collection = this;
  _$jscoverage['js/lib/backbone.js'][881]++;
  var success = options.success;
  _$jscoverage['js/lib/backbone.js'][882]++;
  options.success = (function (model, resp) {
  _$jscoverage['js/lib/backbone.js'][883]++;
  if (options.wait) {
    _$jscoverage['js/lib/backbone.js'][883]++;
    collection.add(model, options);
  }
  _$jscoverage['js/lib/backbone.js'][884]++;
  if (success) {
    _$jscoverage['js/lib/backbone.js'][884]++;
    success(model, resp, options);
  }
});
  _$jscoverage['js/lib/backbone.js'][886]++;
  model.save(null, options);
  _$jscoverage['js/lib/backbone.js'][887]++;
  return model;
}), parse: (function (resp, options) {
  _$jscoverage['js/lib/backbone.js'][893]++;
  return resp;
}), clone: (function () {
  _$jscoverage['js/lib/backbone.js'][898]++;
  return new (this.constructor)(this.models);
}), _reset: (function () {
  _$jscoverage['js/lib/backbone.js'][904]++;
  this.length = 0;
  _$jscoverage['js/lib/backbone.js'][905]++;
  this.models = [];
  _$jscoverage['js/lib/backbone.js'][906]++;
  this._byId = {};
}), _prepareModel: (function (attrs, options) {
  _$jscoverage['js/lib/backbone.js'][912]++;
  if ((attrs instanceof Model)) {
    _$jscoverage['js/lib/backbone.js'][912]++;
    return attrs;
  }
  _$jscoverage['js/lib/backbone.js'][913]++;
  options = (options? _.clone(options): {});
  _$jscoverage['js/lib/backbone.js'][914]++;
  options.collection = this;
  _$jscoverage['js/lib/backbone.js'][915]++;
  var model = new (this.model)(attrs, options);
  _$jscoverage['js/lib/backbone.js'][916]++;
  if ((! model.validationError)) {
    _$jscoverage['js/lib/backbone.js'][916]++;
    return model;
  }
  _$jscoverage['js/lib/backbone.js'][917]++;
  this.trigger("invalid", this, model.validationError, options);
  _$jscoverage['js/lib/backbone.js'][918]++;
  return false;
}), _addReference: (function (model, options) {
  _$jscoverage['js/lib/backbone.js'][923]++;
  this._byId[model.cid] = model;
  _$jscoverage['js/lib/backbone.js'][924]++;
  if ((model.id != null)) {
    _$jscoverage['js/lib/backbone.js'][924]++;
    this._byId[model.id] = model;
  }
  _$jscoverage['js/lib/backbone.js'][925]++;
  if ((! model.collection)) {
    _$jscoverage['js/lib/backbone.js'][925]++;
    model.collection = this;
  }
  _$jscoverage['js/lib/backbone.js'][926]++;
  model.on("all", this._onModelEvent, this);
}), _removeReference: (function (model, options) {
  _$jscoverage['js/lib/backbone.js'][931]++;
  if ((this === model.collection)) {
    _$jscoverage['js/lib/backbone.js'][931]++;
    (delete model.collection);
  }
  _$jscoverage['js/lib/backbone.js'][932]++;
  model.off("all", this._onModelEvent, this);
}), _onModelEvent: (function (event, model, collection, options) {
  _$jscoverage['js/lib/backbone.js'][940]++;
  if ((((event === "add") || (event === "remove")) && (collection !== this))) {
    _$jscoverage['js/lib/backbone.js'][940]++;
    return;
  }
  _$jscoverage['js/lib/backbone.js'][941]++;
  if ((event === "destroy")) {
    _$jscoverage['js/lib/backbone.js'][941]++;
    this.remove(model, options);
  }
  _$jscoverage['js/lib/backbone.js'][942]++;
  if ((model && (event === ("change:" + model.idAttribute)))) {
    _$jscoverage['js/lib/backbone.js'][943]++;
    (delete this._byId[model.previous(model.idAttribute)]);
    _$jscoverage['js/lib/backbone.js'][944]++;
    if ((model.id != null)) {
      _$jscoverage['js/lib/backbone.js'][944]++;
      this._byId[model.id] = model;
    }
  }
  _$jscoverage['js/lib/backbone.js'][946]++;
  this.trigger.apply(this, arguments);
})});
  _$jscoverage['js/lib/backbone.js'][954]++;
  var methods = ["forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample"];
  _$jscoverage['js/lib/backbone.js'][962]++;
  _.each(methods, (function (method) {
  _$jscoverage['js/lib/backbone.js'][963]++;
  Collection.prototype[method] = (function () {
  _$jscoverage['js/lib/backbone.js'][964]++;
  var args = slice.call(arguments);
  _$jscoverage['js/lib/backbone.js'][965]++;
  args.unshift(this.models);
  _$jscoverage['js/lib/backbone.js'][966]++;
  return _[method].apply(_, args);
});
}));
  _$jscoverage['js/lib/backbone.js'][971]++;
  var attributeMethods = ["groupBy", "countBy", "sortBy", "indexBy"];
  _$jscoverage['js/lib/backbone.js'][974]++;
  _.each(attributeMethods, (function (method) {
  _$jscoverage['js/lib/backbone.js'][975]++;
  Collection.prototype[method] = (function (value, context) {
  _$jscoverage['js/lib/backbone.js'][976]++;
  var iterator = (_.isFunction(value)? value: (function (model) {
  _$jscoverage['js/lib/backbone.js'][977]++;
  return model.get(value);
}));
  _$jscoverage['js/lib/backbone.js'][979]++;
  return (_[method])(this.models, iterator, context);
});
}));
  _$jscoverage['js/lib/backbone.js'][996]++;
  var View = (Backbone.View = (function (options) {
  _$jscoverage['js/lib/backbone.js'][997]++;
  this.cid = _.uniqueId("view");
  _$jscoverage['js/lib/backbone.js'][998]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][999]++;
  _.extend(this, _.pick(options, viewOptions));
  _$jscoverage['js/lib/backbone.js'][1000]++;
  this._ensureElement();
  _$jscoverage['js/lib/backbone.js'][1001]++;
  this.initialize.apply(this, arguments);
  _$jscoverage['js/lib/backbone.js'][1002]++;
  this.delegateEvents();
}));
  _$jscoverage['js/lib/backbone.js'][1006]++;
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;
  _$jscoverage['js/lib/backbone.js'][1009]++;
  var viewOptions = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
  _$jscoverage['js/lib/backbone.js'][1012]++;
  _.extend(View.prototype, Events, {tagName: "div", $: (function (selector) {
  _$jscoverage['js/lib/backbone.js'][1020]++;
  return this.$el.find(selector);
}), initialize: (function () {
}), render: (function () {
  _$jscoverage['js/lib/backbone.js'][1031]++;
  return this;
}), remove: (function () {
  _$jscoverage['js/lib/backbone.js'][1037]++;
  this.$el.remove();
  _$jscoverage['js/lib/backbone.js'][1038]++;
  this.stopListening();
  _$jscoverage['js/lib/backbone.js'][1039]++;
  return this;
}), setElement: (function (element, delegate) {
  _$jscoverage['js/lib/backbone.js'][1045]++;
  if (this.$el) {
    _$jscoverage['js/lib/backbone.js'][1045]++;
    this.undelegateEvents();
  }
  _$jscoverage['js/lib/backbone.js'][1046]++;
  this.$el = ((element instanceof Backbone.$)? element: Backbone.$(element));
  _$jscoverage['js/lib/backbone.js'][1047]++;
  this.el = this.$el[0];
  _$jscoverage['js/lib/backbone.js'][1048]++;
  if ((delegate !== false)) {
    _$jscoverage['js/lib/backbone.js'][1048]++;
    this.delegateEvents();
  }
  _$jscoverage['js/lib/backbone.js'][1049]++;
  return this;
}), delegateEvents: (function (events) {
  _$jscoverage['js/lib/backbone.js'][1068]++;
  if ((! (events || (events = _.result(this, "events"))))) {
    _$jscoverage['js/lib/backbone.js'][1068]++;
    return this;
  }
  _$jscoverage['js/lib/backbone.js'][1069]++;
  this.undelegateEvents();
  _$jscoverage['js/lib/backbone.js'][1070]++;
  for (var key in events) {
    _$jscoverage['js/lib/backbone.js'][1071]++;
    var method = events[key];
    _$jscoverage['js/lib/backbone.js'][1072]++;
    if ((! _.isFunction(method))) {
      _$jscoverage['js/lib/backbone.js'][1072]++;
      method = this[events[key]];
    }
    _$jscoverage['js/lib/backbone.js'][1073]++;
    if ((! method)) {
      _$jscoverage['js/lib/backbone.js'][1073]++;
      continue;
    }
    _$jscoverage['js/lib/backbone.js'][1075]++;
    var match = key.match(delegateEventSplitter);
    _$jscoverage['js/lib/backbone.js'][1076]++;
    var eventName = match[1], selector = match[2];
    _$jscoverage['js/lib/backbone.js'][1077]++;
    method = _.bind(method, this);
    _$jscoverage['js/lib/backbone.js'][1078]++;
    eventName += (".delegateEvents" + this.cid);
    _$jscoverage['js/lib/backbone.js'][1079]++;
    if ((selector === "")) {
      _$jscoverage['js/lib/backbone.js'][1080]++;
      this.$el.on(eventName, method);
    }
    else {
      _$jscoverage['js/lib/backbone.js'][1082]++;
      this.$el.on(eventName, selector, method);
    }
}
  _$jscoverage['js/lib/backbone.js'][1085]++;
  return this;
}), undelegateEvents: (function () {
  _$jscoverage['js/lib/backbone.js'][1092]++;
  this.$el.off((".delegateEvents" + this.cid));
  _$jscoverage['js/lib/backbone.js'][1093]++;
  return this;
}), _ensureElement: (function () {
  _$jscoverage['js/lib/backbone.js'][1101]++;
  if ((! this.el)) {
    _$jscoverage['js/lib/backbone.js'][1102]++;
    var attrs = _.extend({}, _.result(this, "attributes"));
    _$jscoverage['js/lib/backbone.js'][1103]++;
    if (this.id) {
      _$jscoverage['js/lib/backbone.js'][1103]++;
      attrs.id = _.result(this, "id");
    }
    _$jscoverage['js/lib/backbone.js'][1104]++;
    if (this.className) {
      _$jscoverage['js/lib/backbone.js'][1104]++;
      attrs["class"] = _.result(this, "className");
    }
    _$jscoverage['js/lib/backbone.js'][1105]++;
    var $el = Backbone.$(("<" + _.result(this, "tagName") + ">")).attr(attrs);
    _$jscoverage['js/lib/backbone.js'][1106]++;
    this.setElement($el, false);
  }
  else {
    _$jscoverage['js/lib/backbone.js'][1108]++;
    this.setElement(_.result(this, "el"), false);
  }
})});
  _$jscoverage['js/lib/backbone.js'][1132]++;
  Backbone.sync = (function (method, model, options) {
  _$jscoverage['js/lib/backbone.js'][1133]++;
  var type = methodMap[method];
  _$jscoverage['js/lib/backbone.js'][1136]++;
  _.defaults((options || (options = {})), {emulateHTTP: Backbone.emulateHTTP, emulateJSON: Backbone.emulateJSON});
  _$jscoverage['js/lib/backbone.js'][1142]++;
  var params = {type: type, dataType: "json"};
  _$jscoverage['js/lib/backbone.js'][1145]++;
  if ((! options.url)) {
    _$jscoverage['js/lib/backbone.js'][1146]++;
    params.url = (_.result(model, "url") || urlError());
  }
  _$jscoverage['js/lib/backbone.js'][1150]++;
  if (((options.data == null) && model && ((method === "create") || (method === "update") || (method === "patch")))) {
    _$jscoverage['js/lib/backbone.js'][1151]++;
    params.contentType = "application/json";
    _$jscoverage['js/lib/backbone.js'][1152]++;
    params.data = JSON.stringify((options.attrs || model.toJSON(options)));
  }
  _$jscoverage['js/lib/backbone.js'][1156]++;
  if (options.emulateJSON) {
    _$jscoverage['js/lib/backbone.js'][1157]++;
    params.contentType = "application/x-www-form-urlencoded";
    _$jscoverage['js/lib/backbone.js'][1158]++;
    params.data = (params.data? {model: params.data}: {});
  }
  _$jscoverage['js/lib/backbone.js'][1163]++;
  if ((options.emulateHTTP && ((type === "PUT") || (type === "DELETE") || (type === "PATCH")))) {
    _$jscoverage['js/lib/backbone.js'][1164]++;
    params.type = "POST";
    _$jscoverage['js/lib/backbone.js'][1165]++;
    if (options.emulateJSON) {
      _$jscoverage['js/lib/backbone.js'][1165]++;
      params.data._method = type;
    }
    _$jscoverage['js/lib/backbone.js'][1166]++;
    var beforeSend = options.beforeSend;
    _$jscoverage['js/lib/backbone.js'][1167]++;
    options.beforeSend = (function (xhr) {
  _$jscoverage['js/lib/backbone.js'][1168]++;
  xhr.setRequestHeader("X-HTTP-Method-Override", type);
  _$jscoverage['js/lib/backbone.js'][1169]++;
  if (beforeSend) {
    _$jscoverage['js/lib/backbone.js'][1169]++;
    return beforeSend.apply(this, arguments);
  }
});
  }
  _$jscoverage['js/lib/backbone.js'][1174]++;
  if (((params.type !== "GET") && (! options.emulateJSON))) {
    _$jscoverage['js/lib/backbone.js'][1175]++;
    params.processData = false;
  }
  _$jscoverage['js/lib/backbone.js'][1181]++;
  if (((params.type === "PATCH") && noXhrPatch)) {
    _$jscoverage['js/lib/backbone.js'][1182]++;
    params.xhr = (function () {
  _$jscoverage['js/lib/backbone.js'][1183]++;
  return new ActiveXObject("Microsoft.XMLHTTP");
});
  }
  _$jscoverage['js/lib/backbone.js'][1188]++;
  var xhr = (options.xhr = Backbone.ajax(_.extend(params, options)));
  _$jscoverage['js/lib/backbone.js'][1189]++;
  model.trigger("request", model, xhr, options);
  _$jscoverage['js/lib/backbone.js'][1190]++;
  return xhr;
});
  _$jscoverage['js/lib/backbone.js'][1193]++;
  var noXhrPatch = (((typeof window) !== "undefined") && (! (! window.ActiveXObject)) && (! (window.XMLHttpRequest && new XMLHttpRequest().dispatchEvent)));
  _$jscoverage['js/lib/backbone.js'][1198]++;
  var methodMap = {"create": "POST", "update": "PUT", "patch": "PATCH", "delete": "DELETE", "read": "GET"};
  _$jscoverage['js/lib/backbone.js'][1208]++;
  Backbone.ajax = (function () {
  _$jscoverage['js/lib/backbone.js'][1209]++;
  return Backbone.$.ajax.apply(Backbone.$, arguments);
});
  _$jscoverage['js/lib/backbone.js'][1217]++;
  var Router = (Backbone.Router = (function (options) {
  _$jscoverage['js/lib/backbone.js'][1218]++;
  (options || (options = {}));
  _$jscoverage['js/lib/backbone.js'][1219]++;
  if (options.routes) {
    _$jscoverage['js/lib/backbone.js'][1219]++;
    this.routes = options.routes;
  }
  _$jscoverage['js/lib/backbone.js'][1220]++;
  this._bindRoutes();
  _$jscoverage['js/lib/backbone.js'][1221]++;
  this.initialize.apply(this, arguments);
}));
  _$jscoverage['js/lib/backbone.js'][1226]++;
  var optionalParam = /\((.*?)\)/g;
  _$jscoverage['js/lib/backbone.js'][1227]++;
  var namedParam = /(\(\?)?:\w+/g;
  _$jscoverage['js/lib/backbone.js'][1228]++;
  var splatParam = /\*\w+/g;
  _$jscoverage['js/lib/backbone.js'][1229]++;
  var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
  _$jscoverage['js/lib/backbone.js'][1232]++;
  _.extend(Router.prototype, Events, {initialize: (function () {
}), route: (function (route, name, callback) {
  _$jscoverage['js/lib/backbone.js'][1245]++;
  if ((! _.isRegExp(route))) {
    _$jscoverage['js/lib/backbone.js'][1245]++;
    route = this._routeToRegExp(route);
  }
  _$jscoverage['js/lib/backbone.js'][1246]++;
  if (_.isFunction(name)) {
    _$jscoverage['js/lib/backbone.js'][1247]++;
    callback = name;
    _$jscoverage['js/lib/backbone.js'][1248]++;
    name = "";
  }
  _$jscoverage['js/lib/backbone.js'][1250]++;
  if ((! callback)) {
    _$jscoverage['js/lib/backbone.js'][1250]++;
    callback = this[name];
  }
  _$jscoverage['js/lib/backbone.js'][1251]++;
  var router = this;
  _$jscoverage['js/lib/backbone.js'][1252]++;
  Backbone.history.route(route, (function (fragment) {
  _$jscoverage['js/lib/backbone.js'][1253]++;
  var args = router._extractParameters(route, fragment);
  _$jscoverage['js/lib/backbone.js'][1254]++;
  router.execute(callback, args);
  _$jscoverage['js/lib/backbone.js'][1255]++;
  router.trigger.apply(router, [("route:" + name)].concat(args));
  _$jscoverage['js/lib/backbone.js'][1256]++;
  router.trigger("route", name, args);
  _$jscoverage['js/lib/backbone.js'][1257]++;
  Backbone.history.trigger("route", router, name, args);
}));
  _$jscoverage['js/lib/backbone.js'][1259]++;
  return this;
}), execute: (function (callback, args) {
  _$jscoverage['js/lib/backbone.js'][1265]++;
  if (callback) {
    _$jscoverage['js/lib/backbone.js'][1265]++;
    callback.apply(this, args);
  }
}), navigate: (function (fragment, options) {
  _$jscoverage['js/lib/backbone.js'][1270]++;
  Backbone.history.navigate(fragment, options);
  _$jscoverage['js/lib/backbone.js'][1271]++;
  return this;
}), _bindRoutes: (function () {
  _$jscoverage['js/lib/backbone.js'][1278]++;
  if ((! this.routes)) {
    _$jscoverage['js/lib/backbone.js'][1278]++;
    return;
  }
  _$jscoverage['js/lib/backbone.js'][1279]++;
  this.routes = _.result(this, "routes");
  _$jscoverage['js/lib/backbone.js'][1280]++;
  var route, routes = _.keys(this.routes);
  _$jscoverage['js/lib/backbone.js'][1281]++;
  while (((route = routes.pop()) != null)) {
    _$jscoverage['js/lib/backbone.js'][1282]++;
    this.route(route, this.routes[route]);
}
}), _routeToRegExp: (function (route) {
  _$jscoverage['js/lib/backbone.js'][1289]++;
  route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, (function (match, optional) {
  _$jscoverage['js/lib/backbone.js'][1292]++;
  return (optional? match: "([^/?]+)");
})).replace(splatParam, "([^?]*?)");
  _$jscoverage['js/lib/backbone.js'][1295]++;
  return new RegExp(("^" + route + "(?:\\?([\\s\\S]*))?$"));
}), _extractParameters: (function (route, fragment) {
  _$jscoverage['js/lib/backbone.js'][1302]++;
  var params = route.exec(fragment).slice(1);
  _$jscoverage['js/lib/backbone.js'][1303]++;
  return _.map(params, (function (param, i) {
  _$jscoverage['js/lib/backbone.js'][1305]++;
  if ((i === (params.length - 1))) {
    _$jscoverage['js/lib/backbone.js'][1305]++;
    return (param || null);
  }
  _$jscoverage['js/lib/backbone.js'][1306]++;
  return (param? decodeURIComponent(param): null);
}));
})});
  _$jscoverage['js/lib/backbone.js'][1320]++;
  var History = (Backbone.History = (function () {
  _$jscoverage['js/lib/backbone.js'][1321]++;
  this.handlers = [];
  _$jscoverage['js/lib/backbone.js'][1322]++;
  _.bindAll(this, "checkUrl");
  _$jscoverage['js/lib/backbone.js'][1325]++;
  if (((typeof window) !== "undefined")) {
    _$jscoverage['js/lib/backbone.js'][1326]++;
    this.location = window.location;
    _$jscoverage['js/lib/backbone.js'][1327]++;
    this.history = window.history;
  }
}));
  _$jscoverage['js/lib/backbone.js'][1332]++;
  var routeStripper = /^[#\/]|\s+$/g;
  _$jscoverage['js/lib/backbone.js'][1335]++;
  var rootStripper = /^\/+|\/+$/g;
  _$jscoverage['js/lib/backbone.js'][1338]++;
  var isExplorer = /msie [\w.]+/;
  _$jscoverage['js/lib/backbone.js'][1341]++;
  var trailingSlash = /\/$/;
  _$jscoverage['js/lib/backbone.js'][1344]++;
  var pathStripper = /#.*$/;
  _$jscoverage['js/lib/backbone.js'][1347]++;
  History.started = false;
  _$jscoverage['js/lib/backbone.js'][1350]++;
  _.extend(History.prototype, Events, {interval: 50, atRoot: (function () {
  _$jscoverage['js/lib/backbone.js'][1358]++;
  return (this.location.pathname.replace(/[^\/]$/, "$&/") === this.root);
}), getHash: (function (window) {
  _$jscoverage['js/lib/backbone.js'][1364]++;
  var match = (window || this).location.href.match(/#(.*)$/);
  _$jscoverage['js/lib/backbone.js'][1365]++;
  return (match? match[1]: "");
}), getFragment: (function (fragment, forcePushState) {
  _$jscoverage['js/lib/backbone.js'][1371]++;
  if ((fragment == null)) {
    _$jscoverage['js/lib/backbone.js'][1372]++;
    if ((this._hasPushState || (! this._wantsHashChange) || forcePushState)) {
      _$jscoverage['js/lib/backbone.js'][1373]++;
      fragment = decodeURI((this.location.pathname + this.location.search));
      _$jscoverage['js/lib/backbone.js'][1374]++;
      var root = this.root.replace(trailingSlash, "");
      _$jscoverage['js/lib/backbone.js'][1375]++;
      if ((! fragment.indexOf(root))) {
        _$jscoverage['js/lib/backbone.js'][1375]++;
        fragment = fragment.slice(root.length);
      }
    }
    else {
      _$jscoverage['js/lib/backbone.js'][1377]++;
      fragment = this.getHash();
    }
  }
  _$jscoverage['js/lib/backbone.js'][1380]++;
  return fragment.replace(routeStripper, "");
}), start: (function (options) {
  _$jscoverage['js/lib/backbone.js'][1386]++;
  if (History.started) {
    _$jscoverage['js/lib/backbone.js'][1386]++;
    throw new Error("Backbone.history has already been started");
  }
  _$jscoverage['js/lib/backbone.js'][1387]++;
  History.started = true;
  _$jscoverage['js/lib/backbone.js'][1391]++;
  this.options = _.extend({root: "/"}, this.options, options);
  _$jscoverage['js/lib/backbone.js'][1392]++;
  this.root = this.options.root;
  _$jscoverage['js/lib/backbone.js'][1393]++;
  this._wantsHashChange = (this.options.hashChange !== false);
  _$jscoverage['js/lib/backbone.js'][1394]++;
  this._wantsPushState = (! (! this.options.pushState));
  _$jscoverage['js/lib/backbone.js'][1395]++;
  this._hasPushState = (! (! (this.options.pushState && this.history && this.history.pushState)));
  _$jscoverage['js/lib/backbone.js'][1396]++;
  var fragment = this.getFragment();
  _$jscoverage['js/lib/backbone.js'][1397]++;
  var docMode = document.documentMode;
  _$jscoverage['js/lib/backbone.js'][1398]++;
  var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && ((! docMode) || (docMode <= 7)));
  _$jscoverage['js/lib/backbone.js'][1401]++;
  this.root = ("/" + this.root + "/").replace(rootStripper, "/");
  _$jscoverage['js/lib/backbone.js'][1403]++;
  if ((oldIE && this._wantsHashChange)) {
    _$jscoverage['js/lib/backbone.js'][1404]++;
    var frame = Backbone.$("<iframe src=\"javascript:0\" tabindex=\"-1\">");
    _$jscoverage['js/lib/backbone.js'][1405]++;
    this.iframe = frame.hide().appendTo("body")[0].contentWindow;
    _$jscoverage['js/lib/backbone.js'][1406]++;
    this.navigate(fragment);
  }
  _$jscoverage['js/lib/backbone.js'][1411]++;
  if (this._hasPushState) {
    _$jscoverage['js/lib/backbone.js'][1412]++;
    Backbone.$(window).on("popstate", this.checkUrl);
  }
  else {
    _$jscoverage['js/lib/backbone.js'][1413]++;
    if ((this._wantsHashChange && ("onhashchange" in window) && (! oldIE))) {
      _$jscoverage['js/lib/backbone.js'][1414]++;
      Backbone.$(window).on("hashchange", this.checkUrl);
    }
    else {
      _$jscoverage['js/lib/backbone.js'][1415]++;
      if (this._wantsHashChange) {
        _$jscoverage['js/lib/backbone.js'][1416]++;
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }
    }
  }
  _$jscoverage['js/lib/backbone.js'][1421]++;
  this.fragment = fragment;
  _$jscoverage['js/lib/backbone.js'][1422]++;
  var loc = this.location;
  _$jscoverage['js/lib/backbone.js'][1426]++;
  if ((this._wantsHashChange && this._wantsPushState)) {
    _$jscoverage['js/lib/backbone.js'][1430]++;
    if (((! this._hasPushState) && (! this.atRoot()))) {
      _$jscoverage['js/lib/backbone.js'][1431]++;
      this.fragment = this.getFragment(null, true);
      _$jscoverage['js/lib/backbone.js'][1432]++;
      this.location.replace((this.root + "#" + this.fragment));
      _$jscoverage['js/lib/backbone.js'][1434]++;
      return true;
    }
    else {
      _$jscoverage['js/lib/backbone.js'][1438]++;
      if ((this._hasPushState && this.atRoot() && loc.hash)) {
        _$jscoverage['js/lib/backbone.js'][1439]++;
        this.fragment = this.getHash().replace(routeStripper, "");
        _$jscoverage['js/lib/backbone.js'][1440]++;
        this.history.replaceState({}, document.title, (this.root + this.fragment));
      }
    }
  }
  _$jscoverage['js/lib/backbone.js'][1445]++;
  if ((! this.options.silent)) {
    _$jscoverage['js/lib/backbone.js'][1445]++;
    return this.loadUrl();
  }
}), stop: (function () {
  _$jscoverage['js/lib/backbone.js'][1451]++;
  Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
  _$jscoverage['js/lib/backbone.js'][1452]++;
  if (this._checkUrlInterval) {
    _$jscoverage['js/lib/backbone.js'][1452]++;
    clearInterval(this._checkUrlInterval);
  }
  _$jscoverage['js/lib/backbone.js'][1453]++;
  History.started = false;
}), route: (function (route, callback) {
  _$jscoverage['js/lib/backbone.js'][1459]++;
  this.handlers.unshift({route: route, callback: callback});
}), checkUrl: (function (e) {
  _$jscoverage['js/lib/backbone.js'][1465]++;
  var current = this.getFragment();
  _$jscoverage['js/lib/backbone.js'][1466]++;
  if (((current === this.fragment) && this.iframe)) {
    _$jscoverage['js/lib/backbone.js'][1467]++;
    current = this.getFragment(this.getHash(this.iframe));
  }
  _$jscoverage['js/lib/backbone.js'][1469]++;
  if ((current === this.fragment)) {
    _$jscoverage['js/lib/backbone.js'][1469]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][1470]++;
  if (this.iframe) {
    _$jscoverage['js/lib/backbone.js'][1470]++;
    this.navigate(current);
  }
  _$jscoverage['js/lib/backbone.js'][1471]++;
  this.loadUrl();
}), loadUrl: (function (fragment) {
  _$jscoverage['js/lib/backbone.js'][1478]++;
  fragment = (this.fragment = this.getFragment(fragment));
  _$jscoverage['js/lib/backbone.js'][1479]++;
  return _.any(this.handlers, (function (handler) {
  _$jscoverage['js/lib/backbone.js'][1480]++;
  if (handler.route.test(fragment)) {
    _$jscoverage['js/lib/backbone.js'][1481]++;
    handler.callback(fragment);
    _$jscoverage['js/lib/backbone.js'][1482]++;
    return true;
  }
}));
}), navigate: (function (fragment, options) {
  _$jscoverage['js/lib/backbone.js'][1495]++;
  if ((! History.started)) {
    _$jscoverage['js/lib/backbone.js'][1495]++;
    return false;
  }
  _$jscoverage['js/lib/backbone.js'][1496]++;
  if (((! options) || (options === true))) {
    _$jscoverage['js/lib/backbone.js'][1496]++;
    options = {trigger: (! (! options))};
  }
  _$jscoverage['js/lib/backbone.js'][1498]++;
  var url = (this.root + (fragment = this.getFragment((fragment || ""))));
  _$jscoverage['js/lib/backbone.js'][1501]++;
  fragment = fragment.replace(pathStripper, "");
  _$jscoverage['js/lib/backbone.js'][1503]++;
  if ((this.fragment === fragment)) {
    _$jscoverage['js/lib/backbone.js'][1503]++;
    return;
  }
  _$jscoverage['js/lib/backbone.js'][1504]++;
  this.fragment = fragment;
  _$jscoverage['js/lib/backbone.js'][1507]++;
  if (((fragment === "") && (url !== "/"))) {
    _$jscoverage['js/lib/backbone.js'][1507]++;
    url = url.slice(0, -1);
  }
  _$jscoverage['js/lib/backbone.js'][1510]++;
  if (this._hasPushState) {
    _$jscoverage['js/lib/backbone.js'][1511]++;
    (this.history[(options.replace? "replaceState": "pushState")])({}, document.title, url);
  }
  else {
    _$jscoverage['js/lib/backbone.js'][1515]++;
    if (this._wantsHashChange) {
      _$jscoverage['js/lib/backbone.js'][1516]++;
      this._updateHash(this.location, fragment, options.replace);
      _$jscoverage['js/lib/backbone.js'][1517]++;
      if ((this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe))))) {
        _$jscoverage['js/lib/backbone.js'][1521]++;
        if ((! options.replace)) {
          _$jscoverage['js/lib/backbone.js'][1521]++;
          this.iframe.document.open().close();
        }
        _$jscoverage['js/lib/backbone.js'][1522]++;
        this._updateHash(this.iframe.location, fragment, options.replace);
      }
    }
    else {
      _$jscoverage['js/lib/backbone.js'][1528]++;
      return this.location.assign(url);
    }
  }
  _$jscoverage['js/lib/backbone.js'][1530]++;
  if (options.trigger) {
    _$jscoverage['js/lib/backbone.js'][1530]++;
    return this.loadUrl(fragment);
  }
}), _updateHash: (function (location, fragment, replace) {
  _$jscoverage['js/lib/backbone.js'][1536]++;
  if (replace) {
    _$jscoverage['js/lib/backbone.js'][1537]++;
    var href = location.href.replace(/(javascript:|#).*$/, "");
    _$jscoverage['js/lib/backbone.js'][1538]++;
    location.replace((href + "#" + fragment));
  }
  else {
    _$jscoverage['js/lib/backbone.js'][1541]++;
    location.hash = ("#" + fragment);
  }
})});
  _$jscoverage['js/lib/backbone.js'][1548]++;
  Backbone.history = new History();
  _$jscoverage['js/lib/backbone.js'][1556]++;
  var extend = (function (protoProps, staticProps) {
  _$jscoverage['js/lib/backbone.js'][1557]++;
  var parent = this;
  _$jscoverage['js/lib/backbone.js'][1558]++;
  var child;
  _$jscoverage['js/lib/backbone.js'][1563]++;
  if ((protoProps && _.has(protoProps, "constructor"))) {
    _$jscoverage['js/lib/backbone.js'][1564]++;
    child = protoProps.constructor;
  }
  else {
    _$jscoverage['js/lib/backbone.js'][1566]++;
    child = (function () {
  _$jscoverage['js/lib/backbone.js'][1566]++;
  return parent.apply(this, arguments);
});
  }
  _$jscoverage['js/lib/backbone.js'][1570]++;
  _.extend(child, parent, staticProps);
  _$jscoverage['js/lib/backbone.js'][1574]++;
  var Surrogate = (function () {
  _$jscoverage['js/lib/backbone.js'][1574]++;
  this.constructor = child;
});
  _$jscoverage['js/lib/backbone.js'][1575]++;
  Surrogate.prototype = parent.prototype;
  _$jscoverage['js/lib/backbone.js'][1576]++;
  child.prototype = new Surrogate();
  _$jscoverage['js/lib/backbone.js'][1580]++;
  if (protoProps) {
    _$jscoverage['js/lib/backbone.js'][1580]++;
    _.extend(child.prototype, protoProps);
  }
  _$jscoverage['js/lib/backbone.js'][1584]++;
  child.__super__ = parent.prototype;
  _$jscoverage['js/lib/backbone.js'][1586]++;
  return child;
});
  _$jscoverage['js/lib/backbone.js'][1590]++;
  Model.extend = (Collection.extend = (Router.extend = (View.extend = (History.extend = extend))));
  _$jscoverage['js/lib/backbone.js'][1593]++;
  var urlError = (function () {
  _$jscoverage['js/lib/backbone.js'][1594]++;
  throw new Error("A \"url\" property or function must be specified");
});
  _$jscoverage['js/lib/backbone.js'][1598]++;
  var wrapError = (function (model, options) {
  _$jscoverage['js/lib/backbone.js'][1599]++;
  var error = options.error;
  _$jscoverage['js/lib/backbone.js'][1600]++;
  options.error = (function (resp) {
  _$jscoverage['js/lib/backbone.js'][1601]++;
  if (error) {
    _$jscoverage['js/lib/backbone.js'][1601]++;
    error(model, resp, options);
  }
  _$jscoverage['js/lib/backbone.js'][1602]++;
  model.trigger("error", model, resp, options);
});
});
  _$jscoverage['js/lib/backbone.js'][1606]++;
  return Backbone;
}));
