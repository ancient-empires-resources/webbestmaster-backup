/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
}
if (! _$jscoverage['js/lib/underscore.js']) {
  _$jscoverage['js/lib/underscore.js'] = [];
  _$jscoverage['js/lib/underscore.js'][6] = 0;
  _$jscoverage['js/lib/underscore.js'][12] = 0;
  _$jscoverage['js/lib/underscore.js'][15] = 0;
  _$jscoverage['js/lib/underscore.js'][18] = 0;
  _$jscoverage['js/lib/underscore.js'][21] = 0;
  _$jscoverage['js/lib/underscore.js'][24] = 0;
  _$jscoverage['js/lib/underscore.js'][33] = 0;
  _$jscoverage['js/lib/underscore.js'][48] = 0;
  _$jscoverage['js/lib/underscore.js'][49] = 0;
  _$jscoverage['js/lib/underscore.js'][50] = 0;
  _$jscoverage['js/lib/underscore.js'][51] = 0;
  _$jscoverage['js/lib/underscore.js'][58] = 0;
  _$jscoverage['js/lib/underscore.js'][59] = 0;
  _$jscoverage['js/lib/underscore.js'][60] = 0;
  _$jscoverage['js/lib/underscore.js'][62] = 0;
  _$jscoverage['js/lib/underscore.js'][64] = 0;
  _$jscoverage['js/lib/underscore.js'][68] = 0;
  _$jscoverage['js/lib/underscore.js'][76] = 0;
  _$jscoverage['js/lib/underscore.js'][77] = 0;
  _$jscoverage['js/lib/underscore.js'][78] = 0;
  _$jscoverage['js/lib/underscore.js'][79] = 0;
  _$jscoverage['js/lib/underscore.js'][80] = 0;
  _$jscoverage['js/lib/underscore.js'][81] = 0;
  _$jscoverage['js/lib/underscore.js'][82] = 0;
  _$jscoverage['js/lib/underscore.js'][85] = 0;
  _$jscoverage['js/lib/underscore.js'][86] = 0;
  _$jscoverage['js/lib/underscore.js'][87] = 0;
  _$jscoverage['js/lib/underscore.js'][90] = 0;
  _$jscoverage['js/lib/underscore.js'][95] = 0;
  _$jscoverage['js/lib/underscore.js'][96] = 0;
  _$jscoverage['js/lib/underscore.js'][97] = 0;
  _$jscoverage['js/lib/underscore.js'][98] = 0;
  _$jscoverage['js/lib/underscore.js'][99] = 0;
  _$jscoverage['js/lib/underscore.js'][100] = 0;
  _$jscoverage['js/lib/underscore.js'][102] = 0;
  _$jscoverage['js/lib/underscore.js'][105] = 0;
  _$jscoverage['js/lib/underscore.js'][109] = 0;
  _$jscoverage['js/lib/underscore.js'][110] = 0;
  _$jscoverage['js/lib/underscore.js'][111] = 0;
  _$jscoverage['js/lib/underscore.js'][112] = 0;
  _$jscoverage['js/lib/underscore.js'][113] = 0;
  _$jscoverage['js/lib/underscore.js'][114] = 0;
  _$jscoverage['js/lib/underscore.js'][116] = 0;
  _$jscoverage['js/lib/underscore.js'][117] = 0;
  _$jscoverage['js/lib/underscore.js'][118] = 0;
  _$jscoverage['js/lib/underscore.js'][119] = 0;
  _$jscoverage['js/lib/underscore.js'][121] = 0;
  _$jscoverage['js/lib/underscore.js'][124] = 0;
  _$jscoverage['js/lib/underscore.js'][125] = 0;
  _$jscoverage['js/lib/underscore.js'][130] = 0;
  _$jscoverage['js/lib/underscore.js'][131] = 0;
  _$jscoverage['js/lib/underscore.js'][132] = 0;
  _$jscoverage['js/lib/underscore.js'][133] = 0;
  _$jscoverage['js/lib/underscore.js'][134] = 0;
  _$jscoverage['js/lib/underscore.js'][135] = 0;
  _$jscoverage['js/lib/underscore.js'][137] = 0;
  _$jscoverage['js/lib/underscore.js'][138] = 0;
  _$jscoverage['js/lib/underscore.js'][139] = 0;
  _$jscoverage['js/lib/underscore.js'][140] = 0;
  _$jscoverage['js/lib/underscore.js'][142] = 0;
  _$jscoverage['js/lib/underscore.js'][143] = 0;
  _$jscoverage['js/lib/underscore.js'][144] = 0;
  _$jscoverage['js/lib/underscore.js'][145] = 0;
  _$jscoverage['js/lib/underscore.js'][146] = 0;
  _$jscoverage['js/lib/underscore.js'][148] = 0;
  _$jscoverage['js/lib/underscore.js'][151] = 0;
  _$jscoverage['js/lib/underscore.js'][152] = 0;
  _$jscoverage['js/lib/underscore.js'][156] = 0;
  _$jscoverage['js/lib/underscore.js'][157] = 0;
  _$jscoverage['js/lib/underscore.js'][158] = 0;
  _$jscoverage['js/lib/underscore.js'][159] = 0;
  _$jscoverage['js/lib/underscore.js'][160] = 0;
  _$jscoverage['js/lib/underscore.js'][161] = 0;
  _$jscoverage['js/lib/underscore.js'][164] = 0;
  _$jscoverage['js/lib/underscore.js'][170] = 0;
  _$jscoverage['js/lib/underscore.js'][171] = 0;
  _$jscoverage['js/lib/underscore.js'][172] = 0;
  _$jscoverage['js/lib/underscore.js'][173] = 0;
  _$jscoverage['js/lib/underscore.js'][174] = 0;
  _$jscoverage['js/lib/underscore.js'][175] = 0;
  _$jscoverage['js/lib/underscore.js'][177] = 0;
  _$jscoverage['js/lib/underscore.js'][181] = 0;
  _$jscoverage['js/lib/underscore.js'][182] = 0;
  _$jscoverage['js/lib/underscore.js'][183] = 0;
  _$jscoverage['js/lib/underscore.js'][190] = 0;
  _$jscoverage['js/lib/underscore.js'][191] = 0;
  _$jscoverage['js/lib/underscore.js'][192] = 0;
  _$jscoverage['js/lib/underscore.js'][193] = 0;
  _$jscoverage['js/lib/underscore.js'][194] = 0;
  _$jscoverage['js/lib/underscore.js'][195] = 0;
  _$jscoverage['js/lib/underscore.js'][196] = 0;
  _$jscoverage['js/lib/underscore.js'][198] = 0;
  _$jscoverage['js/lib/underscore.js'][204] = 0;
  _$jscoverage['js/lib/underscore.js'][205] = 0;
  _$jscoverage['js/lib/underscore.js'][206] = 0;
  _$jscoverage['js/lib/underscore.js'][207] = 0;
  _$jscoverage['js/lib/underscore.js'][208] = 0;
  _$jscoverage['js/lib/underscore.js'][209] = 0;
  _$jscoverage['js/lib/underscore.js'][210] = 0;
  _$jscoverage['js/lib/underscore.js'][212] = 0;
  _$jscoverage['js/lib/underscore.js'][217] = 0;
  _$jscoverage['js/lib/underscore.js'][218] = 0;
  _$jscoverage['js/lib/underscore.js'][219] = 0;
  _$jscoverage['js/lib/underscore.js'][220] = 0;
  _$jscoverage['js/lib/underscore.js'][221] = 0;
  _$jscoverage['js/lib/underscore.js'][226] = 0;
  _$jscoverage['js/lib/underscore.js'][227] = 0;
  _$jscoverage['js/lib/underscore.js'][228] = 0;
  _$jscoverage['js/lib/underscore.js'][229] = 0;
  _$jscoverage['js/lib/underscore.js'][230] = 0;
  _$jscoverage['js/lib/underscore.js'][235] = 0;
  _$jscoverage['js/lib/underscore.js'][236] = 0;
  _$jscoverage['js/lib/underscore.js'][241] = 0;
  _$jscoverage['js/lib/underscore.js'][242] = 0;
  _$jscoverage['js/lib/underscore.js'][247] = 0;
  _$jscoverage['js/lib/underscore.js'][248] = 0;
  _$jscoverage['js/lib/underscore.js'][254] = 0;
  _$jscoverage['js/lib/underscore.js'][255] = 0;
  _$jscoverage['js/lib/underscore.js'][256] = 0;
  _$jscoverage['js/lib/underscore.js'][258] = 0;
  _$jscoverage['js/lib/underscore.js'][259] = 0;
  _$jscoverage['js/lib/underscore.js'][260] = 0;
  _$jscoverage['js/lib/underscore.js'][261] = 0;
  _$jscoverage['js/lib/underscore.js'][262] = 0;
  _$jscoverage['js/lib/underscore.js'][263] = 0;
  _$jscoverage['js/lib/underscore.js'][266] = 0;
  _$jscoverage['js/lib/underscore.js'][270] = 0;
  _$jscoverage['js/lib/underscore.js'][271] = 0;
  _$jscoverage['js/lib/underscore.js'][272] = 0;
  _$jscoverage['js/lib/underscore.js'][274] = 0;
  _$jscoverage['js/lib/underscore.js'][275] = 0;
  _$jscoverage['js/lib/underscore.js'][276] = 0;
  _$jscoverage['js/lib/underscore.js'][277] = 0;
  _$jscoverage['js/lib/underscore.js'][278] = 0;
  _$jscoverage['js/lib/underscore.js'][279] = 0;
  _$jscoverage['js/lib/underscore.js'][282] = 0;
  _$jscoverage['js/lib/underscore.js'][287] = 0;
  _$jscoverage['js/lib/underscore.js'][288] = 0;
  _$jscoverage['js/lib/underscore.js'][289] = 0;
  _$jscoverage['js/lib/underscore.js'][290] = 0;
  _$jscoverage['js/lib/underscore.js'][291] = 0;
  _$jscoverage['js/lib/underscore.js'][292] = 0;
  _$jscoverage['js/lib/underscore.js'][293] = 0;
  _$jscoverage['js/lib/underscore.js'][294] = 0;
  _$jscoverage['js/lib/underscore.js'][296] = 0;
  _$jscoverage['js/lib/underscore.js'][302] = 0;
  _$jscoverage['js/lib/underscore.js'][303] = 0;
  _$jscoverage['js/lib/underscore.js'][304] = 0;
  _$jscoverage['js/lib/underscore.js'][305] = 0;
  _$jscoverage['js/lib/underscore.js'][307] = 0;
  _$jscoverage['js/lib/underscore.js'][311] = 0;
  _$jscoverage['js/lib/underscore.js'][312] = 0;
  _$jscoverage['js/lib/underscore.js'][313] = 0;
  _$jscoverage['js/lib/underscore.js'][314] = 0;
  _$jscoverage['js/lib/underscore.js'][318] = 0;
  _$jscoverage['js/lib/underscore.js'][319] = 0;
  _$jscoverage['js/lib/underscore.js'][320] = 0;
  _$jscoverage['js/lib/underscore.js'][321] = 0;
  _$jscoverage['js/lib/underscore.js'][327] = 0;
  _$jscoverage['js/lib/underscore.js'][328] = 0;
  _$jscoverage['js/lib/underscore.js'][329] = 0;
  _$jscoverage['js/lib/underscore.js'][330] = 0;
  _$jscoverage['js/lib/underscore.js'][331] = 0;
  _$jscoverage['js/lib/underscore.js'][333] = 0;
  _$jscoverage['js/lib/underscore.js'][338] = 0;
  _$jscoverage['js/lib/underscore.js'][339] = 0;
  _$jscoverage['js/lib/underscore.js'][340] = 0;
  _$jscoverage['js/lib/underscore.js'][341] = 0;
  _$jscoverage['js/lib/underscore.js'][342] = 0;
  _$jscoverage['js/lib/underscore.js'][343] = 0;
  _$jscoverage['js/lib/underscore.js'][344] = 0;
  _$jscoverage['js/lib/underscore.js'][346] = 0;
  _$jscoverage['js/lib/underscore.js'][352] = 0;
  _$jscoverage['js/lib/underscore.js'][353] = 0;
  _$jscoverage['js/lib/underscore.js'][358] = 0;
  _$jscoverage['js/lib/underscore.js'][359] = 0;
  _$jscoverage['js/lib/underscore.js'][365] = 0;
  _$jscoverage['js/lib/underscore.js'][366] = 0;
  _$jscoverage['js/lib/underscore.js'][371] = 0;
  _$jscoverage['js/lib/underscore.js'][372] = 0;
  _$jscoverage['js/lib/underscore.js'][373] = 0;
  _$jscoverage['js/lib/underscore.js'][374] = 0;
  _$jscoverage['js/lib/underscore.js'][375] = 0;
  _$jscoverage['js/lib/underscore.js'][376] = 0;
  _$jscoverage['js/lib/underscore.js'][377] = 0;
  _$jscoverage['js/lib/underscore.js'][379] = 0;
  _$jscoverage['js/lib/underscore.js'][383] = 0;
  _$jscoverage['js/lib/underscore.js'][384] = 0;
  _$jscoverage['js/lib/underscore.js'][385] = 0;
  _$jscoverage['js/lib/underscore.js'][386] = 0;
  _$jscoverage['js/lib/underscore.js'][387] = 0;
  _$jscoverage['js/lib/underscore.js'][391] = 0;
  _$jscoverage['js/lib/underscore.js'][392] = 0;
  _$jscoverage['js/lib/underscore.js'][393] = 0;
  _$jscoverage['js/lib/underscore.js'][402] = 0;
  _$jscoverage['js/lib/underscore.js'][403] = 0;
  _$jscoverage['js/lib/underscore.js'][404] = 0;
  _$jscoverage['js/lib/underscore.js'][405] = 0;
  _$jscoverage['js/lib/underscore.js'][406] = 0;
  _$jscoverage['js/lib/underscore.js'][413] = 0;
  _$jscoverage['js/lib/underscore.js'][414] = 0;
  _$jscoverage['js/lib/underscore.js'][419] = 0;
  _$jscoverage['js/lib/underscore.js'][420] = 0;
  _$jscoverage['js/lib/underscore.js'][421] = 0;
  _$jscoverage['js/lib/underscore.js'][422] = 0;
  _$jscoverage['js/lib/underscore.js'][429] = 0;
  _$jscoverage['js/lib/underscore.js'][430] = 0;
  _$jscoverage['js/lib/underscore.js'][434] = 0;
  _$jscoverage['js/lib/underscore.js'][435] = 0;
  _$jscoverage['js/lib/underscore.js'][439] = 0;
  _$jscoverage['js/lib/underscore.js'][440] = 0;
  _$jscoverage['js/lib/underscore.js'][441] = 0;
  _$jscoverage['js/lib/underscore.js'][443] = 0;
  _$jscoverage['js/lib/underscore.js'][444] = 0;
  _$jscoverage['js/lib/underscore.js'][445] = 0;
  _$jscoverage['js/lib/underscore.js'][447] = 0;
  _$jscoverage['js/lib/underscore.js'][450] = 0;
  _$jscoverage['js/lib/underscore.js'][454] = 0;
  _$jscoverage['js/lib/underscore.js'][455] = 0;
  _$jscoverage['js/lib/underscore.js'][459] = 0;
  _$jscoverage['js/lib/underscore.js'][460] = 0;
  _$jscoverage['js/lib/underscore.js'][465] = 0;
  _$jscoverage['js/lib/underscore.js'][466] = 0;
  _$jscoverage['js/lib/underscore.js'][467] = 0;
  _$jscoverage['js/lib/underscore.js'][468] = 0;
  _$jscoverage['js/lib/underscore.js'][470] = 0;
  _$jscoverage['js/lib/underscore.js'][476] = 0;
  _$jscoverage['js/lib/underscore.js'][477] = 0;
  _$jscoverage['js/lib/underscore.js'][478] = 0;
  _$jscoverage['js/lib/underscore.js'][479] = 0;
  _$jscoverage['js/lib/underscore.js'][480] = 0;
  _$jscoverage['js/lib/underscore.js'][482] = 0;
  _$jscoverage['js/lib/underscore.js'][483] = 0;
  _$jscoverage['js/lib/underscore.js'][484] = 0;
  _$jscoverage['js/lib/underscore.js'][485] = 0;
  _$jscoverage['js/lib/underscore.js'][486] = 0;
  _$jscoverage['js/lib/underscore.js'][487] = 0;
  _$jscoverage['js/lib/underscore.js'][488] = 0;
  _$jscoverage['js/lib/underscore.js'][491] = 0;
  _$jscoverage['js/lib/underscore.js'][496] = 0;
  _$jscoverage['js/lib/underscore.js'][497] = 0;
  _$jscoverage['js/lib/underscore.js'][502] = 0;
  _$jscoverage['js/lib/underscore.js'][503] = 0;
  _$jscoverage['js/lib/underscore.js'][504] = 0;
  _$jscoverage['js/lib/underscore.js'][505] = 0;
  _$jscoverage['js/lib/underscore.js'][506] = 0;
  _$jscoverage['js/lib/underscore.js'][513] = 0;
  _$jscoverage['js/lib/underscore.js'][514] = 0;
  _$jscoverage['js/lib/underscore.js'][515] = 0;
  _$jscoverage['js/lib/underscore.js'][520] = 0;
  _$jscoverage['js/lib/underscore.js'][521] = 0;
  _$jscoverage['js/lib/underscore.js'][522] = 0;
  _$jscoverage['js/lib/underscore.js'][523] = 0;
  _$jscoverage['js/lib/underscore.js'][524] = 0;
  _$jscoverage['js/lib/underscore.js'][526] = 0;
  _$jscoverage['js/lib/underscore.js'][532] = 0;
  _$jscoverage['js/lib/underscore.js'][533] = 0;
  _$jscoverage['js/lib/underscore.js'][534] = 0;
  _$jscoverage['js/lib/underscore.js'][535] = 0;
  _$jscoverage['js/lib/underscore.js'][536] = 0;
  _$jscoverage['js/lib/underscore.js'][537] = 0;
  _$jscoverage['js/lib/underscore.js'][539] = 0;
  _$jscoverage['js/lib/underscore.js'][542] = 0;
  _$jscoverage['js/lib/underscore.js'][551] = 0;
  _$jscoverage['js/lib/underscore.js'][552] = 0;
  _$jscoverage['js/lib/underscore.js'][553] = 0;
  _$jscoverage['js/lib/underscore.js'][554] = 0;
  _$jscoverage['js/lib/underscore.js'][555] = 0;
  _$jscoverage['js/lib/underscore.js'][556] = 0;
  _$jscoverage['js/lib/underscore.js'][558] = 0;
  _$jscoverage['js/lib/underscore.js'][559] = 0;
  _$jscoverage['js/lib/underscore.js'][562] = 0;
  _$jscoverage['js/lib/underscore.js'][563] = 0;
  _$jscoverage['js/lib/underscore.js'][564] = 0;
  _$jscoverage['js/lib/underscore.js'][568] = 0;
  _$jscoverage['js/lib/underscore.js'][569] = 0;
  _$jscoverage['js/lib/underscore.js'][570] = 0;
  _$jscoverage['js/lib/underscore.js'][571] = 0;
  _$jscoverage['js/lib/underscore.js'][572] = 0;
  _$jscoverage['js/lib/underscore.js'][574] = 0;
  _$jscoverage['js/lib/underscore.js'][575] = 0;
  _$jscoverage['js/lib/underscore.js'][576] = 0;
  _$jscoverage['js/lib/underscore.js'][582] = 0;
  _$jscoverage['js/lib/underscore.js'][583] = 0;
  _$jscoverage['js/lib/underscore.js'][584] = 0;
  _$jscoverage['js/lib/underscore.js'][585] = 0;
  _$jscoverage['js/lib/underscore.js'][587] = 0;
  _$jscoverage['js/lib/underscore.js'][589] = 0;
  _$jscoverage['js/lib/underscore.js'][590] = 0;
  _$jscoverage['js/lib/underscore.js'][591] = 0;
  _$jscoverage['js/lib/underscore.js'][593] = 0;
  _$jscoverage['js/lib/underscore.js'][594] = 0;
  _$jscoverage['js/lib/underscore.js'][595] = 0;
  _$jscoverage['js/lib/underscore.js'][598] = 0;
  _$jscoverage['js/lib/underscore.js'][605] = 0;
  _$jscoverage['js/lib/underscore.js'][610] = 0;
  _$jscoverage['js/lib/underscore.js'][611] = 0;
  _$jscoverage['js/lib/underscore.js'][612] = 0;
  _$jscoverage['js/lib/underscore.js'][613] = 0;
  _$jscoverage['js/lib/underscore.js'][614] = 0;
  _$jscoverage['js/lib/underscore.js'][615] = 0;
  _$jscoverage['js/lib/underscore.js'][616] = 0;
  _$jscoverage['js/lib/underscore.js'][617] = 0;
  _$jscoverage['js/lib/underscore.js'][618] = 0;
  _$jscoverage['js/lib/underscore.js'][619] = 0;
  _$jscoverage['js/lib/underscore.js'][620] = 0;
  _$jscoverage['js/lib/underscore.js'][621] = 0;
  _$jscoverage['js/lib/underscore.js'][622] = 0;
  _$jscoverage['js/lib/underscore.js'][629] = 0;
  _$jscoverage['js/lib/underscore.js'][630] = 0;
  _$jscoverage['js/lib/underscore.js'][631] = 0;
  _$jscoverage['js/lib/underscore.js'][632] = 0;
  _$jscoverage['js/lib/underscore.js'][633] = 0;
  _$jscoverage['js/lib/underscore.js'][634] = 0;
  _$jscoverage['js/lib/underscore.js'][635] = 0;
  _$jscoverage['js/lib/underscore.js'][637] = 0;
  _$jscoverage['js/lib/underscore.js'][638] = 0;
  _$jscoverage['js/lib/underscore.js'][645] = 0;
  _$jscoverage['js/lib/underscore.js'][646] = 0;
  _$jscoverage['js/lib/underscore.js'][647] = 0;
  _$jscoverage['js/lib/underscore.js'][648] = 0;
  _$jscoverage['js/lib/underscore.js'][649] = 0;
  _$jscoverage['js/lib/underscore.js'][653] = 0;
  _$jscoverage['js/lib/underscore.js'][654] = 0;
  _$jscoverage['js/lib/underscore.js'][655] = 0;
  _$jscoverage['js/lib/underscore.js'][656] = 0;
  _$jscoverage['js/lib/underscore.js'][657] = 0;
  _$jscoverage['js/lib/underscore.js'][658] = 0;
  _$jscoverage['js/lib/underscore.js'][664] = 0;
  _$jscoverage['js/lib/underscore.js'][665] = 0;
  _$jscoverage['js/lib/underscore.js'][666] = 0;
  _$jscoverage['js/lib/underscore.js'][671] = 0;
  _$jscoverage['js/lib/underscore.js'][672] = 0;
  _$jscoverage['js/lib/underscore.js'][680] = 0;
  _$jscoverage['js/lib/underscore.js'][681] = 0;
  _$jscoverage['js/lib/underscore.js'][682] = 0;
  _$jscoverage['js/lib/underscore.js'][683] = 0;
  _$jscoverage['js/lib/underscore.js'][684] = 0;
  _$jscoverage['js/lib/underscore.js'][685] = 0;
  _$jscoverage['js/lib/underscore.js'][686] = 0;
  _$jscoverage['js/lib/underscore.js'][687] = 0;
  _$jscoverage['js/lib/underscore.js'][688] = 0;
  _$jscoverage['js/lib/underscore.js'][689] = 0;
  _$jscoverage['js/lib/underscore.js'][691] = 0;
  _$jscoverage['js/lib/underscore.js'][692] = 0;
  _$jscoverage['js/lib/underscore.js'][693] = 0;
  _$jscoverage['js/lib/underscore.js'][694] = 0;
  _$jscoverage['js/lib/underscore.js'][695] = 0;
  _$jscoverage['js/lib/underscore.js'][696] = 0;
  _$jscoverage['js/lib/underscore.js'][697] = 0;
  _$jscoverage['js/lib/underscore.js'][698] = 0;
  _$jscoverage['js/lib/underscore.js'][699] = 0;
  _$jscoverage['js/lib/underscore.js'][700] = 0;
  _$jscoverage['js/lib/underscore.js'][701] = 0;
  _$jscoverage['js/lib/underscore.js'][702] = 0;
  _$jscoverage['js/lib/underscore.js'][703] = 0;
  _$jscoverage['js/lib/underscore.js'][704] = 0;
  _$jscoverage['js/lib/underscore.js'][706] = 0;
  _$jscoverage['js/lib/underscore.js'][714] = 0;
  _$jscoverage['js/lib/underscore.js'][715] = 0;
  _$jscoverage['js/lib/underscore.js'][717] = 0;
  _$jscoverage['js/lib/underscore.js'][718] = 0;
  _$jscoverage['js/lib/underscore.js'][719] = 0;
  _$jscoverage['js/lib/underscore.js'][720] = 0;
  _$jscoverage['js/lib/underscore.js'][722] = 0;
  _$jscoverage['js/lib/underscore.js'][723] = 0;
  _$jscoverage['js/lib/underscore.js'][724] = 0;
  _$jscoverage['js/lib/underscore.js'][725] = 0;
  _$jscoverage['js/lib/underscore.js'][730] = 0;
  _$jscoverage['js/lib/underscore.js'][731] = 0;
  _$jscoverage['js/lib/underscore.js'][732] = 0;
  _$jscoverage['js/lib/underscore.js'][733] = 0;
  _$jscoverage['js/lib/underscore.js'][734] = 0;
  _$jscoverage['js/lib/underscore.js'][735] = 0;
  _$jscoverage['js/lib/underscore.js'][736] = 0;
  _$jscoverage['js/lib/underscore.js'][738] = 0;
  _$jscoverage['js/lib/underscore.js'][739] = 0;
  _$jscoverage['js/lib/underscore.js'][740] = 0;
  _$jscoverage['js/lib/underscore.js'][743] = 0;
  _$jscoverage['js/lib/underscore.js'][749] = 0;
  _$jscoverage['js/lib/underscore.js'][750] = 0;
  _$jscoverage['js/lib/underscore.js'][751] = 0;
  _$jscoverage['js/lib/underscore.js'][752] = 0;
  _$jscoverage['js/lib/underscore.js'][753] = 0;
  _$jscoverage['js/lib/underscore.js'][754] = 0;
  _$jscoverage['js/lib/underscore.js'][755] = 0;
  _$jscoverage['js/lib/underscore.js'][756] = 0;
  _$jscoverage['js/lib/underscore.js'][763] = 0;
  _$jscoverage['js/lib/underscore.js'][764] = 0;
  _$jscoverage['js/lib/underscore.js'][769] = 0;
  _$jscoverage['js/lib/underscore.js'][770] = 0;
  _$jscoverage['js/lib/underscore.js'][771] = 0;
  _$jscoverage['js/lib/underscore.js'][772] = 0;
  _$jscoverage['js/lib/underscore.js'][773] = 0;
  _$jscoverage['js/lib/underscore.js'][774] = 0;
  _$jscoverage['js/lib/underscore.js'][776] = 0;
  _$jscoverage['js/lib/underscore.js'][781] = 0;
  _$jscoverage['js/lib/underscore.js'][782] = 0;
  _$jscoverage['js/lib/underscore.js'][783] = 0;
  _$jscoverage['js/lib/underscore.js'][784] = 0;
  _$jscoverage['js/lib/underscore.js'][794] = 0;
  _$jscoverage['js/lib/underscore.js'][795] = 0;
  _$jscoverage['js/lib/underscore.js'][796] = 0;
  _$jscoverage['js/lib/underscore.js'][797] = 0;
  _$jscoverage['js/lib/underscore.js'][798] = 0;
  _$jscoverage['js/lib/underscore.js'][799] = 0;
  _$jscoverage['js/lib/underscore.js'][803] = 0;
  _$jscoverage['js/lib/underscore.js'][804] = 0;
  _$jscoverage['js/lib/underscore.js'][805] = 0;
  _$jscoverage['js/lib/underscore.js'][806] = 0;
  _$jscoverage['js/lib/underscore.js'][807] = 0;
  _$jscoverage['js/lib/underscore.js'][808] = 0;
  _$jscoverage['js/lib/underscore.js'][810] = 0;
  _$jscoverage['js/lib/underscore.js'][814] = 0;
  _$jscoverage['js/lib/underscore.js'][815] = 0;
  _$jscoverage['js/lib/underscore.js'][816] = 0;
  _$jscoverage['js/lib/underscore.js'][817] = 0;
  _$jscoverage['js/lib/underscore.js'][818] = 0;
  _$jscoverage['js/lib/underscore.js'][819] = 0;
  _$jscoverage['js/lib/underscore.js'][821] = 0;
  _$jscoverage['js/lib/underscore.js'][825] = 0;
  _$jscoverage['js/lib/underscore.js'][826] = 0;
  _$jscoverage['js/lib/underscore.js'][827] = 0;
  _$jscoverage['js/lib/underscore.js'][828] = 0;
  _$jscoverage['js/lib/underscore.js'][829] = 0;
  _$jscoverage['js/lib/underscore.js'][831] = 0;
  _$jscoverage['js/lib/underscore.js'][836] = 0;
  _$jscoverage['js/lib/underscore.js'][837] = 0;
  _$jscoverage['js/lib/underscore.js'][838] = 0;
  _$jscoverage['js/lib/underscore.js'][839] = 0;
  _$jscoverage['js/lib/underscore.js'][841] = 0;
  _$jscoverage['js/lib/underscore.js'][845] = 0;
  _$jscoverage['js/lib/underscore.js'][846] = 0;
  _$jscoverage['js/lib/underscore.js'][847] = 0;
  _$jscoverage['js/lib/underscore.js'][848] = 0;
  _$jscoverage['js/lib/underscore.js'][849] = 0;
  _$jscoverage['js/lib/underscore.js'][853] = 0;
  _$jscoverage['js/lib/underscore.js'][857] = 0;
  _$jscoverage['js/lib/underscore.js'][858] = 0;
  _$jscoverage['js/lib/underscore.js'][859] = 0;
  _$jscoverage['js/lib/underscore.js'][860] = 0;
  _$jscoverage['js/lib/underscore.js'][861] = 0;
  _$jscoverage['js/lib/underscore.js'][863] = 0;
  _$jscoverage['js/lib/underscore.js'][867] = 0;
  _$jscoverage['js/lib/underscore.js'][868] = 0;
  _$jscoverage['js/lib/underscore.js'][869] = 0;
  _$jscoverage['js/lib/underscore.js'][870] = 0;
  _$jscoverage['js/lib/underscore.js'][871] = 0;
  _$jscoverage['js/lib/underscore.js'][873] = 0;
  _$jscoverage['js/lib/underscore.js'][877] = 0;
  _$jscoverage['js/lib/underscore.js'][878] = 0;
  _$jscoverage['js/lib/underscore.js'][879] = 0;
  _$jscoverage['js/lib/underscore.js'][880] = 0;
  _$jscoverage['js/lib/underscore.js'][881] = 0;
  _$jscoverage['js/lib/underscore.js'][885] = 0;
  _$jscoverage['js/lib/underscore.js'][889] = 0;
  _$jscoverage['js/lib/underscore.js'][890] = 0;
  _$jscoverage['js/lib/underscore.js'][891] = 0;
  _$jscoverage['js/lib/underscore.js'][897] = 0;
  _$jscoverage['js/lib/underscore.js'][898] = 0;
  _$jscoverage['js/lib/underscore.js'][899] = 0;
  _$jscoverage['js/lib/underscore.js'][903] = 0;
  _$jscoverage['js/lib/underscore.js'][906] = 0;
  _$jscoverage['js/lib/underscore.js'][908] = 0;
  _$jscoverage['js/lib/underscore.js'][910] = 0;
  _$jscoverage['js/lib/underscore.js'][911] = 0;
  _$jscoverage['js/lib/underscore.js'][913] = 0;
  _$jscoverage['js/lib/underscore.js'][914] = 0;
  _$jscoverage['js/lib/underscore.js'][915] = 0;
  _$jscoverage['js/lib/underscore.js'][920] = 0;
  _$jscoverage['js/lib/underscore.js'][924] = 0;
  _$jscoverage['js/lib/underscore.js'][930] = 0;
  _$jscoverage['js/lib/underscore.js'][933] = 0;
  _$jscoverage['js/lib/underscore.js'][938] = 0;
  _$jscoverage['js/lib/underscore.js'][941] = 0;
  _$jscoverage['js/lib/underscore.js'][942] = 0;
  _$jscoverage['js/lib/underscore.js'][945] = 0;
  _$jscoverage['js/lib/underscore.js'][949] = 0;
  _$jscoverage['js/lib/underscore.js'][950] = 0;
  _$jscoverage['js/lib/underscore.js'][953] = 0;
  _$jscoverage['js/lib/underscore.js'][956] = 0;
  _$jscoverage['js/lib/underscore.js'][957] = 0;
  _$jscoverage['js/lib/underscore.js'][958] = 0;
  _$jscoverage['js/lib/underscore.js'][960] = 0;
  _$jscoverage['js/lib/underscore.js'][962] = 0;
  _$jscoverage['js/lib/underscore.js'][963] = 0;
  _$jscoverage['js/lib/underscore.js'][964] = 0;
  _$jscoverage['js/lib/underscore.js'][966] = 0;
  _$jscoverage['js/lib/underscore.js'][967] = 0;
  _$jscoverage['js/lib/underscore.js'][972] = 0;
  _$jscoverage['js/lib/underscore.js'][973] = 0;
  _$jscoverage['js/lib/underscore.js'][975] = 0;
  _$jscoverage['js/lib/underscore.js'][977] = 0;
  _$jscoverage['js/lib/underscore.js'][981] = 0;
  _$jscoverage['js/lib/underscore.js'][982] = 0;
  _$jscoverage['js/lib/underscore.js'][983] = 0;
  _$jscoverage['js/lib/underscore.js'][985] = 0;
  _$jscoverage['js/lib/underscore.js'][989] = 0;
  _$jscoverage['js/lib/underscore.js'][990] = 0;
  _$jscoverage['js/lib/underscore.js'][991] = 0;
  _$jscoverage['js/lib/underscore.js'][995] = 0;
  _$jscoverage['js/lib/underscore.js'][996] = 0;
  _$jscoverage['js/lib/underscore.js'][1001] = 0;
  _$jscoverage['js/lib/underscore.js'][1002] = 0;
  _$jscoverage['js/lib/underscore.js'][1003] = 0;
  _$jscoverage['js/lib/underscore.js'][1004] = 0;
  _$jscoverage['js/lib/underscore.js'][1005] = 0;
  _$jscoverage['js/lib/underscore.js'][1009] = 0;
  _$jscoverage['js/lib/underscore.js'][1010] = 0;
  _$jscoverage['js/lib/underscore.js'][1015] = 0;
  _$jscoverage['js/lib/underscore.js'][1016] = 0;
  _$jscoverage['js/lib/underscore.js'][1020] = 0;
  _$jscoverage['js/lib/underscore.js'][1021] = 0;
  _$jscoverage['js/lib/underscore.js'][1025] = 0;
  _$jscoverage['js/lib/underscore.js'][1026] = 0;
  _$jscoverage['js/lib/underscore.js'][1027] = 0;
  _$jscoverage['js/lib/underscore.js'][1033] = 0;
  _$jscoverage['js/lib/underscore.js'][1034] = 0;
  _$jscoverage['js/lib/underscore.js'][1035] = 0;
  _$jscoverage['js/lib/underscore.js'][1040] = 0;
  _$jscoverage['js/lib/underscore.js'][1041] = 0;
  _$jscoverage['js/lib/underscore.js'][1042] = 0;
  _$jscoverage['js/lib/underscore.js'][1047] = 0;
  _$jscoverage['js/lib/underscore.js'][1048] = 0;
  _$jscoverage['js/lib/underscore.js'][1052] = 0;
  _$jscoverage['js/lib/underscore.js'][1053] = 0;
  _$jscoverage['js/lib/underscore.js'][1057] = 0;
  _$jscoverage['js/lib/underscore.js'][1058] = 0;
  _$jscoverage['js/lib/underscore.js'][1062] = 0;
  _$jscoverage['js/lib/underscore.js'][1063] = 0;
  _$jscoverage['js/lib/underscore.js'][1067] = 0;
  _$jscoverage['js/lib/underscore.js'][1068] = 0;
  _$jscoverage['js/lib/underscore.js'][1073] = 0;
  _$jscoverage['js/lib/underscore.js'][1074] = 0;
  _$jscoverage['js/lib/underscore.js'][1082] = 0;
  _$jscoverage['js/lib/underscore.js'][1083] = 0;
  _$jscoverage['js/lib/underscore.js'][1084] = 0;
  _$jscoverage['js/lib/underscore.js'][1088] = 0;
  _$jscoverage['js/lib/underscore.js'][1089] = 0;
  _$jscoverage['js/lib/underscore.js'][1092] = 0;
  _$jscoverage['js/lib/underscore.js'][1093] = 0;
  _$jscoverage['js/lib/underscore.js'][1094] = 0;
  _$jscoverage['js/lib/underscore.js'][1098] = 0;
  _$jscoverage['js/lib/underscore.js'][1099] = 0;
  _$jscoverage['js/lib/underscore.js'][1100] = 0;
  _$jscoverage['js/lib/underscore.js'][1105] = 0;
  _$jscoverage['js/lib/underscore.js'][1106] = 0;
  _$jscoverage['js/lib/underscore.js'][1107] = 0;
  _$jscoverage['js/lib/underscore.js'][1108] = 0;
  _$jscoverage['js/lib/underscore.js'][1109] = 0;
  _$jscoverage['js/lib/underscore.js'][1110] = 0;
  _$jscoverage['js/lib/underscore.js'][1112] = 0;
  _$jscoverage['js/lib/underscore.js'][1117] = 0;
  _$jscoverage['js/lib/underscore.js'][1118] = 0;
  _$jscoverage['js/lib/underscore.js'][1119] = 0;
  _$jscoverage['js/lib/underscore.js'][1120] = 0;
  _$jscoverage['js/lib/underscore.js'][1124] = 0;
  _$jscoverage['js/lib/underscore.js'][1125] = 0;
  _$jscoverage['js/lib/underscore.js'][1126] = 0;
  _$jscoverage['js/lib/underscore.js'][1127] = 0;
  _$jscoverage['js/lib/underscore.js'][1129] = 0;
  _$jscoverage['js/lib/underscore.js'][1133] = 0;
  _$jscoverage['js/lib/underscore.js'][1136] = 0;
  _$jscoverage['js/lib/underscore.js'][1145] = 0;
  _$jscoverage['js/lib/underscore.js'][1148] = 0;
  _$jscoverage['js/lib/underscore.js'][1154] = 0;
  _$jscoverage['js/lib/underscore.js'][1155] = 0;
  _$jscoverage['js/lib/underscore.js'][1156] = 0;
  _$jscoverage['js/lib/underscore.js'][1157] = 0;
  _$jscoverage['js/lib/underscore.js'][1158] = 0;
  _$jscoverage['js/lib/underscore.js'][1165] = 0;
  _$jscoverage['js/lib/underscore.js'][1166] = 0;
  _$jscoverage['js/lib/underscore.js'][1167] = 0;
  _$jscoverage['js/lib/underscore.js'][1168] = 0;
  _$jscoverage['js/lib/underscore.js'][1172] = 0;
  _$jscoverage['js/lib/underscore.js'][1173] = 0;
  _$jscoverage['js/lib/underscore.js'][1174] = 0;
  _$jscoverage['js/lib/underscore.js'][1175] = 0;
  _$jscoverage['js/lib/underscore.js'][1176] = 0;
  _$jscoverage['js/lib/underscore.js'][1177] = 0;
  _$jscoverage['js/lib/underscore.js'][1178] = 0;
  _$jscoverage['js/lib/underscore.js'][1185] = 0;
  _$jscoverage['js/lib/underscore.js'][1186] = 0;
  _$jscoverage['js/lib/underscore.js'][1187] = 0;
  _$jscoverage['js/lib/underscore.js'][1188] = 0;
  _$jscoverage['js/lib/underscore.js'][1193] = 0;
  _$jscoverage['js/lib/underscore.js'][1202] = 0;
  _$jscoverage['js/lib/underscore.js'][1206] = 0;
  _$jscoverage['js/lib/underscore.js'][1216] = 0;
  _$jscoverage['js/lib/underscore.js'][1221] = 0;
  _$jscoverage['js/lib/underscore.js'][1222] = 0;
  _$jscoverage['js/lib/underscore.js'][1223] = 0;
  _$jscoverage['js/lib/underscore.js'][1226] = 0;
  _$jscoverage['js/lib/underscore.js'][1233] = 0;
  _$jscoverage['js/lib/underscore.js'][1234] = 0;
  _$jscoverage['js/lib/underscore.js'][1235] = 0;
  _$jscoverage['js/lib/underscore.js'][1236] = 0;
  _$jscoverage['js/lib/underscore.js'][1237] = 0;
  _$jscoverage['js/lib/underscore.js'][1239] = 0;
  _$jscoverage['js/lib/underscore.js'][1240] = 0;
  _$jscoverage['js/lib/underscore.js'][1242] = 0;
  _$jscoverage['js/lib/underscore.js'][1243] = 0;
  _$jscoverage['js/lib/underscore.js'][1245] = 0;
  _$jscoverage['js/lib/underscore.js'][1246] = 0;
  _$jscoverage['js/lib/underscore.js'][1248] = 0;
  _$jscoverage['js/lib/underscore.js'][1249] = 0;
  _$jscoverage['js/lib/underscore.js'][1251] = 0;
  _$jscoverage['js/lib/underscore.js'][1254] = 0;
  _$jscoverage['js/lib/underscore.js'][1256] = 0;
  _$jscoverage['js/lib/underscore.js'][1260] = 0;
  _$jscoverage['js/lib/underscore.js'][1261] = 0;
  _$jscoverage['js/lib/underscore.js'][1263] = 0;
  _$jscoverage['js/lib/underscore.js'][1264] = 0;
  _$jscoverage['js/lib/underscore.js'][1267] = 0;
  _$jscoverage['js/lib/underscore.js'][1268] = 0;
  _$jscoverage['js/lib/underscore.js'][1269] = 0;
  _$jscoverage['js/lib/underscore.js'][1273] = 0;
  _$jscoverage['js/lib/underscore.js'][1275] = 0;
  _$jscoverage['js/lib/underscore.js'][1279] = 0;
  _$jscoverage['js/lib/underscore.js'][1280] = 0;
  _$jscoverage['js/lib/underscore.js'][1290] = 0;
  _$jscoverage['js/lib/underscore.js'][1291] = 0;
  _$jscoverage['js/lib/underscore.js'][1295] = 0;
  _$jscoverage['js/lib/underscore.js'][1298] = 0;
  _$jscoverage['js/lib/underscore.js'][1299] = 0;
  _$jscoverage['js/lib/underscore.js'][1300] = 0;
  _$jscoverage['js/lib/underscore.js'][1301] = 0;
  _$jscoverage['js/lib/underscore.js'][1302] = 0;
  _$jscoverage['js/lib/underscore.js'][1303] = 0;
  _$jscoverage['js/lib/underscore.js'][1304] = 0;
  _$jscoverage['js/lib/underscore.js'][1309] = 0;
  _$jscoverage['js/lib/underscore.js'][1310] = 0;
  _$jscoverage['js/lib/underscore.js'][1311] = 0;
  _$jscoverage['js/lib/underscore.js'][1312] = 0;
  _$jscoverage['js/lib/underscore.js'][1316] = 0;
  _$jscoverage['js/lib/underscore.js'][1320] = 0;
  _$jscoverage['js/lib/underscore.js'][1321] = 0;
  _$jscoverage['js/lib/underscore.js'][1326] = 0;
  _$jscoverage['js/lib/underscore.js'][1338] = 0;
  _$jscoverage['js/lib/underscore.js'][1339] = 0;
  _$jscoverage['js/lib/underscore.js'][1340] = 0;
}
_$jscoverage['js/lib/underscore.js'].source = ["<span class=\"c\">//     Underscore.js 1.6.0</span>","<span class=\"c\">//     http://underscorejs.org</span>","<span class=\"c\">//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</span>","<span class=\"c\">//     Underscore may be freely distributed under the MIT license.</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","  <span class=\"c\">// Baseline setup</span>","  <span class=\"c\">// --------------</span>","","  <span class=\"c\">// Establish the root object, `window` in the browser, or `exports` on the server.</span>","  <span class=\"k\">var</span> root <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","  <span class=\"c\">// Save the previous value of the `_` variable.</span>","  <span class=\"k\">var</span> previousUnderscore <span class=\"k\">=</span> root<span class=\"k\">.</span>_<span class=\"k\">;</span>","","  <span class=\"c\">// Establish the object that gets returned to break out of a loop iteration.</span>","  <span class=\"k\">var</span> breaker <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Save bytes in the minified (but not gzipped) version:</span>","  <span class=\"k\">var</span> ArrayProto <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">,</span> ObjProto <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">,</span> FuncProto <span class=\"k\">=</span> Function<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","","  <span class=\"c\">// Create quick reference variables for speed access to core prototypes.</span>","  <span class=\"k\">var</span>","    push             <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>push<span class=\"k\">,</span>","    slice            <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>slice<span class=\"k\">,</span>","    concat           <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>concat<span class=\"k\">,</span>","    toString         <span class=\"k\">=</span> ObjProto<span class=\"k\">.</span>toString<span class=\"k\">,</span>","    hasOwnProperty   <span class=\"k\">=</span> ObjProto<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">;</span>","","  <span class=\"c\">// All **ECMAScript 5** native function implementations that we hope to use</span>","  <span class=\"c\">// are declared here.</span>","  <span class=\"k\">var</span>","    nativeForEach      <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>forEach<span class=\"k\">,</span>","    nativeMap          <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>map<span class=\"k\">,</span>","    nativeReduce       <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>reduce<span class=\"k\">,</span>","    nativeReduceRight  <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>reduceRight<span class=\"k\">,</span>","    nativeFilter       <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>filter<span class=\"k\">,</span>","    nativeEvery        <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>every<span class=\"k\">,</span>","    nativeSome         <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>some<span class=\"k\">,</span>","    nativeIndexOf      <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>indexOf<span class=\"k\">,</span>","    nativeLastIndexOf  <span class=\"k\">=</span> ArrayProto<span class=\"k\">.</span>lastIndexOf<span class=\"k\">,</span>","    nativeIsArray      <span class=\"k\">=</span> Array<span class=\"k\">.</span>isArray<span class=\"k\">,</span>","    nativeKeys         <span class=\"k\">=</span> Object<span class=\"k\">.</span>keys<span class=\"k\">,</span>","    nativeBind         <span class=\"k\">=</span> FuncProto<span class=\"k\">.</span>bind<span class=\"k\">;</span>","","  <span class=\"c\">// Create a safe reference to the Underscore object for use below.</span>","  <span class=\"k\">var</span> _ <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> _<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!(</span><span class=\"k\">this</span> <span class=\"k\">instanceof</span> _<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">new</span> _<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_wrapped <span class=\"k\">=</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Export the Underscore object for **Node.js**, with</span>","  <span class=\"c\">// backwards-compatibility for the old `require()` API. If we're in</span>","  <span class=\"c\">// the browser, add `_` as a global object via a string identifier,</span>","  <span class=\"c\">// for Closure Compiler \"advanced\" mode.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> exports <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> module <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> module<span class=\"k\">.</span>exports<span class=\"k\">)</span> <span class=\"k\">{</span>","      exports <span class=\"k\">=</span> module<span class=\"k\">.</span>exports <span class=\"k\">=</span> _<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    exports<span class=\"k\">.</span>_ <span class=\"k\">=</span> _<span class=\"k\">;</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    root<span class=\"k\">.</span>_ <span class=\"k\">=</span> _<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// Current version.</span>","  _<span class=\"k\">.</span>VERSION <span class=\"k\">=</span> <span class=\"s\">'1.6.0'</span><span class=\"k\">;</span>","","  <span class=\"c\">// Collection Functions</span>","  <span class=\"c\">// --------------------</span>","","  <span class=\"c\">// The cornerstone, an `each` implementation, aka `forEach`.</span>","  <span class=\"c\">// Handles objects with the built-in `forEach`, arrays, and raw objects.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `forEach` if available.</span>","  <span class=\"k\">var</span> each <span class=\"k\">=</span> _<span class=\"k\">.</span>each <span class=\"k\">=</span> _<span class=\"k\">.</span>forEach <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeForEach <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>forEach <span class=\"k\">===</span> nativeForEach<span class=\"k\">)</span> <span class=\"k\">{</span>","      obj<span class=\"k\">.</span>forEach<span class=\"k\">(</span>iterator<span class=\"k\">,</span> context<span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"k\">+</span>obj<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> obj<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> obj<span class=\"k\">[</span>i<span class=\"k\">],</span> i<span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">===</span> breaker<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> keys <span class=\"k\">=</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> obj<span class=\"k\">[</span>keys<span class=\"k\">[</span>i<span class=\"k\">]],</span> keys<span class=\"k\">[</span>i<span class=\"k\">],</span> obj<span class=\"k\">)</span> <span class=\"k\">===</span> breaker<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return the results of applying the iterator to each element.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `map` if available.</span>","  _<span class=\"k\">.</span>map <span class=\"k\">=</span> _<span class=\"k\">.</span>collect <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> results<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeMap <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>map <span class=\"k\">===</span> nativeMap<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">.</span>map<span class=\"k\">(</span>iterator<span class=\"k\">,</span> context<span class=\"k\">);</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      results<span class=\"k\">.</span>push<span class=\"k\">(</span>iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> results<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> reduceError <span class=\"k\">=</span> <span class=\"s\">'Reduce of empty array with no initial value'</span><span class=\"k\">;</span>","","  <span class=\"c\">// **Reduce** builds up a single result from a list of values, aka `inject`,</span>","  <span class=\"c\">// or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.</span>","  _<span class=\"k\">.</span>reduce <span class=\"k\">=</span> _<span class=\"k\">.</span>foldl <span class=\"k\">=</span> _<span class=\"k\">.</span>inject <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> memo<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> initial <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">2</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> obj <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeReduce <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>reduce <span class=\"k\">===</span> nativeReduce<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>context<span class=\"k\">)</span> iterator <span class=\"k\">=</span> _<span class=\"k\">.</span>bind<span class=\"k\">(</span>iterator<span class=\"k\">,</span> context<span class=\"k\">);</span>","      <span class=\"k\">return</span> initial <span class=\"k\">?</span> obj<span class=\"k\">.</span>reduce<span class=\"k\">(</span>iterator<span class=\"k\">,</span> memo<span class=\"k\">)</span> <span class=\"k\">:</span> obj<span class=\"k\">.</span>reduce<span class=\"k\">(</span>iterator<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>initial<span class=\"k\">)</span> <span class=\"k\">{</span>","        memo <span class=\"k\">=</span> value<span class=\"k\">;</span>","        initial <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        memo <span class=\"k\">=</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> memo<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>initial<span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span>reduceError<span class=\"k\">);</span>","    <span class=\"k\">return</span> memo<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// The right-associative version of reduce, also known as `foldr`.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `reduceRight` if available.</span>","  _<span class=\"k\">.</span>reduceRight <span class=\"k\">=</span> _<span class=\"k\">.</span>foldr <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> memo<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> initial <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">2</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> obj <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeReduceRight <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>reduceRight <span class=\"k\">===</span> nativeReduceRight<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>context<span class=\"k\">)</span> iterator <span class=\"k\">=</span> _<span class=\"k\">.</span>bind<span class=\"k\">(</span>iterator<span class=\"k\">,</span> context<span class=\"k\">);</span>","      <span class=\"k\">return</span> initial <span class=\"k\">?</span> obj<span class=\"k\">.</span>reduceRight<span class=\"k\">(</span>iterator<span class=\"k\">,</span> memo<span class=\"k\">)</span> <span class=\"k\">:</span> obj<span class=\"k\">.</span>reduceRight<span class=\"k\">(</span>iterator<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> length <span class=\"k\">=</span> obj<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>length <span class=\"k\">!==</span> <span class=\"k\">+</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> keys <span class=\"k\">=</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>obj<span class=\"k\">);</span>","      length <span class=\"k\">=</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      index <span class=\"k\">=</span> keys <span class=\"k\">?</span> keys<span class=\"k\">[--</span>length<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">--</span>length<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>initial<span class=\"k\">)</span> <span class=\"k\">{</span>","        memo <span class=\"k\">=</span> obj<span class=\"k\">[</span>index<span class=\"k\">];</span>","        initial <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        memo <span class=\"k\">=</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> memo<span class=\"k\">,</span> obj<span class=\"k\">[</span>index<span class=\"k\">],</span> index<span class=\"k\">,</span> list<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>initial<span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span>reduceError<span class=\"k\">);</span>","    <span class=\"k\">return</span> memo<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return the first value which passes a truth test. Aliased as `detect`.</span>","  _<span class=\"k\">.</span>find <span class=\"k\">=</span> _<span class=\"k\">.</span>detect <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> predicate<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> result<span class=\"k\">;</span>","    any<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>predicate<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">))</span> <span class=\"k\">{</span>","        result <span class=\"k\">=</span> value<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return all the elements that pass a truth test.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `filter` if available.</span>","  <span class=\"c\">// Aliased as `select`.</span>","  _<span class=\"k\">.</span>filter <span class=\"k\">=</span> _<span class=\"k\">.</span>select <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> predicate<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> results<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeFilter <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>filter <span class=\"k\">===</span> nativeFilter<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">.</span>filter<span class=\"k\">(</span>predicate<span class=\"k\">,</span> context<span class=\"k\">);</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>predicate<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">))</span> results<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> results<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return all the elements for which a truth test fails.</span>","  _<span class=\"k\">.</span>reject <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> predicate<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>filter<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">!</span>predicate<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> context<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Determine whether all of the elements match a truth test.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `every` if available.</span>","  <span class=\"c\">// Aliased as `all`.</span>","  _<span class=\"k\">.</span>every <span class=\"k\">=</span> _<span class=\"k\">.</span>all <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> predicate<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    predicate <span class=\"k\">||</span> <span class=\"k\">(</span>predicate <span class=\"k\">=</span> _<span class=\"k\">.</span>identity<span class=\"k\">);</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeEvery <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>every <span class=\"k\">===</span> nativeEvery<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">.</span>every<span class=\"k\">(</span>predicate<span class=\"k\">,</span> context<span class=\"k\">);</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span>result <span class=\"k\">=</span> result <span class=\"k\">&amp;&amp;</span> predicate<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)))</span> <span class=\"k\">return</span> breaker<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">!!</span>result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Determine if at least one element in the object matches a truth test.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `some` if available.</span>","  <span class=\"c\">// Aliased as `any`.</span>","  <span class=\"k\">var</span> any <span class=\"k\">=</span> _<span class=\"k\">.</span>some <span class=\"k\">=</span> _<span class=\"k\">.</span>any <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> predicate<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    predicate <span class=\"k\">||</span> <span class=\"k\">(</span>predicate <span class=\"k\">=</span> _<span class=\"k\">.</span>identity<span class=\"k\">);</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeSome <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>some <span class=\"k\">===</span> nativeSome<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">.</span>some<span class=\"k\">(</span>predicate<span class=\"k\">,</span> context<span class=\"k\">);</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>result <span class=\"k\">||</span> <span class=\"k\">(</span>result <span class=\"k\">=</span> predicate<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)))</span> <span class=\"k\">return</span> breaker<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">!!</span>result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Determine if the array or object contains a given value (using `===`).</span>","  <span class=\"c\">// Aliased as `include`.</span>","  _<span class=\"k\">.</span>contains <span class=\"k\">=</span> _<span class=\"k\">.</span>include <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> target<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeIndexOf <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>indexOf <span class=\"k\">===</span> nativeIndexOf<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>target<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> any<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> value <span class=\"k\">===</span> target<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Invoke a method (with arguments) on every item in a collection.</span>","  _<span class=\"k\">.</span>invoke <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> method<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> isFunc <span class=\"k\">=</span> _<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>method<span class=\"k\">);</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>map<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">(</span>isFunc <span class=\"k\">?</span> method <span class=\"k\">:</span> value<span class=\"k\">[</span>method<span class=\"k\">]).</span>apply<span class=\"k\">(</span>value<span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Convenience version of a common use case of `map`: fetching a property.</span>","  _<span class=\"k\">.</span>pluck <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>map<span class=\"k\">(</span>obj<span class=\"k\">,</span> _<span class=\"k\">.</span>property<span class=\"k\">(</span>key<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Convenience version of a common use case of `filter`: selecting only objects</span>","  <span class=\"c\">// containing specific `key:value` pairs.</span>","  _<span class=\"k\">.</span>where <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>filter<span class=\"k\">(</span>obj<span class=\"k\">,</span> _<span class=\"k\">.</span>matches<span class=\"k\">(</span>attrs<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Convenience version of a common use case of `find`: getting the first object</span>","  <span class=\"c\">// containing specific `key:value` pairs.</span>","  _<span class=\"k\">.</span>findWhere <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>find<span class=\"k\">(</span>obj<span class=\"k\">,</span> _<span class=\"k\">.</span>matches<span class=\"k\">(</span>attrs<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return the maximum element or (element-based computation).</span>","  <span class=\"c\">// Can't optimize arrays of integers longer than 65,535 elements.</span>","  <span class=\"c\">// See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)</span>","  _<span class=\"k\">.</span>max <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>iterator <span class=\"k\">&amp;&amp;</span> _<span class=\"k\">.</span>isArray<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">+</span>obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">65535</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> Math<span class=\"k\">.</span>max<span class=\"k\">.</span>apply<span class=\"k\">(</span>Math<span class=\"k\">,</span> obj<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">-</span>Infinity<span class=\"k\">,</span> lastComputed <span class=\"k\">=</span> <span class=\"k\">-</span>Infinity<span class=\"k\">;</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> computed <span class=\"k\">=</span> iterator <span class=\"k\">?</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>computed <span class=\"k\">&gt;</span> lastComputed<span class=\"k\">)</span> <span class=\"k\">{</span>","        result <span class=\"k\">=</span> value<span class=\"k\">;</span>","        lastComputed <span class=\"k\">=</span> computed<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return the minimum element (or element-based computation).</span>","  _<span class=\"k\">.</span>min <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>iterator <span class=\"k\">&amp;&amp;</span> _<span class=\"k\">.</span>isArray<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">+</span>obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">65535</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> Math<span class=\"k\">.</span>min<span class=\"k\">.</span>apply<span class=\"k\">(</span>Math<span class=\"k\">,</span> obj<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> Infinity<span class=\"k\">,</span> lastComputed <span class=\"k\">=</span> Infinity<span class=\"k\">;</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> computed <span class=\"k\">=</span> iterator <span class=\"k\">?</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>computed <span class=\"k\">&lt;</span> lastComputed<span class=\"k\">)</span> <span class=\"k\">{</span>","        result <span class=\"k\">=</span> value<span class=\"k\">;</span>","        lastComputed <span class=\"k\">=</span> computed<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Shuffle an array, using the modern version of the</span>","  <span class=\"c\">// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher&#226;&#128;&#147;Yates_shuffle).</span>","  _<span class=\"k\">.</span>shuffle <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rand<span class=\"k\">;</span>","    <span class=\"k\">var</span> index <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> shuffled <span class=\"k\">=</span> <span class=\"k\">[];</span>","    each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","      rand <span class=\"k\">=</span> _<span class=\"k\">.</span>random<span class=\"k\">(</span>index<span class=\"k\">++);</span>","      shuffled<span class=\"k\">[</span>index <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> shuffled<span class=\"k\">[</span>rand<span class=\"k\">];</span>","      shuffled<span class=\"k\">[</span>rand<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> shuffled<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Sample **n** random values from a collection.</span>","  <span class=\"c\">// If **n** is not specified, returns a single random element.</span>","  <span class=\"c\">// The internal `guard` argument allows it to work with `map`.</span>","  _<span class=\"k\">.</span>sample <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> n<span class=\"k\">,</span> guard<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>n <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> guard<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>length <span class=\"k\">!==</span> <span class=\"k\">+</span>obj<span class=\"k\">.</span>length<span class=\"k\">)</span> obj <span class=\"k\">=</span> _<span class=\"k\">.</span>values<span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">return</span> obj<span class=\"k\">[</span>_<span class=\"k\">.</span>random<span class=\"k\">(</span>obj<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>shuffle<span class=\"k\">(</span>obj<span class=\"k\">).</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> n<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// An internal function to generate lookup iterators.</span>","  <span class=\"k\">var</span> lookupIterator <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> _<span class=\"k\">.</span>identity<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>value<span class=\"k\">))</span> <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>property<span class=\"k\">(</span>value<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Sort the object's values by a criterion produced by an iterator.</span>","  _<span class=\"k\">.</span>sortBy <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    iterator <span class=\"k\">=</span> lookupIterator<span class=\"k\">(</span>iterator<span class=\"k\">);</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>pluck<span class=\"k\">(</span>_<span class=\"k\">.</span>map<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        value<span class=\"k\">:</span> value<span class=\"k\">,</span>","        index<span class=\"k\">:</span> index<span class=\"k\">,</span>","        criteria<span class=\"k\">:</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> list<span class=\"k\">)</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">).</span>sort<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>left<span class=\"k\">,</span> right<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> a <span class=\"k\">=</span> left<span class=\"k\">.</span>criteria<span class=\"k\">;</span>","      <span class=\"k\">var</span> b <span class=\"k\">=</span> right<span class=\"k\">.</span>criteria<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">!==</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">&gt;</span> b <span class=\"k\">||</span> a <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">&lt;</span> b <span class=\"k\">||</span> b <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> left<span class=\"k\">.</span>index <span class=\"k\">-</span> right<span class=\"k\">.</span>index<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">'value'</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// An internal function used for aggregate \"group by\" operations.</span>","  <span class=\"k\">var</span> group <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>behavior<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      iterator <span class=\"k\">=</span> lookupIterator<span class=\"k\">(</span>iterator<span class=\"k\">);</span>","      each<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> key <span class=\"k\">=</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> value<span class=\"k\">,</span> index<span class=\"k\">,</span> obj<span class=\"k\">);</span>","        behavior<span class=\"k\">(</span>result<span class=\"k\">,</span> key<span class=\"k\">,</span> value<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Groups the object's values by a criterion. Pass either a string attribute</span>","  <span class=\"c\">// to group by, or a function that returns the criterion.</span>","  _<span class=\"k\">.</span>groupBy <span class=\"k\">=</span> group<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>result<span class=\"k\">,</span> key<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","    _<span class=\"k\">.</span>has<span class=\"k\">(</span>result<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">?</span> result<span class=\"k\">[</span>key<span class=\"k\">].</span>push<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">:</span> result<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span>value<span class=\"k\">];</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Indexes the object's values by a criterion, similar to `groupBy`, but for</span>","  <span class=\"c\">// when you know that your index values will be unique.</span>","  _<span class=\"k\">.</span>indexBy <span class=\"k\">=</span> group<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>result<span class=\"k\">,</span> key<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","    result<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Counts instances of an object that group by a certain criterion. Pass</span>","  <span class=\"c\">// either a string attribute to count by, or a function that returns the</span>","  <span class=\"c\">// criterion.</span>","  _<span class=\"k\">.</span>countBy <span class=\"k\">=</span> group<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>result<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">{</span>","    _<span class=\"k\">.</span>has<span class=\"k\">(</span>result<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">?</span> result<span class=\"k\">[</span>key<span class=\"k\">]++</span> <span class=\"k\">:</span> result<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Use a comparator function to figure out the smallest index at which</span>","  <span class=\"c\">// an object should be inserted so as to maintain order. Uses binary search.</span>","  _<span class=\"k\">.</span>sortedIndex <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> obj<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    iterator <span class=\"k\">=</span> lookupIterator<span class=\"k\">(</span>iterator<span class=\"k\">);</span>","    <span class=\"k\">var</span> value <span class=\"k\">=</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> obj<span class=\"k\">);</span>","    <span class=\"k\">var</span> low <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> high <span class=\"k\">=</span> array<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">while</span> <span class=\"k\">(</span>low <span class=\"k\">&lt;</span> high<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> mid <span class=\"k\">=</span> <span class=\"k\">(</span>low <span class=\"k\">+</span> high<span class=\"k\">)</span> <span class=\"k\">&gt;&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","      iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> array<span class=\"k\">[</span>mid<span class=\"k\">])</span> <span class=\"k\">&lt;</span> value <span class=\"k\">?</span> low <span class=\"k\">=</span> mid <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">:</span> high <span class=\"k\">=</span> mid<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> low<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Safely create a real, live array from anything iterable.</span>","  _<span class=\"k\">.</span>toArray <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isArray<span class=\"k\">(</span>obj<span class=\"k\">))</span> <span class=\"k\">return</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"k\">+</span>obj<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">return</span> _<span class=\"k\">.</span>map<span class=\"k\">(</span>obj<span class=\"k\">,</span> _<span class=\"k\">.</span>identity<span class=\"k\">);</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>values<span class=\"k\">(</span>obj<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return the number of elements in an object.</span>","  _<span class=\"k\">.</span>size <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"k\">+</span>obj<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">?</span> obj<span class=\"k\">.</span>length <span class=\"k\">:</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>obj<span class=\"k\">).</span>length<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Array Functions</span>","  <span class=\"c\">// ---------------</span>","","  <span class=\"c\">// Get the first element of an array. Passing **n** will return the first N</span>","  <span class=\"c\">// values in the array. Aliased as `head` and `take`. The **guard** check</span>","  <span class=\"c\">// allows it to work with `_.map`.</span>","  _<span class=\"k\">.</span>first <span class=\"k\">=</span> _<span class=\"k\">.</span>head <span class=\"k\">=</span> _<span class=\"k\">.</span>take <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> n<span class=\"k\">,</span> guard<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>array <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">((</span>n <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">||</span> guard<span class=\"k\">)</span> <span class=\"k\">return</span> array<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>n <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">[];</span>","    <span class=\"k\">return</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>array<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> n<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns everything but the last entry of the array. Especially useful on</span>","  <span class=\"c\">// the arguments object. Passing **n** will return all the values in</span>","  <span class=\"c\">// the array, excluding the last N. The **guard** check allows it to work with</span>","  <span class=\"c\">// `_.map`.</span>","  _<span class=\"k\">.</span>initial <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> n<span class=\"k\">,</span> guard<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>array<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> array<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"k\">((</span>n <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">||</span> guard <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> n<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Get the last element of an array. Passing **n** will return the last N</span>","  <span class=\"c\">// values in the array. The **guard** check allows it to work with `_.map`.</span>","  _<span class=\"k\">.</span>last <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> n<span class=\"k\">,</span> guard<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>array <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">((</span>n <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">||</span> guard<span class=\"k\">)</span> <span class=\"k\">return</span> array<span class=\"k\">[</span>array<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","    <span class=\"k\">return</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>array<span class=\"k\">,</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>array<span class=\"k\">.</span>length <span class=\"k\">-</span> n<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns everything but the first entry of the array. Aliased as `tail` and `drop`.</span>","  <span class=\"c\">// Especially useful on the arguments object. Passing an **n** will return</span>","  <span class=\"c\">// the rest N values in the array. The **guard**</span>","  <span class=\"c\">// check allows it to work with `_.map`.</span>","  _<span class=\"k\">.</span>rest <span class=\"k\">=</span> _<span class=\"k\">.</span>tail <span class=\"k\">=</span> _<span class=\"k\">.</span>drop <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> n<span class=\"k\">,</span> guard<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>array<span class=\"k\">,</span> <span class=\"k\">(</span>n <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">||</span> guard <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> n<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Trim out all falsy values from an array.</span>","  _<span class=\"k\">.</span>compact <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>filter<span class=\"k\">(</span>array<span class=\"k\">,</span> _<span class=\"k\">.</span>identity<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Internal implementation of a recursive `flatten` function.</span>","  <span class=\"k\">var</span> flatten <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">,</span> shallow<span class=\"k\">,</span> output<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>shallow <span class=\"k\">&amp;&amp;</span> _<span class=\"k\">.</span>every<span class=\"k\">(</span>input<span class=\"k\">,</span> _<span class=\"k\">.</span>isArray<span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> concat<span class=\"k\">.</span>apply<span class=\"k\">(</span>output<span class=\"k\">,</span> input<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    each<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isArray<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">||</span> _<span class=\"k\">.</span>isArguments<span class=\"k\">(</span>value<span class=\"k\">))</span> <span class=\"k\">{</span>","        shallow <span class=\"k\">?</span> push<span class=\"k\">.</span>apply<span class=\"k\">(</span>output<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">:</span> flatten<span class=\"k\">(</span>value<span class=\"k\">,</span> shallow<span class=\"k\">,</span> output<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        output<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> output<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Flatten out an array, either recursively (by default), or just one level.</span>","  _<span class=\"k\">.</span>flatten <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> shallow<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> flatten<span class=\"k\">(</span>array<span class=\"k\">,</span> shallow<span class=\"k\">,</span> <span class=\"k\">[]);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return a version of the array that does not contain the specified value(s).</span>","  _<span class=\"k\">.</span>without <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>difference<span class=\"k\">(</span>array<span class=\"k\">,</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Split an array into two arrays: one whose elements all satisfy the given</span>","  <span class=\"c\">// predicate, and one whose elements all do not satisfy the predicate.</span>","  _<span class=\"k\">.</span>partition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> predicate<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> pass <span class=\"k\">=</span> <span class=\"k\">[],</span> fail <span class=\"k\">=</span> <span class=\"k\">[];</span>","    each<span class=\"k\">(</span>array<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">(</span>predicate<span class=\"k\">(</span>elem<span class=\"k\">)</span> <span class=\"k\">?</span> pass <span class=\"k\">:</span> fail<span class=\"k\">).</span>push<span class=\"k\">(</span>elem<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">[</span>pass<span class=\"k\">,</span> fail<span class=\"k\">];</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Produce a duplicate-free version of the array. If the array has already</span>","  <span class=\"c\">// been sorted, you have the option of using a faster algorithm.</span>","  <span class=\"c\">// Aliased as `unique`.</span>","  _<span class=\"k\">.</span>uniq <span class=\"k\">=</span> _<span class=\"k\">.</span>unique <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> isSorted<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>isSorted<span class=\"k\">))</span> <span class=\"k\">{</span>","      context <span class=\"k\">=</span> iterator<span class=\"k\">;</span>","      iterator <span class=\"k\">=</span> isSorted<span class=\"k\">;</span>","      isSorted <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> initial <span class=\"k\">=</span> iterator <span class=\"k\">?</span> _<span class=\"k\">.</span>map<span class=\"k\">(</span>array<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">:</span> array<span class=\"k\">;</span>","    <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> seen <span class=\"k\">=</span> <span class=\"k\">[];</span>","    each<span class=\"k\">(</span>initial<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> index<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>isSorted <span class=\"k\">?</span> <span class=\"k\">(!</span>index <span class=\"k\">||</span> seen<span class=\"k\">[</span>seen<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">!==</span> value<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">!</span>_<span class=\"k\">.</span>contains<span class=\"k\">(</span>seen<span class=\"k\">,</span> value<span class=\"k\">))</span> <span class=\"k\">{</span>","        seen<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        results<span class=\"k\">.</span>push<span class=\"k\">(</span>array<span class=\"k\">[</span>index<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> results<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Produce an array that contains the union: each distinct element from all of</span>","  <span class=\"c\">// the passed-in arrays.</span>","  _<span class=\"k\">.</span>union <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>uniq<span class=\"k\">(</span>_<span class=\"k\">.</span>flatten<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Produce an array that contains every item shared between all the</span>","  <span class=\"c\">// passed-in arrays.</span>","  _<span class=\"k\">.</span>intersection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rest <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>filter<span class=\"k\">(</span>_<span class=\"k\">.</span>uniq<span class=\"k\">(</span>array<span class=\"k\">),</span> <span class=\"k\">function</span><span class=\"k\">(</span>item<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>every<span class=\"k\">(</span>rest<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>other<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> _<span class=\"k\">.</span>contains<span class=\"k\">(</span>other<span class=\"k\">,</span> item<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Take the difference between one array and a number of other arrays.</span>","  <span class=\"c\">// Only the elements present in just the first array will remain.</span>","  _<span class=\"k\">.</span>difference <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rest <span class=\"k\">=</span> concat<span class=\"k\">.</span>apply<span class=\"k\">(</span>ArrayProto<span class=\"k\">,</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">));</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>filter<span class=\"k\">(</span>array<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">!</span>_<span class=\"k\">.</span>contains<span class=\"k\">(</span>rest<span class=\"k\">,</span> value<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Zip together multiple lists into a single array -- elements that share</span>","  <span class=\"c\">// an index go together.</span>","  _<span class=\"k\">.</span>zip <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> length <span class=\"k\">=</span> _<span class=\"k\">.</span>max<span class=\"k\">(</span>_<span class=\"k\">.</span>pluck<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">'length'</span><span class=\"k\">).</span>concat<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">));</span>","    <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>length<span class=\"k\">);</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      results<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> _<span class=\"k\">.</span>pluck<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">+</span> i<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> results<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Converts lists into objects. Pass either a single array of `[key, value]`</span>","  <span class=\"c\">// pairs, or two parallel arrays of the same length -- one of keys, and one of</span>","  <span class=\"c\">// the corresponding values.</span>","  _<span class=\"k\">.</span>object <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>list<span class=\"k\">,</span> values<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>list <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> list<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>values<span class=\"k\">)</span> <span class=\"k\">{</span>","        result<span class=\"k\">[</span>list<span class=\"k\">[</span>i<span class=\"k\">]]</span> <span class=\"k\">=</span> values<span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        result<span class=\"k\">[</span>list<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]]</span> <span class=\"k\">=</span> list<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),</span>","  <span class=\"c\">// we need this function. Return the position of the first occurrence of an</span>","  <span class=\"c\">// item in an array, or -1 if the item is not included in the array.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `indexOf` if available.</span>","  <span class=\"c\">// If the array is large and already in sort order, pass `true`</span>","  <span class=\"c\">// for **isSorted** to use binary search.</span>","  _<span class=\"k\">.</span>indexOf <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> item<span class=\"k\">,</span> isSorted<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>array <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> array<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isSorted<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> isSorted <span class=\"k\">==</span> <span class=\"s\">'number'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        i <span class=\"k\">=</span> <span class=\"k\">(</span>isSorted <span class=\"k\">&lt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">+</span> isSorted<span class=\"k\">)</span> <span class=\"k\">:</span> isSorted<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        i <span class=\"k\">=</span> _<span class=\"k\">.</span>sortedIndex<span class=\"k\">(</span>array<span class=\"k\">,</span> item<span class=\"k\">);</span>","        <span class=\"k\">return</span> array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> item <span class=\"k\">?</span> i <span class=\"k\">:</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeIndexOf <span class=\"k\">&amp;&amp;</span> array<span class=\"k\">.</span>indexOf <span class=\"k\">===</span> nativeIndexOf<span class=\"k\">)</span> <span class=\"k\">return</span> array<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>item<span class=\"k\">,</span> isSorted<span class=\"k\">);</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">if</span> <span class=\"k\">(</span>array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> item<span class=\"k\">)</span> <span class=\"k\">return</span> i<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.</span>","  _<span class=\"k\">.</span>lastIndexOf <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">,</span> item<span class=\"k\">,</span> from<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>array <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> hasIndex <span class=\"k\">=</span> from <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeLastIndexOf <span class=\"k\">&amp;&amp;</span> array<span class=\"k\">.</span>lastIndexOf <span class=\"k\">===</span> nativeLastIndexOf<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> hasIndex <span class=\"k\">?</span> array<span class=\"k\">.</span>lastIndexOf<span class=\"k\">(</span>item<span class=\"k\">,</span> from<span class=\"k\">)</span> <span class=\"k\">:</span> array<span class=\"k\">.</span>lastIndexOf<span class=\"k\">(</span>item<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"k\">(</span>hasIndex <span class=\"k\">?</span> from <span class=\"k\">:</span> array<span class=\"k\">.</span>length<span class=\"k\">);</span>","    <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span> <span class=\"k\">if</span> <span class=\"k\">(</span>array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> item<span class=\"k\">)</span> <span class=\"k\">return</span> i<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Generate an integer Array containing an arithmetic progression. A port of</span>","  <span class=\"c\">// the native Python `range()` function. See</span>","  <span class=\"c\">// [the Python documentation](http://docs.python.org/library/functions.html#range).</span>","  _<span class=\"k\">.</span>range <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>start<span class=\"k\">,</span> stop<span class=\"k\">,</span> step<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&lt;=</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      stop <span class=\"k\">=</span> start <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      start <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    step <span class=\"k\">=</span> arguments<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> length <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>Math<span class=\"k\">.</span>ceil<span class=\"k\">((</span>stop <span class=\"k\">-</span> start<span class=\"k\">)</span> <span class=\"k\">/</span> step<span class=\"k\">),</span> <span class=\"s\">0</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> idx <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>length<span class=\"k\">);</span>","","    <span class=\"k\">while</span><span class=\"k\">(</span>idx <span class=\"k\">&lt;</span> length<span class=\"k\">)</span> <span class=\"k\">{</span>","      range<span class=\"k\">[</span>idx<span class=\"k\">++]</span> <span class=\"k\">=</span> start<span class=\"k\">;</span>","      start <span class=\"k\">+=</span> step<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> range<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Function (ahem) Functions</span>","  <span class=\"c\">// ------------------</span>","","  <span class=\"c\">// Reusable constructor function for prototype setting.</span>","  <span class=\"k\">var</span> ctor <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Create a function bound to a given object (assigning `this`, and arguments,</span>","  <span class=\"c\">// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if</span>","  <span class=\"c\">// available.</span>","  _<span class=\"k\">.</span>bind <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> args<span class=\"k\">,</span> bound<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeBind <span class=\"k\">&amp;&amp;</span> func<span class=\"k\">.</span>bind <span class=\"k\">===</span> nativeBind<span class=\"k\">)</span> <span class=\"k\">return</span> nativeBind<span class=\"k\">.</span>apply<span class=\"k\">(</span>func<span class=\"k\">,</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">));</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>func<span class=\"k\">))</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">;</span>","    args <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> bound <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span><span class=\"k\">this</span> <span class=\"k\">instanceof</span> bound<span class=\"k\">))</span> <span class=\"k\">return</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>context<span class=\"k\">,</span> args<span class=\"k\">.</span>concat<span class=\"k\">(</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">)));</span>","      ctor<span class=\"k\">.</span>prototype <span class=\"k\">=</span> func<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","      <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">new</span> ctor<span class=\"k\">;</span>","      ctor<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>self<span class=\"k\">,</span> args<span class=\"k\">.</span>concat<span class=\"k\">(</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">)));</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>Object<span class=\"k\">(</span>result<span class=\"k\">)</span> <span class=\"k\">===</span> result<span class=\"k\">)</span> <span class=\"k\">return</span> result<span class=\"k\">;</span>","      <span class=\"k\">return</span> self<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Partially apply a function by creating a version that has had some of its</span>","  <span class=\"c\">// arguments pre-filled, without changing its dynamic `this` context. _ acts</span>","  <span class=\"c\">// as a placeholder, allowing any combination of arguments to be pre-filled.</span>","  _<span class=\"k\">.</span>partial <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> boundArgs <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> position <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> args <span class=\"k\">=</span> boundArgs<span class=\"k\">.</span>slice<span class=\"k\">();</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> args<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>args<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> _<span class=\"k\">)</span> args<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> arguments<span class=\"k\">[</span>position<span class=\"k\">++];</span>","      <span class=\"k\">}</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>position <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">)</span> args<span class=\"k\">.</span>push<span class=\"k\">(</span>arguments<span class=\"k\">[</span>position<span class=\"k\">++]);</span>","      <span class=\"k\">return</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Bind a number of an object's methods to that object. Remaining arguments</span>","  <span class=\"c\">// are the method names to be bound. Useful for ensuring that all callbacks</span>","  <span class=\"c\">// defined on an object belong to it.</span>","  _<span class=\"k\">.</span>bindAll <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> funcs <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>funcs<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'bindAll must be passed function names'</span><span class=\"k\">);</span>","    each<span class=\"k\">(</span>funcs<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>f<span class=\"k\">)</span> <span class=\"k\">{</span> obj<span class=\"k\">[</span>f<span class=\"k\">]</span> <span class=\"k\">=</span> _<span class=\"k\">.</span>bind<span class=\"k\">(</span>obj<span class=\"k\">[</span>f<span class=\"k\">],</span> obj<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Memoize an expensive function by storing its results.</span>","  _<span class=\"k\">.</span>memoize <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">,</span> hasher<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> memo <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    hasher <span class=\"k\">||</span> <span class=\"k\">(</span>hasher <span class=\"k\">=</span> _<span class=\"k\">.</span>identity<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> key <span class=\"k\">=</span> hasher<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      <span class=\"k\">return</span> _<span class=\"k\">.</span>has<span class=\"k\">(</span>memo<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">?</span> memo<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">(</span>memo<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Delays a function for the given number of milliseconds, and then calls</span>","  <span class=\"c\">// it with the arguments supplied.</span>","  _<span class=\"k\">.</span>delay <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">,</span> wait<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span> <span class=\"k\">return</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> args<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span> wait<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Defers a function, scheduling it to run after the current call stack has</span>","  <span class=\"c\">// cleared.</span>","  _<span class=\"k\">.</span>defer <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>delay<span class=\"k\">.</span>apply<span class=\"k\">(</span>_<span class=\"k\">,</span> <span class=\"k\">[</span>func<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">].</span>concat<span class=\"k\">(</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">)));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns a function, that, when invoked, will only be triggered at most once</span>","  <span class=\"c\">// during a given window of time. Normally, the throttled function will run</span>","  <span class=\"c\">// as much as it can, without ever going more than once per `wait` duration;</span>","  <span class=\"c\">// but if you'd like to disable the execution on the leading edge, pass</span>","  <span class=\"c\">// `{leading: false}`. To disable execution on the trailing edge, ditto.</span>","  _<span class=\"k\">.</span>throttle <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">,</span> wait<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> context<span class=\"k\">,</span> args<span class=\"k\">,</span> result<span class=\"k\">;</span>","    <span class=\"k\">var</span> timeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> previous <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    options <span class=\"k\">||</span> <span class=\"k\">(</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> later <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      previous <span class=\"k\">=</span> options<span class=\"k\">.</span>leading <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> _<span class=\"k\">.</span>now<span class=\"k\">();</span>","      timeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      result <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>context<span class=\"k\">,</span> args<span class=\"k\">);</span>","      context <span class=\"k\">=</span> args <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> now <span class=\"k\">=</span> _<span class=\"k\">.</span>now<span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>previous <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>leading <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> previous <span class=\"k\">=</span> now<span class=\"k\">;</span>","      <span class=\"k\">var</span> remaining <span class=\"k\">=</span> wait <span class=\"k\">-</span> <span class=\"k\">(</span>now <span class=\"k\">-</span> previous<span class=\"k\">);</span>","      context <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      args <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>remaining <span class=\"k\">&lt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        clearTimeout<span class=\"k\">(</span>timeout<span class=\"k\">);</span>","        timeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        previous <span class=\"k\">=</span> now<span class=\"k\">;</span>","        result <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>context<span class=\"k\">,</span> args<span class=\"k\">);</span>","        context <span class=\"k\">=</span> args <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>timeout <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>trailing <span class=\"k\">!==</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        timeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span>later<span class=\"k\">,</span> remaining<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns a function, that, as long as it continues to be invoked, will not</span>","  <span class=\"c\">// be triggered. The function will be called after it stops being called for</span>","  <span class=\"c\">// N milliseconds. If `immediate` is passed, trigger the function on the</span>","  <span class=\"c\">// leading edge, instead of the trailing.</span>","  _<span class=\"k\">.</span>debounce <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">,</span> wait<span class=\"k\">,</span> immediate<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> timeout<span class=\"k\">,</span> args<span class=\"k\">,</span> context<span class=\"k\">,</span> timestamp<span class=\"k\">,</span> result<span class=\"k\">;</span>","","    <span class=\"k\">var</span> later <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> last <span class=\"k\">=</span> _<span class=\"k\">.</span>now<span class=\"k\">()</span> <span class=\"k\">-</span> timestamp<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>last <span class=\"k\">&lt;</span> wait<span class=\"k\">)</span> <span class=\"k\">{</span>","        timeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span>later<span class=\"k\">,</span> wait <span class=\"k\">-</span> last<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        timeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>immediate<span class=\"k\">)</span> <span class=\"k\">{</span>","          result <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>context<span class=\"k\">,</span> args<span class=\"k\">);</span>","          context <span class=\"k\">=</span> args <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      context <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      args <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","      timestamp <span class=\"k\">=</span> _<span class=\"k\">.</span>now<span class=\"k\">();</span>","      <span class=\"k\">var</span> callNow <span class=\"k\">=</span> immediate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>timeout<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>timeout<span class=\"k\">)</span> <span class=\"k\">{</span>","        timeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span>later<span class=\"k\">,</span> wait<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>callNow<span class=\"k\">)</span> <span class=\"k\">{</span>","        result <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>context<span class=\"k\">,</span> args<span class=\"k\">);</span>","        context <span class=\"k\">=</span> args <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns a function that will be executed at most one time, no matter how</span>","  <span class=\"c\">// often you call it. Useful for lazy initialization.</span>","  _<span class=\"k\">.</span>once <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> ran <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span> memo<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>ran<span class=\"k\">)</span> <span class=\"k\">return</span> memo<span class=\"k\">;</span>","      ran <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      memo <span class=\"k\">=</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      func <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> memo<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns the first function passed as an argument to the second,</span>","  <span class=\"c\">// allowing you to adjust arguments, run code before and after, and</span>","  <span class=\"c\">// conditionally execute the original function.</span>","  _<span class=\"k\">.</span>wrap <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">,</span> wrapper<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>partial<span class=\"k\">(</span>wrapper<span class=\"k\">,</span> func<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns a function that is the composition of a list of functions, each</span>","  <span class=\"c\">// consuming the return value of the function that follows.</span>","  _<span class=\"k\">.</span>compose <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> funcs <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> args <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> funcs<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">--)</span> <span class=\"k\">{</span>","        args <span class=\"k\">=</span> <span class=\"k\">[</span>funcs<span class=\"k\">[</span>i<span class=\"k\">].</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">)];</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns a function that will only be executed after being called N times.</span>","  _<span class=\"k\">.</span>after <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>times<span class=\"k\">,</span> func<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(--</span>times <span class=\"k\">&lt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Object Functions</span>","  <span class=\"c\">// ----------------</span>","","  <span class=\"c\">// Retrieve the names of an object's properties.</span>","  <span class=\"c\">// Delegates to **ECMAScript 5**'s native `Object.keys`</span>","  _<span class=\"k\">.</span>keys <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isObject<span class=\"k\">(</span>obj<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nativeKeys<span class=\"k\">)</span> <span class=\"k\">return</span> nativeKeys<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">var</span> keys <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span> <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>has<span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">))</span> keys<span class=\"k\">.</span>push<span class=\"k\">(</span>key<span class=\"k\">);</span>","    <span class=\"k\">return</span> keys<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Retrieve the values of an object's properties.</span>","  _<span class=\"k\">.</span>values <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> keys <span class=\"k\">=</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">var</span> length <span class=\"k\">=</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>length<span class=\"k\">);</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      values<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">[</span>keys<span class=\"k\">[</span>i<span class=\"k\">]];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Convert an object into a list of `[key, value]` pairs.</span>","  _<span class=\"k\">.</span>pairs <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> keys <span class=\"k\">=</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">var</span> length <span class=\"k\">=</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">var</span> pairs <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>length<span class=\"k\">);</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      pairs<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span>keys<span class=\"k\">[</span>i<span class=\"k\">],</span> obj<span class=\"k\">[</span>keys<span class=\"k\">[</span>i<span class=\"k\">]]];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> pairs<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Invert the keys and values of an object. The values must be serializable.</span>","  _<span class=\"k\">.</span>invert <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> keys <span class=\"k\">=</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      result<span class=\"k\">[</span>obj<span class=\"k\">[</span>keys<span class=\"k\">[</span>i<span class=\"k\">]]]</span> <span class=\"k\">=</span> keys<span class=\"k\">[</span>i<span class=\"k\">];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return a sorted list of the function names available on the object.</span>","  <span class=\"c\">// Aliased as `methods`</span>","  _<span class=\"k\">.</span>functions <span class=\"k\">=</span> _<span class=\"k\">.</span>methods <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> names <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>obj<span class=\"k\">[</span>key<span class=\"k\">]))</span> names<span class=\"k\">.</span>push<span class=\"k\">(</span>key<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> names<span class=\"k\">.</span>sort<span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Extend a given object with all the properties in passed-in object(s).</span>","  _<span class=\"k\">.</span>extend <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    each<span class=\"k\">(</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">),</span> <span class=\"k\">function</span><span class=\"k\">(</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> prop <span class=\"k\">in</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","          obj<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">=</span> source<span class=\"k\">[</span>prop<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return a copy of the object only containing the whitelisted properties.</span>","  _<span class=\"k\">.</span>pick <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> copy <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> keys <span class=\"k\">=</span> concat<span class=\"k\">.</span>apply<span class=\"k\">(</span>ArrayProto<span class=\"k\">,</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">));</span>","    each<span class=\"k\">(</span>keys<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> obj<span class=\"k\">)</span> copy<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> copy<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// Return a copy of the object without the blacklisted properties.</span>","  _<span class=\"k\">.</span>omit <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> copy <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> keys <span class=\"k\">=</span> concat<span class=\"k\">.</span>apply<span class=\"k\">(</span>ArrayProto<span class=\"k\">,</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">));</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>contains<span class=\"k\">(</span>keys<span class=\"k\">,</span> key<span class=\"k\">))</span> copy<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> copy<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Fill in a given object with default properties.</span>","  _<span class=\"k\">.</span>defaults <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    each<span class=\"k\">(</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">),</span> <span class=\"k\">function</span><span class=\"k\">(</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> prop <span class=\"k\">in</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">)</span> obj<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">=</span> source<span class=\"k\">[</span>prop<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Create a (shallow-cloned) duplicate of an object.</span>","  _<span class=\"k\">.</span>clone <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isObject<span class=\"k\">(</span>obj<span class=\"k\">))</span> <span class=\"k\">return</span> obj<span class=\"k\">;</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>isArray<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">?</span> obj<span class=\"k\">.</span>slice<span class=\"k\">()</span> <span class=\"k\">:</span> _<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> obj<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Invokes interceptor with the obj, and then returns obj.</span>","  <span class=\"c\">// The primary purpose of this method is to \"tap into\" a method chain, in</span>","  <span class=\"c\">// order to perform operations on intermediate results within the chain.</span>","  _<span class=\"k\">.</span>tap <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> interceptor<span class=\"k\">)</span> <span class=\"k\">{</span>","    interceptor<span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Internal recursive comparison function for `isEqual`.</span>","  <span class=\"k\">var</span> eq <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> aStack<span class=\"k\">,</span> bStack<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span>","    <span class=\"c\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">===</span> b<span class=\"k\">)</span> <span class=\"k\">return</span> a <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"s\">1</span> <span class=\"k\">/</span> a <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">/</span> b<span class=\"k\">;</span>","    <span class=\"c\">// A strict comparison is necessary because `null == undefined`.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> b <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> a <span class=\"k\">===</span> b<span class=\"k\">;</span>","    <span class=\"c\">// Unwrap any wrapped objects.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">instanceof</span> _<span class=\"k\">)</span> a <span class=\"k\">=</span> a<span class=\"k\">.</span>_wrapped<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>b <span class=\"k\">instanceof</span> _<span class=\"k\">)</span> b <span class=\"k\">=</span> b<span class=\"k\">.</span>_wrapped<span class=\"k\">;</span>","    <span class=\"c\">// Compare `[[Class]]` names.</span>","    <span class=\"k\">var</span> className <span class=\"k\">=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>a<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>className <span class=\"k\">!=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>b<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">switch</span> <span class=\"k\">(</span>className<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Strings, numbers, dates, and booleans are compared by value.</span>","      <span class=\"k\">case</span> <span class=\"s\">'[object String]'</span><span class=\"k\">:</span>","        <span class=\"c\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span>","        <span class=\"c\">// equivalent to `new String(\"5\")`.</span>","        <span class=\"k\">return</span> a <span class=\"k\">==</span> String<span class=\"k\">(</span>b<span class=\"k\">);</span>","      <span class=\"k\">case</span> <span class=\"s\">'[object Number]'</span><span class=\"k\">:</span>","        <span class=\"c\">// `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for</span>","        <span class=\"c\">// other numeric values.</span>","        <span class=\"k\">return</span> a <span class=\"k\">!=</span> <span class=\"k\">+</span>a <span class=\"k\">?</span> b <span class=\"k\">!=</span> <span class=\"k\">+</span>b <span class=\"k\">:</span> <span class=\"k\">(</span>a <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">/</span> a <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">/</span> b <span class=\"k\">:</span> a <span class=\"k\">==</span> <span class=\"k\">+</span>b<span class=\"k\">);</span>","      <span class=\"k\">case</span> <span class=\"s\">'[object Date]'</span><span class=\"k\">:</span>","      <span class=\"k\">case</span> <span class=\"s\">'[object Boolean]'</span><span class=\"k\">:</span>","        <span class=\"c\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span>","        <span class=\"c\">// millisecond representations. Note that invalid dates with millisecond representations</span>","        <span class=\"c\">// of `NaN` are not equivalent.</span>","        <span class=\"k\">return</span> <span class=\"k\">+</span>a <span class=\"k\">==</span> <span class=\"k\">+</span>b<span class=\"k\">;</span>","      <span class=\"c\">// RegExps are compared by their source patterns and flags.</span>","      <span class=\"k\">case</span> <span class=\"s\">'[object RegExp]'</span><span class=\"k\">:</span>","        <span class=\"k\">return</span> a<span class=\"k\">.</span>source <span class=\"k\">==</span> b<span class=\"k\">.</span>source <span class=\"k\">&amp;&amp;</span>","               a<span class=\"k\">.</span>global <span class=\"k\">==</span> b<span class=\"k\">.</span>global <span class=\"k\">&amp;&amp;</span>","               a<span class=\"k\">.</span>multiline <span class=\"k\">==</span> b<span class=\"k\">.</span>multiline <span class=\"k\">&amp;&amp;</span>","               a<span class=\"k\">.</span>ignoreCase <span class=\"k\">==</span> b<span class=\"k\">.</span>ignoreCase<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> a <span class=\"k\">!=</span> <span class=\"s\">'object'</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> b <span class=\"k\">!=</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"c\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span>","    <span class=\"c\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span>","    <span class=\"k\">var</span> length <span class=\"k\">=</span> aStack<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">while</span> <span class=\"k\">(</span>length<span class=\"k\">--)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Linear search. Performance is inversely proportional to the number of</span>","      <span class=\"c\">// unique nested structures.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>aStack<span class=\"k\">[</span>length<span class=\"k\">]</span> <span class=\"k\">==</span> a<span class=\"k\">)</span> <span class=\"k\">return</span> bStack<span class=\"k\">[</span>length<span class=\"k\">]</span> <span class=\"k\">==</span> b<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// Objects with different constructors are not equivalent, but `Object`s</span>","    <span class=\"c\">// from different frames are.</span>","    <span class=\"k\">var</span> aCtor <span class=\"k\">=</span> a<span class=\"k\">.</span>constructor<span class=\"k\">,</span> bCtor <span class=\"k\">=</span> b<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>aCtor <span class=\"k\">!==</span> bCtor <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span>_<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>aCtor<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>aCtor <span class=\"k\">instanceof</span> aCtor<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                             _<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>bCtor<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>bCtor <span class=\"k\">instanceof</span> bCtor<span class=\"k\">))</span>","                        <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span><span class=\"s\">'constructor'</span> <span class=\"k\">in</span> a <span class=\"k\">&amp;&amp;</span> <span class=\"s\">'constructor'</span> <span class=\"k\">in</span> b<span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// Add the first object to the stack of traversed objects.</span>","    aStack<span class=\"k\">.</span>push<span class=\"k\">(</span>a<span class=\"k\">);</span>","    bStack<span class=\"k\">.</span>push<span class=\"k\">(</span>b<span class=\"k\">);</span>","    <span class=\"k\">var</span> size <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"c\">// Recursively compare objects and arrays.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>className <span class=\"k\">==</span> <span class=\"s\">'[object Array]'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Compare array lengths to determine if a deep comparison is necessary.</span>","      size <span class=\"k\">=</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span>","      result <span class=\"k\">=</span> size <span class=\"k\">==</span> b<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Deep compare the contents, ignoring non-numeric properties.</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>size<span class=\"k\">--)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(!(</span>result <span class=\"k\">=</span> eq<span class=\"k\">(</span>a<span class=\"k\">[</span>size<span class=\"k\">],</span> b<span class=\"k\">[</span>size<span class=\"k\">],</span> aStack<span class=\"k\">,</span> bStack<span class=\"k\">)))</span> <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      <span class=\"c\">// Deep compare objects.</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>has<span class=\"k\">(</span>a<span class=\"k\">,</span> key<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"c\">// Count the expected number of properties.</span>","          size<span class=\"k\">++;</span>","          <span class=\"c\">// Deep compare each member.</span>","          <span class=\"k\">if</span> <span class=\"k\">(!(</span>result <span class=\"k\">=</span> _<span class=\"k\">.</span>has<span class=\"k\">(</span>b<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> eq<span class=\"k\">(</span>a<span class=\"k\">[</span>key<span class=\"k\">],</span> b<span class=\"k\">[</span>key<span class=\"k\">],</span> aStack<span class=\"k\">,</span> bStack<span class=\"k\">)))</span> <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// Ensure that both objects contain the same number of properties.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>has<span class=\"k\">(</span>b<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span>size<span class=\"k\">--))</span> <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        result <span class=\"k\">=</span> <span class=\"k\">!</span>size<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// Remove the first object from the stack of traversed objects.</span>","    aStack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","    bStack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Perform a deep comparison to check if two objects are equal.</span>","  _<span class=\"k\">.</span>isEqual <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> eq<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">[]);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given array, string, or object empty?</span>","  <span class=\"c\">// An \"empty\" object has no enumerable own-properties.</span>","  _<span class=\"k\">.</span>isEmpty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>isArray<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">||</span> _<span class=\"k\">.</span>isString<span class=\"k\">(</span>obj<span class=\"k\">))</span> <span class=\"k\">return</span> obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span> <span class=\"k\">if</span> <span class=\"k\">(</span>_<span class=\"k\">.</span>has<span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given value a DOM element?</span>","  _<span class=\"k\">.</span>isElement <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">!!(</span>obj <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given value an array?</span>","  <span class=\"c\">// Delegates to ECMA5's native Array.isArray</span>","  _<span class=\"k\">.</span>isArray <span class=\"k\">=</span> nativeIsArray <span class=\"k\">||</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'[object Array]'</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given variable an object?</span>","  _<span class=\"k\">.</span>isObject <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> obj <span class=\"k\">===</span> Object<span class=\"k\">(</span>obj<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.</span>","  each<span class=\"k\">([</span><span class=\"s\">'Arguments'</span><span class=\"k\">,</span> <span class=\"s\">'Function'</span><span class=\"k\">,</span> <span class=\"s\">'String'</span><span class=\"k\">,</span> <span class=\"s\">'Number'</span><span class=\"k\">,</span> <span class=\"s\">'Date'</span><span class=\"k\">,</span> <span class=\"s\">'RegExp'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","    _<span class=\"k\">[</span><span class=\"s\">'is'</span> <span class=\"k\">+</span> name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'[object '</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">']'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Define a fallback version of the method in browsers (ahem, IE), where</span>","  <span class=\"c\">// there isn't any inspectable \"Arguments\" type.</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>_<span class=\"k\">.</span>isArguments<span class=\"k\">(</span>arguments<span class=\"k\">))</span> <span class=\"k\">{</span>","    _<span class=\"k\">.</span>isArguments <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">!!(</span>obj <span class=\"k\">&amp;&amp;</span> _<span class=\"k\">.</span>has<span class=\"k\">(</span>obj<span class=\"k\">,</span> <span class=\"s\">'callee'</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// Optimize `isFunction` if appropriate.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span><span class=\"s\">/./</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    _<span class=\"k\">.</span>isFunction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// Is a given object a finite number?</span>","  _<span class=\"k\">.</span>isFinite <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> isFinite<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>isNaN<span class=\"k\">(</span>parseFloat<span class=\"k\">(</span>obj<span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is the given value `NaN`? (NaN is the only number which does not equal itself).</span>","  _<span class=\"k\">.</span>isNaN <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>isNumber<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> obj <span class=\"k\">!=</span> <span class=\"k\">+</span>obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given value a boolean?</span>","  _<span class=\"k\">.</span>isBoolean <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> obj <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">||</span> obj <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">||</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'[object Boolean]'</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given value equal to null?</span>","  _<span class=\"k\">.</span>isNull <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Is a given variable undefined?</span>","  _<span class=\"k\">.</span>isUndefined <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> obj <span class=\"k\">===</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Shortcut function for checking if an object has a given property directly</span>","  <span class=\"c\">// on itself (in other words, not on a prototype).</span>","  _<span class=\"k\">.</span>has <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> hasOwnProperty<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Utility Functions</span>","  <span class=\"c\">// -----------------</span>","","  <span class=\"c\">// Run Underscore.js in *noConflict* mode, returning the `_` variable to its</span>","  <span class=\"c\">// previous owner. Returns a reference to the Underscore object.</span>","  _<span class=\"k\">.</span>noConflict <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    root<span class=\"k\">.</span>_ <span class=\"k\">=</span> previousUnderscore<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Keep the identity function around for default iterators.</span>","  _<span class=\"k\">.</span>identity <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> value<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  _<span class=\"k\">.</span>constant <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  _<span class=\"k\">.</span>property <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> obj<span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Returns a predicate for checking whether an object has a given set of `key:value` pairs.</span>","  _<span class=\"k\">.</span>matches <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">===</span> attrs<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">//avoid comparing an object to itself.</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>attrs<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">!==</span> obj<span class=\"k\">[</span>key<span class=\"k\">])</span>","          <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Run a function **n** times.</span>","  _<span class=\"k\">.</span>times <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>n<span class=\"k\">,</span> iterator<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> accum <span class=\"k\">=</span> Array<span class=\"k\">(</span>Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> n<span class=\"k\">));</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> n<span class=\"k\">;</span> i<span class=\"k\">++)</span> accum<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> iterator<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">,</span> i<span class=\"k\">);</span>","    <span class=\"k\">return</span> accum<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Return a random integer between min and max (inclusive).</span>","  _<span class=\"k\">.</span>random <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>min<span class=\"k\">,</span> max<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>max <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      max <span class=\"k\">=</span> min<span class=\"k\">;</span>","      min <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> min <span class=\"k\">+</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"k\">(</span>max <span class=\"k\">-</span> min <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">));</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// A (possibly faster) way to get the current timestamp as an integer.</span>","  _<span class=\"k\">.</span>now <span class=\"k\">=</span> Date<span class=\"k\">.</span>now <span class=\"k\">||</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">();</span> <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// List of HTML entities for escaping.</span>","  <span class=\"k\">var</span> entityMap <span class=\"k\">=</span> <span class=\"k\">{</span>","    escape<span class=\"k\">:</span> <span class=\"k\">{</span>","      <span class=\"s\">'&amp;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;amp;'</span><span class=\"k\">,</span>","      <span class=\"s\">'&lt;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;lt;'</span><span class=\"k\">,</span>","      <span class=\"s\">'&gt;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;gt;'</span><span class=\"k\">,</span>","      <span class=\"s\">'\"'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;quot;'</span><span class=\"k\">,</span>","      <span class=\"s\">\"'\"</span><span class=\"k\">:</span> <span class=\"s\">'&amp;#x27;'</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","  entityMap<span class=\"k\">.</span>unescape <span class=\"k\">=</span> _<span class=\"k\">.</span>invert<span class=\"k\">(</span>entityMap<span class=\"k\">.</span>escape<span class=\"k\">);</span>","","  <span class=\"c\">// Regexes containing the keys and values listed immediately above.</span>","  <span class=\"k\">var</span> entityRegexes <span class=\"k\">=</span> <span class=\"k\">{</span>","    escape<span class=\"k\">:</span>   <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'['</span> <span class=\"k\">+</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>entityMap<span class=\"k\">.</span>escape<span class=\"k\">).</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">']'</span><span class=\"k\">,</span> <span class=\"s\">'g'</span><span class=\"k\">),</span>","    unescape<span class=\"k\">:</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'('</span> <span class=\"k\">+</span> _<span class=\"k\">.</span>keys<span class=\"k\">(</span>entityMap<span class=\"k\">.</span>unescape<span class=\"k\">).</span>join<span class=\"k\">(</span><span class=\"s\">'|'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">')'</span><span class=\"k\">,</span> <span class=\"s\">'g'</span><span class=\"k\">)</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Functions for escaping and unescaping strings to/from HTML interpolation.</span>","  _<span class=\"k\">.</span>each<span class=\"k\">([</span><span class=\"s\">'escape'</span><span class=\"k\">,</span> <span class=\"s\">'unescape'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>method<span class=\"k\">)</span> <span class=\"k\">{</span>","    _<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>string <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"s\">''</span> <span class=\"k\">+</span> string<span class=\"k\">).</span>replace<span class=\"k\">(</span>entityRegexes<span class=\"k\">[</span>method<span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>match<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> entityMap<span class=\"k\">[</span>method<span class=\"k\">][</span>match<span class=\"k\">];</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// If the value of the named `property` is a function then invoke it with the</span>","  <span class=\"c\">// `object` as context; otherwise, return it.</span>","  _<span class=\"k\">.</span>result <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>object<span class=\"k\">,</span> property<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>object <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> value <span class=\"k\">=</span> object<span class=\"k\">[</span>property<span class=\"k\">];</span>","    <span class=\"k\">return</span> _<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">?</span> value<span class=\"k\">.</span>call<span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Add your own custom functions to the Underscore object.</span>","  _<span class=\"k\">.</span>mixin <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    each<span class=\"k\">(</span>_<span class=\"k\">.</span>functions<span class=\"k\">(</span>obj<span class=\"k\">),</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> func <span class=\"k\">=</span> _<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">[</span>name<span class=\"k\">];</span>","      _<span class=\"k\">.</span>prototype<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_wrapped<span class=\"k\">];</span>","        push<span class=\"k\">.</span>apply<span class=\"k\">(</span>args<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","        <span class=\"k\">return</span> result<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> func<span class=\"k\">.</span>apply<span class=\"k\">(</span>_<span class=\"k\">,</span> args<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Generate a unique integer id (unique within the entire client session).</span>","  <span class=\"c\">// Useful for temporary DOM ids.</span>","  <span class=\"k\">var</span> idCounter <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  _<span class=\"k\">.</span>uniqueId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>prefix<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> id <span class=\"k\">=</span> <span class=\"k\">++</span>idCounter <span class=\"k\">+</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> prefix <span class=\"k\">?</span> prefix <span class=\"k\">+</span> id <span class=\"k\">:</span> id<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// By default, Underscore uses ERB-style template delimiters, change the</span>","  <span class=\"c\">// following template settings to use alternative delimiters.</span>","  _<span class=\"k\">.</span>templateSettings <span class=\"k\">=</span> <span class=\"k\">{</span>","    evaluate    <span class=\"k\">:</span> <span class=\"s\">/&lt;%([\\s\\S]+?)%&gt;/g</span><span class=\"k\">,</span>","    interpolate <span class=\"k\">:</span> <span class=\"s\">/&lt;%=([\\s\\S]+?)%&gt;/g</span><span class=\"k\">,</span>","    escape      <span class=\"k\">:</span> <span class=\"s\">/&lt;%-([\\s\\S]+?)%&gt;/g</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// When customizing `templateSettings`, if you don't want to define an</span>","  <span class=\"c\">// interpolation, evaluation or escaping regex, we need one that is</span>","  <span class=\"c\">// guaranteed not to match.</span>","  <span class=\"k\">var</span> noMatch <span class=\"k\">=</span> <span class=\"s\">/(.)^/</span><span class=\"k\">;</span>","","  <span class=\"c\">// Certain characters need to be escaped so that they can be put into a</span>","  <span class=\"c\">// string literal.</span>","  <span class=\"k\">var</span> escapes <span class=\"k\">=</span> <span class=\"k\">{</span>","    <span class=\"s\">\"'\"</span><span class=\"k\">:</span>      <span class=\"s\">\"'\"</span><span class=\"k\">,</span>","    <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">'</span><span class=\"k\">:</span>     <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">'</span><span class=\"k\">,</span>","    <span class=\"s\">'</span><span class=\"t\">\\r</span><span class=\"s\">'</span><span class=\"k\">:</span>     <span class=\"s\">'r'</span><span class=\"k\">,</span>","    <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">:</span>     <span class=\"s\">'n'</span><span class=\"k\">,</span>","    <span class=\"s\">'</span><span class=\"t\">\\t</span><span class=\"s\">'</span><span class=\"k\">:</span>     <span class=\"s\">'t'</span><span class=\"k\">,</span>","    <span class=\"s\">'</span><span class=\"t\">\\u</span><span class=\"s\">2028'</span><span class=\"k\">:</span> <span class=\"s\">'u2028'</span><span class=\"k\">,</span>","    <span class=\"s\">'</span><span class=\"t\">\\u</span><span class=\"s\">2029'</span><span class=\"k\">:</span> <span class=\"s\">'u2029'</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> escaper <span class=\"k\">=</span> <span class=\"s\">/\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g</span><span class=\"k\">;</span>","","  <span class=\"c\">// JavaScript micro-templating, similar to John Resig's implementation.</span>","  <span class=\"c\">// Underscore templating handles arbitrary delimiters, preserves whitespace,</span>","  <span class=\"c\">// and correctly escapes quotes within interpolated code.</span>","  _<span class=\"k\">.</span>template <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>text<span class=\"k\">,</span> data<span class=\"k\">,</span> settings<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> render<span class=\"k\">;</span>","    settings <span class=\"k\">=</span> _<span class=\"k\">.</span>defaults<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> settings<span class=\"k\">,</span> _<span class=\"k\">.</span>templateSettings<span class=\"k\">);</span>","","    <span class=\"c\">// Combine delimiters into one regular expression via alternation.</span>","    <span class=\"k\">var</span> matcher <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">([</span>","      <span class=\"k\">(</span>settings<span class=\"k\">.</span>escape <span class=\"k\">||</span> noMatch<span class=\"k\">).</span>source<span class=\"k\">,</span>","      <span class=\"k\">(</span>settings<span class=\"k\">.</span>interpolate <span class=\"k\">||</span> noMatch<span class=\"k\">).</span>source<span class=\"k\">,</span>","      <span class=\"k\">(</span>settings<span class=\"k\">.</span>evaluate <span class=\"k\">||</span> noMatch<span class=\"k\">).</span>source","    <span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">'|'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'|$'</span><span class=\"k\">,</span> <span class=\"s\">'g'</span><span class=\"k\">);</span>","","    <span class=\"c\">// Compile the template source, escaping string literals appropriately.</span>","    <span class=\"k\">var</span> index <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> source <span class=\"k\">=</span> <span class=\"s\">\"__p+='\"</span><span class=\"k\">;</span>","    text<span class=\"k\">.</span>replace<span class=\"k\">(</span>matcher<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>match<span class=\"k\">,</span> escape<span class=\"k\">,</span> interpolate<span class=\"k\">,</span> evaluate<span class=\"k\">,</span> offset<span class=\"k\">)</span> <span class=\"k\">{</span>","      source <span class=\"k\">+=</span> text<span class=\"k\">.</span>slice<span class=\"k\">(</span>index<span class=\"k\">,</span> offset<span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span>escaper<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>match<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">'</span> <span class=\"k\">+</span> escapes<span class=\"k\">[</span>match<span class=\"k\">];</span> <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>escape<span class=\"k\">)</span> <span class=\"k\">{</span>","        source <span class=\"k\">+=</span> <span class=\"s\">\"'+</span><span class=\"t\">\\n</span><span class=\"s\">((__t=(\"</span> <span class=\"k\">+</span> escape <span class=\"k\">+</span> <span class=\"s\">\"))==null?'':_.escape(__t))+</span><span class=\"t\">\\n</span><span class=\"s\">'\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>interpolate<span class=\"k\">)</span> <span class=\"k\">{</span>","        source <span class=\"k\">+=</span> <span class=\"s\">\"'+</span><span class=\"t\">\\n</span><span class=\"s\">((__t=(\"</span> <span class=\"k\">+</span> interpolate <span class=\"k\">+</span> <span class=\"s\">\"))==null?'':__t)+</span><span class=\"t\">\\n</span><span class=\"s\">'\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>evaluate<span class=\"k\">)</span> <span class=\"k\">{</span>","        source <span class=\"k\">+=</span> <span class=\"s\">\"';</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> evaluate <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">__p+='\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      index <span class=\"k\">=</span> offset <span class=\"k\">+</span> match<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">return</span> match<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    source <span class=\"k\">+=</span> <span class=\"s\">\"';</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">;</span>","","    <span class=\"c\">// If a variable is not specified, place data values in local scope.</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>settings<span class=\"k\">.</span>variable<span class=\"k\">)</span> source <span class=\"k\">=</span> <span class=\"s\">'with(obj||{}){</span><span class=\"t\">\\n</span><span class=\"s\">'</span> <span class=\"k\">+</span> source <span class=\"k\">+</span> <span class=\"s\">'}</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","","    source <span class=\"k\">=</span> <span class=\"s\">\"var __t,__p='',__j=Array.prototype.join,\"</span> <span class=\"k\">+</span>","      <span class=\"s\">\"print=function(){__p+=__j.call(arguments,'');};</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span>","      source <span class=\"k\">+</span> <span class=\"s\">\"return __p;</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">;</span>","","    <span class=\"k\">try</span> <span class=\"k\">{</span>","      render <span class=\"k\">=</span> <span class=\"k\">new</span> Function<span class=\"k\">(</span>settings<span class=\"k\">.</span>variable <span class=\"k\">||</span> <span class=\"s\">'obj'</span><span class=\"k\">,</span> <span class=\"s\">'_'</span><span class=\"k\">,</span> source<span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","      e<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","      <span class=\"k\">throw</span> e<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">return</span> render<span class=\"k\">(</span>data<span class=\"k\">,</span> _<span class=\"k\">);</span>","    <span class=\"k\">var</span> template <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> render<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> data<span class=\"k\">,</span> _<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// Provide the compiled function source as a convenience for precompilation.</span>","    template<span class=\"k\">.</span>source <span class=\"k\">=</span> <span class=\"s\">'function('</span> <span class=\"k\">+</span> <span class=\"k\">(</span>settings<span class=\"k\">.</span>variable <span class=\"k\">||</span> <span class=\"s\">'obj'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'){</span><span class=\"t\">\\n</span><span class=\"s\">'</span> <span class=\"k\">+</span> source <span class=\"k\">+</span> <span class=\"s\">'}'</span><span class=\"k\">;</span>","","    <span class=\"k\">return</span> template<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Add a \"chain\" function, which will delegate to the wrapper.</span>","  _<span class=\"k\">.</span>chain <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> _<span class=\"k\">(</span>obj<span class=\"k\">).</span>chain<span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// OOP</span>","  <span class=\"c\">// ---------------</span>","  <span class=\"c\">// If Underscore is called as a function, it returns a wrapped object that</span>","  <span class=\"c\">// can be used OO-style. This wrapper holds altered versions of all the</span>","  <span class=\"c\">// underscore functions. Wrapped objects may be chained.</span>","","  <span class=\"c\">// Helper function to continue chaining intermediate results.</span>","  <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_chain <span class=\"k\">?</span> _<span class=\"k\">(</span>obj<span class=\"k\">).</span>chain<span class=\"k\">()</span> <span class=\"k\">:</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Add all of the Underscore functions to the wrapper object.</span>","  _<span class=\"k\">.</span>mixin<span class=\"k\">(</span>_<span class=\"k\">);</span>","","  <span class=\"c\">// Add all mutator Array functions to the wrapper.</span>","  each<span class=\"k\">([</span><span class=\"s\">'pop'</span><span class=\"k\">,</span> <span class=\"s\">'push'</span><span class=\"k\">,</span> <span class=\"s\">'reverse'</span><span class=\"k\">,</span> <span class=\"s\">'shift'</span><span class=\"k\">,</span> <span class=\"s\">'sort'</span><span class=\"k\">,</span> <span class=\"s\">'splice'</span><span class=\"k\">,</span> <span class=\"s\">'unshift'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> method <span class=\"k\">=</span> ArrayProto<span class=\"k\">[</span>name<span class=\"k\">];</span>","    _<span class=\"k\">.</span>prototype<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> obj <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_wrapped<span class=\"k\">;</span>","      method<span class=\"k\">.</span>apply<span class=\"k\">(</span>obj<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">((</span>name <span class=\"k\">==</span> <span class=\"s\">'shift'</span> <span class=\"k\">||</span> name <span class=\"k\">==</span> <span class=\"s\">'splice'</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">delete</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","      <span class=\"k\">return</span> result<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Add all accessor Array functions to the wrapper.</span>","  each<span class=\"k\">([</span><span class=\"s\">'concat'</span><span class=\"k\">,</span> <span class=\"s\">'join'</span><span class=\"k\">,</span> <span class=\"s\">'slice'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> method <span class=\"k\">=</span> ArrayProto<span class=\"k\">[</span>name<span class=\"k\">];</span>","    _<span class=\"k\">.</span>prototype<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> result<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> method<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_wrapped<span class=\"k\">,</span> arguments<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  _<span class=\"k\">.</span>extend<span class=\"k\">(</span>_<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">{</span>","","    <span class=\"c\">// Start chaining a wrapped Underscore object.</span>","    chain<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_chain <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// Extracts the result from a wrapped and chained object.</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_wrapped<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// AMD registration happens at the end for compatibility with AMD loaders</span>","  <span class=\"c\">// that may not enforce next-turn semantics on modules. Even though general</span>","  <span class=\"c\">// practice for AMD registration is to be anonymous, underscore registers</span>","  <span class=\"c\">// as a named module because, like jQuery, it is a base library that is</span>","  <span class=\"c\">// popular enough to be bundled in a third party lib, but not be part of</span>","  <span class=\"c\">// an AMD load request. Those cases could generate an error when an</span>","  <span class=\"c\">// anonymous define() is called outside of a loader request.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> define <span class=\"k\">===</span> <span class=\"s\">'function'</span> <span class=\"k\">&amp;&amp;</span> define<span class=\"k\">.</span>amd<span class=\"k\">)</span> <span class=\"k\">{</span>","    define<span class=\"k\">(</span><span class=\"s\">'underscore'</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> _<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">).</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>"];
_$jscoverage['js/lib/underscore.js'][6]++;
(function () {
  _$jscoverage['js/lib/underscore.js'][12]++;
  var root = this;
  _$jscoverage['js/lib/underscore.js'][15]++;
  var previousUnderscore = root._;
  _$jscoverage['js/lib/underscore.js'][18]++;
  var breaker = {};
  _$jscoverage['js/lib/underscore.js'][21]++;
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
  _$jscoverage['js/lib/underscore.js'][24]++;
  var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
  _$jscoverage['js/lib/underscore.js'][33]++;
  var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
  _$jscoverage['js/lib/underscore.js'][48]++;
  var _ = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][49]++;
  if ((obj instanceof _)) {
    _$jscoverage['js/lib/underscore.js'][49]++;
    return obj;
  }
  _$jscoverage['js/lib/underscore.js'][50]++;
  if ((! (this instanceof _))) {
    _$jscoverage['js/lib/underscore.js'][50]++;
    return new _(obj);
  }
  _$jscoverage['js/lib/underscore.js'][51]++;
  this._wrapped = obj;
});
  _$jscoverage['js/lib/underscore.js'][58]++;
  if (((typeof exports) !== "undefined")) {
    _$jscoverage['js/lib/underscore.js'][59]++;
    if ((((typeof module) !== "undefined") && module.exports)) {
      _$jscoverage['js/lib/underscore.js'][60]++;
      exports = (module.exports = _);
    }
    _$jscoverage['js/lib/underscore.js'][62]++;
    exports._ = _;
  }
  else {
    _$jscoverage['js/lib/underscore.js'][64]++;
    root._ = _;
  }
  _$jscoverage['js/lib/underscore.js'][68]++;
  _.VERSION = "1.6.0";
  _$jscoverage['js/lib/underscore.js'][76]++;
  var each = (_.each = (_.forEach = (function (obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][77]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][77]++;
    return obj;
  }
  _$jscoverage['js/lib/underscore.js'][78]++;
  if ((nativeForEach && (obj.forEach === nativeForEach))) {
    _$jscoverage['js/lib/underscore.js'][79]++;
    obj.forEach(iterator, context);
  }
  else {
    _$jscoverage['js/lib/underscore.js'][80]++;
    if ((obj.length === (+ obj.length))) {
      _$jscoverage['js/lib/underscore.js'][81]++;
      for (var i = 0, length = obj.length; (i < length); (i++)) {
        _$jscoverage['js/lib/underscore.js'][82]++;
        if ((iterator.call(context, obj[i], i, obj) === breaker)) {
          _$jscoverage['js/lib/underscore.js'][82]++;
          return;
        }
}
    }
    else {
      _$jscoverage['js/lib/underscore.js'][85]++;
      var keys = _.keys(obj);
      _$jscoverage['js/lib/underscore.js'][86]++;
      for (var i = 0, length = keys.length; (i < length); (i++)) {
        _$jscoverage['js/lib/underscore.js'][87]++;
        if ((iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)) {
          _$jscoverage['js/lib/underscore.js'][87]++;
          return;
        }
}
    }
  }
  _$jscoverage['js/lib/underscore.js'][90]++;
  return obj;
})));
  _$jscoverage['js/lib/underscore.js'][95]++;
  _.map = (_.collect = (function (obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][96]++;
  var results = [];
  _$jscoverage['js/lib/underscore.js'][97]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][97]++;
    return results;
  }
  _$jscoverage['js/lib/underscore.js'][98]++;
  if ((nativeMap && (obj.map === nativeMap))) {
    _$jscoverage['js/lib/underscore.js'][98]++;
    return obj.map(iterator, context);
  }
  _$jscoverage['js/lib/underscore.js'][99]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][100]++;
  results.push(iterator.call(context, value, index, list));
}));
  _$jscoverage['js/lib/underscore.js'][102]++;
  return results;
}));
  _$jscoverage['js/lib/underscore.js'][105]++;
  var reduceError = "Reduce of empty array with no initial value";
  _$jscoverage['js/lib/underscore.js'][109]++;
  _.reduce = (_.foldl = (_.inject = (function (obj, iterator, memo, context) {
  _$jscoverage['js/lib/underscore.js'][110]++;
  var initial = (arguments.length > 2);
  _$jscoverage['js/lib/underscore.js'][111]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][111]++;
    obj = [];
  }
  _$jscoverage['js/lib/underscore.js'][112]++;
  if ((nativeReduce && (obj.reduce === nativeReduce))) {
    _$jscoverage['js/lib/underscore.js'][113]++;
    if (context) {
      _$jscoverage['js/lib/underscore.js'][113]++;
      iterator = _.bind(iterator, context);
    }
    _$jscoverage['js/lib/underscore.js'][114]++;
    return (initial? obj.reduce(iterator, memo): obj.reduce(iterator));
  }
  _$jscoverage['js/lib/underscore.js'][116]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][117]++;
  if ((! initial)) {
    _$jscoverage['js/lib/underscore.js'][118]++;
    memo = value;
    _$jscoverage['js/lib/underscore.js'][119]++;
    initial = true;
  }
  else {
    _$jscoverage['js/lib/underscore.js'][121]++;
    memo = iterator.call(context, memo, value, index, list);
  }
}));
  _$jscoverage['js/lib/underscore.js'][124]++;
  if ((! initial)) {
    _$jscoverage['js/lib/underscore.js'][124]++;
    throw new TypeError(reduceError);
  }
  _$jscoverage['js/lib/underscore.js'][125]++;
  return memo;
})));
  _$jscoverage['js/lib/underscore.js'][130]++;
  _.reduceRight = (_.foldr = (function (obj, iterator, memo, context) {
  _$jscoverage['js/lib/underscore.js'][131]++;
  var initial = (arguments.length > 2);
  _$jscoverage['js/lib/underscore.js'][132]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][132]++;
    obj = [];
  }
  _$jscoverage['js/lib/underscore.js'][133]++;
  if ((nativeReduceRight && (obj.reduceRight === nativeReduceRight))) {
    _$jscoverage['js/lib/underscore.js'][134]++;
    if (context) {
      _$jscoverage['js/lib/underscore.js'][134]++;
      iterator = _.bind(iterator, context);
    }
    _$jscoverage['js/lib/underscore.js'][135]++;
    return (initial? obj.reduceRight(iterator, memo): obj.reduceRight(iterator));
  }
  _$jscoverage['js/lib/underscore.js'][137]++;
  var length = obj.length;
  _$jscoverage['js/lib/underscore.js'][138]++;
  if ((length !== (+ length))) {
    _$jscoverage['js/lib/underscore.js'][139]++;
    var keys = _.keys(obj);
    _$jscoverage['js/lib/underscore.js'][140]++;
    length = keys.length;
  }
  _$jscoverage['js/lib/underscore.js'][142]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][143]++;
  index = (keys? keys[(--length)]: (--length));
  _$jscoverage['js/lib/underscore.js'][144]++;
  if ((! initial)) {
    _$jscoverage['js/lib/underscore.js'][145]++;
    memo = obj[index];
    _$jscoverage['js/lib/underscore.js'][146]++;
    initial = true;
  }
  else {
    _$jscoverage['js/lib/underscore.js'][148]++;
    memo = iterator.call(context, memo, obj[index], index, list);
  }
}));
  _$jscoverage['js/lib/underscore.js'][151]++;
  if ((! initial)) {
    _$jscoverage['js/lib/underscore.js'][151]++;
    throw new TypeError(reduceError);
  }
  _$jscoverage['js/lib/underscore.js'][152]++;
  return memo;
}));
  _$jscoverage['js/lib/underscore.js'][156]++;
  _.find = (_.detect = (function (obj, predicate, context) {
  _$jscoverage['js/lib/underscore.js'][157]++;
  var result;
  _$jscoverage['js/lib/underscore.js'][158]++;
  any(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][159]++;
  if (predicate.call(context, value, index, list)) {
    _$jscoverage['js/lib/underscore.js'][160]++;
    result = value;
    _$jscoverage['js/lib/underscore.js'][161]++;
    return true;
  }
}));
  _$jscoverage['js/lib/underscore.js'][164]++;
  return result;
}));
  _$jscoverage['js/lib/underscore.js'][170]++;
  _.filter = (_.select = (function (obj, predicate, context) {
  _$jscoverage['js/lib/underscore.js'][171]++;
  var results = [];
  _$jscoverage['js/lib/underscore.js'][172]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][172]++;
    return results;
  }
  _$jscoverage['js/lib/underscore.js'][173]++;
  if ((nativeFilter && (obj.filter === nativeFilter))) {
    _$jscoverage['js/lib/underscore.js'][173]++;
    return obj.filter(predicate, context);
  }
  _$jscoverage['js/lib/underscore.js'][174]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][175]++;
  if (predicate.call(context, value, index, list)) {
    _$jscoverage['js/lib/underscore.js'][175]++;
    results.push(value);
  }
}));
  _$jscoverage['js/lib/underscore.js'][177]++;
  return results;
}));
  _$jscoverage['js/lib/underscore.js'][181]++;
  _.reject = (function (obj, predicate, context) {
  _$jscoverage['js/lib/underscore.js'][182]++;
  return _.filter(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][183]++;
  return (! predicate.call(context, value, index, list));
}), context);
});
  _$jscoverage['js/lib/underscore.js'][190]++;
  _.every = (_.all = (function (obj, predicate, context) {
  _$jscoverage['js/lib/underscore.js'][191]++;
  (predicate || (predicate = _.identity));
  _$jscoverage['js/lib/underscore.js'][192]++;
  var result = true;
  _$jscoverage['js/lib/underscore.js'][193]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][193]++;
    return result;
  }
  _$jscoverage['js/lib/underscore.js'][194]++;
  if ((nativeEvery && (obj.every === nativeEvery))) {
    _$jscoverage['js/lib/underscore.js'][194]++;
    return obj.every(predicate, context);
  }
  _$jscoverage['js/lib/underscore.js'][195]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][196]++;
  if ((! (result = (result && predicate.call(context, value, index, list))))) {
    _$jscoverage['js/lib/underscore.js'][196]++;
    return breaker;
  }
}));
  _$jscoverage['js/lib/underscore.js'][198]++;
  return (! (! result));
}));
  _$jscoverage['js/lib/underscore.js'][204]++;
  var any = (_.some = (_.any = (function (obj, predicate, context) {
  _$jscoverage['js/lib/underscore.js'][205]++;
  (predicate || (predicate = _.identity));
  _$jscoverage['js/lib/underscore.js'][206]++;
  var result = false;
  _$jscoverage['js/lib/underscore.js'][207]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][207]++;
    return result;
  }
  _$jscoverage['js/lib/underscore.js'][208]++;
  if ((nativeSome && (obj.some === nativeSome))) {
    _$jscoverage['js/lib/underscore.js'][208]++;
    return obj.some(predicate, context);
  }
  _$jscoverage['js/lib/underscore.js'][209]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][210]++;
  if ((result || (result = predicate.call(context, value, index, list)))) {
    _$jscoverage['js/lib/underscore.js'][210]++;
    return breaker;
  }
}));
  _$jscoverage['js/lib/underscore.js'][212]++;
  return (! (! result));
})));
  _$jscoverage['js/lib/underscore.js'][217]++;
  _.contains = (_.include = (function (obj, target) {
  _$jscoverage['js/lib/underscore.js'][218]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][218]++;
    return false;
  }
  _$jscoverage['js/lib/underscore.js'][219]++;
  if ((nativeIndexOf && (obj.indexOf === nativeIndexOf))) {
    _$jscoverage['js/lib/underscore.js'][219]++;
    return (obj.indexOf(target) != -1);
  }
  _$jscoverage['js/lib/underscore.js'][220]++;
  return any(obj, (function (value) {
  _$jscoverage['js/lib/underscore.js'][221]++;
  return (value === target);
}));
}));
  _$jscoverage['js/lib/underscore.js'][226]++;
  _.invoke = (function (obj, method) {
  _$jscoverage['js/lib/underscore.js'][227]++;
  var args = slice.call(arguments, 2);
  _$jscoverage['js/lib/underscore.js'][228]++;
  var isFunc = _.isFunction(method);
  _$jscoverage['js/lib/underscore.js'][229]++;
  return _.map(obj, (function (value) {
  _$jscoverage['js/lib/underscore.js'][230]++;
  return (isFunc? method: value[method]).apply(value, args);
}));
});
  _$jscoverage['js/lib/underscore.js'][235]++;
  _.pluck = (function (obj, key) {
  _$jscoverage['js/lib/underscore.js'][236]++;
  return _.map(obj, _.property(key));
});
  _$jscoverage['js/lib/underscore.js'][241]++;
  _.where = (function (obj, attrs) {
  _$jscoverage['js/lib/underscore.js'][242]++;
  return _.filter(obj, _.matches(attrs));
});
  _$jscoverage['js/lib/underscore.js'][247]++;
  _.findWhere = (function (obj, attrs) {
  _$jscoverage['js/lib/underscore.js'][248]++;
  return _.find(obj, _.matches(attrs));
});
  _$jscoverage['js/lib/underscore.js'][254]++;
  _.max = (function (obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][255]++;
  if (((! iterator) && _.isArray(obj) && (obj[0] === (+ obj[0])) && (obj.length < 65535))) {
    _$jscoverage['js/lib/underscore.js'][256]++;
    return Math.max.apply(Math, obj);
  }
  _$jscoverage['js/lib/underscore.js'][258]++;
  var result = (- Infinity), lastComputed = (- Infinity);
  _$jscoverage['js/lib/underscore.js'][259]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][260]++;
  var computed = (iterator? iterator.call(context, value, index, list): value);
  _$jscoverage['js/lib/underscore.js'][261]++;
  if ((computed > lastComputed)) {
    _$jscoverage['js/lib/underscore.js'][262]++;
    result = value;
    _$jscoverage['js/lib/underscore.js'][263]++;
    lastComputed = computed;
  }
}));
  _$jscoverage['js/lib/underscore.js'][266]++;
  return result;
});
  _$jscoverage['js/lib/underscore.js'][270]++;
  _.min = (function (obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][271]++;
  if (((! iterator) && _.isArray(obj) && (obj[0] === (+ obj[0])) && (obj.length < 65535))) {
    _$jscoverage['js/lib/underscore.js'][272]++;
    return Math.min.apply(Math, obj);
  }
  _$jscoverage['js/lib/underscore.js'][274]++;
  var result = Infinity, lastComputed = Infinity;
  _$jscoverage['js/lib/underscore.js'][275]++;
  each(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][276]++;
  var computed = (iterator? iterator.call(context, value, index, list): value);
  _$jscoverage['js/lib/underscore.js'][277]++;
  if ((computed < lastComputed)) {
    _$jscoverage['js/lib/underscore.js'][278]++;
    result = value;
    _$jscoverage['js/lib/underscore.js'][279]++;
    lastComputed = computed;
  }
}));
  _$jscoverage['js/lib/underscore.js'][282]++;
  return result;
});
  _$jscoverage['js/lib/underscore.js'][287]++;
  _.shuffle = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][288]++;
  var rand;
  _$jscoverage['js/lib/underscore.js'][289]++;
  var index = 0;
  _$jscoverage['js/lib/underscore.js'][290]++;
  var shuffled = [];
  _$jscoverage['js/lib/underscore.js'][291]++;
  each(obj, (function (value) {
  _$jscoverage['js/lib/underscore.js'][292]++;
  rand = _.random((index++));
  _$jscoverage['js/lib/underscore.js'][293]++;
  shuffled[(index - 1)] = shuffled[rand];
  _$jscoverage['js/lib/underscore.js'][294]++;
  shuffled[rand] = value;
}));
  _$jscoverage['js/lib/underscore.js'][296]++;
  return shuffled;
});
  _$jscoverage['js/lib/underscore.js'][302]++;
  _.sample = (function (obj, n, guard) {
  _$jscoverage['js/lib/underscore.js'][303]++;
  if (((n == null) || guard)) {
    _$jscoverage['js/lib/underscore.js'][304]++;
    if ((obj.length !== (+ obj.length))) {
      _$jscoverage['js/lib/underscore.js'][304]++;
      obj = _.values(obj);
    }
    _$jscoverage['js/lib/underscore.js'][305]++;
    return obj[_.random((obj.length - 1))];
  }
  _$jscoverage['js/lib/underscore.js'][307]++;
  return _.shuffle(obj).slice(0, Math.max(0, n));
});
  _$jscoverage['js/lib/underscore.js'][311]++;
  var lookupIterator = (function (value) {
  _$jscoverage['js/lib/underscore.js'][312]++;
  if ((value == null)) {
    _$jscoverage['js/lib/underscore.js'][312]++;
    return _.identity;
  }
  _$jscoverage['js/lib/underscore.js'][313]++;
  if (_.isFunction(value)) {
    _$jscoverage['js/lib/underscore.js'][313]++;
    return value;
  }
  _$jscoverage['js/lib/underscore.js'][314]++;
  return _.property(value);
});
  _$jscoverage['js/lib/underscore.js'][318]++;
  _.sortBy = (function (obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][319]++;
  iterator = lookupIterator(iterator);
  _$jscoverage['js/lib/underscore.js'][320]++;
  return _.pluck(_.map(obj, (function (value, index, list) {
  _$jscoverage['js/lib/underscore.js'][321]++;
  return ({value: value, index: index, criteria: iterator.call(context, value, index, list)});
})).sort((function (left, right) {
  _$jscoverage['js/lib/underscore.js'][327]++;
  var a = left.criteria;
  _$jscoverage['js/lib/underscore.js'][328]++;
  var b = right.criteria;
  _$jscoverage['js/lib/underscore.js'][329]++;
  if ((a !== b)) {
    _$jscoverage['js/lib/underscore.js'][330]++;
    if (((a > b) || (a === (void 0)))) {
      _$jscoverage['js/lib/underscore.js'][330]++;
      return 1;
    }
    _$jscoverage['js/lib/underscore.js'][331]++;
    if (((a < b) || (b === (void 0)))) {
      _$jscoverage['js/lib/underscore.js'][331]++;
      return -1;
    }
  }
  _$jscoverage['js/lib/underscore.js'][333]++;
  return (left.index - right.index);
})), "value");
});
  _$jscoverage['js/lib/underscore.js'][338]++;
  var group = (function (behavior) {
  _$jscoverage['js/lib/underscore.js'][339]++;
  return (function (obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][340]++;
  var result = {};
  _$jscoverage['js/lib/underscore.js'][341]++;
  iterator = lookupIterator(iterator);
  _$jscoverage['js/lib/underscore.js'][342]++;
  each(obj, (function (value, index) {
  _$jscoverage['js/lib/underscore.js'][343]++;
  var key = iterator.call(context, value, index, obj);
  _$jscoverage['js/lib/underscore.js'][344]++;
  behavior(result, key, value);
}));
  _$jscoverage['js/lib/underscore.js'][346]++;
  return result;
});
});
  _$jscoverage['js/lib/underscore.js'][352]++;
  _.groupBy = group((function (result, key, value) {
  _$jscoverage['js/lib/underscore.js'][353]++;
  (_.has(result, key)? result[key].push(value): (result[key] = [value]));
}));
  _$jscoverage['js/lib/underscore.js'][358]++;
  _.indexBy = group((function (result, key, value) {
  _$jscoverage['js/lib/underscore.js'][359]++;
  result[key] = value;
}));
  _$jscoverage['js/lib/underscore.js'][365]++;
  _.countBy = group((function (result, key) {
  _$jscoverage['js/lib/underscore.js'][366]++;
  (_.has(result, key)? (result[key]++): (result[key] = 1));
}));
  _$jscoverage['js/lib/underscore.js'][371]++;
  _.sortedIndex = (function (array, obj, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][372]++;
  iterator = lookupIterator(iterator);
  _$jscoverage['js/lib/underscore.js'][373]++;
  var value = iterator.call(context, obj);
  _$jscoverage['js/lib/underscore.js'][374]++;
  var low = 0, high = array.length;
  _$jscoverage['js/lib/underscore.js'][375]++;
  while ((low < high)) {
    _$jscoverage['js/lib/underscore.js'][376]++;
    var mid = ((low + high) >>> 1);
    _$jscoverage['js/lib/underscore.js'][377]++;
    ((iterator.call(context, array[mid]) < value)? (low = (mid + 1)): (high = mid));
}
  _$jscoverage['js/lib/underscore.js'][379]++;
  return low;
});
  _$jscoverage['js/lib/underscore.js'][383]++;
  _.toArray = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][384]++;
  if ((! obj)) {
    _$jscoverage['js/lib/underscore.js'][384]++;
    return [];
  }
  _$jscoverage['js/lib/underscore.js'][385]++;
  if (_.isArray(obj)) {
    _$jscoverage['js/lib/underscore.js'][385]++;
    return slice.call(obj);
  }
  _$jscoverage['js/lib/underscore.js'][386]++;
  if ((obj.length === (+ obj.length))) {
    _$jscoverage['js/lib/underscore.js'][386]++;
    return _.map(obj, _.identity);
  }
  _$jscoverage['js/lib/underscore.js'][387]++;
  return _.values(obj);
});
  _$jscoverage['js/lib/underscore.js'][391]++;
  _.size = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][392]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][392]++;
    return 0;
  }
  _$jscoverage['js/lib/underscore.js'][393]++;
  return ((obj.length === (+ obj.length))? obj.length: _.keys(obj).length);
});
  _$jscoverage['js/lib/underscore.js'][402]++;
  _.first = (_.head = (_.take = (function (array, n, guard) {
  _$jscoverage['js/lib/underscore.js'][403]++;
  if ((array == null)) {
    _$jscoverage['js/lib/underscore.js'][403]++;
    return (void 0);
  }
  _$jscoverage['js/lib/underscore.js'][404]++;
  if (((n == null) || guard)) {
    _$jscoverage['js/lib/underscore.js'][404]++;
    return array[0];
  }
  _$jscoverage['js/lib/underscore.js'][405]++;
  if ((n < 0)) {
    _$jscoverage['js/lib/underscore.js'][405]++;
    return [];
  }
  _$jscoverage['js/lib/underscore.js'][406]++;
  return slice.call(array, 0, n);
})));
  _$jscoverage['js/lib/underscore.js'][413]++;
  _.initial = (function (array, n, guard) {
  _$jscoverage['js/lib/underscore.js'][414]++;
  return slice.call(array, 0, (array.length - (((n == null) || guard)? 1: n)));
});
  _$jscoverage['js/lib/underscore.js'][419]++;
  _.last = (function (array, n, guard) {
  _$jscoverage['js/lib/underscore.js'][420]++;
  if ((array == null)) {
    _$jscoverage['js/lib/underscore.js'][420]++;
    return (void 0);
  }
  _$jscoverage['js/lib/underscore.js'][421]++;
  if (((n == null) || guard)) {
    _$jscoverage['js/lib/underscore.js'][421]++;
    return array[(array.length - 1)];
  }
  _$jscoverage['js/lib/underscore.js'][422]++;
  return slice.call(array, Math.max((array.length - n), 0));
});
  _$jscoverage['js/lib/underscore.js'][429]++;
  _.rest = (_.tail = (_.drop = (function (array, n, guard) {
  _$jscoverage['js/lib/underscore.js'][430]++;
  return slice.call(array, (((n == null) || guard)? 1: n));
})));
  _$jscoverage['js/lib/underscore.js'][434]++;
  _.compact = (function (array) {
  _$jscoverage['js/lib/underscore.js'][435]++;
  return _.filter(array, _.identity);
});
  _$jscoverage['js/lib/underscore.js'][439]++;
  var flatten = (function (input, shallow, output) {
  _$jscoverage['js/lib/underscore.js'][440]++;
  if ((shallow && _.every(input, _.isArray))) {
    _$jscoverage['js/lib/underscore.js'][441]++;
    return concat.apply(output, input);
  }
  _$jscoverage['js/lib/underscore.js'][443]++;
  each(input, (function (value) {
  _$jscoverage['js/lib/underscore.js'][444]++;
  if ((_.isArray(value) || _.isArguments(value))) {
    _$jscoverage['js/lib/underscore.js'][445]++;
    (shallow? push.apply(output, value): flatten(value, shallow, output));
  }
  else {
    _$jscoverage['js/lib/underscore.js'][447]++;
    output.push(value);
  }
}));
  _$jscoverage['js/lib/underscore.js'][450]++;
  return output;
});
  _$jscoverage['js/lib/underscore.js'][454]++;
  _.flatten = (function (array, shallow) {
  _$jscoverage['js/lib/underscore.js'][455]++;
  return flatten(array, shallow, []);
});
  _$jscoverage['js/lib/underscore.js'][459]++;
  _.without = (function (array) {
  _$jscoverage['js/lib/underscore.js'][460]++;
  return _.difference(array, slice.call(arguments, 1));
});
  _$jscoverage['js/lib/underscore.js'][465]++;
  _.partition = (function (array, predicate) {
  _$jscoverage['js/lib/underscore.js'][466]++;
  var pass = [], fail = [];
  _$jscoverage['js/lib/underscore.js'][467]++;
  each(array, (function (elem) {
  _$jscoverage['js/lib/underscore.js'][468]++;
  (predicate(elem)? pass: fail).push(elem);
}));
  _$jscoverage['js/lib/underscore.js'][470]++;
  return [pass, fail];
});
  _$jscoverage['js/lib/underscore.js'][476]++;
  _.uniq = (_.unique = (function (array, isSorted, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][477]++;
  if (_.isFunction(isSorted)) {
    _$jscoverage['js/lib/underscore.js'][478]++;
    context = iterator;
    _$jscoverage['js/lib/underscore.js'][479]++;
    iterator = isSorted;
    _$jscoverage['js/lib/underscore.js'][480]++;
    isSorted = false;
  }
  _$jscoverage['js/lib/underscore.js'][482]++;
  var initial = (iterator? _.map(array, iterator, context): array);
  _$jscoverage['js/lib/underscore.js'][483]++;
  var results = [];
  _$jscoverage['js/lib/underscore.js'][484]++;
  var seen = [];
  _$jscoverage['js/lib/underscore.js'][485]++;
  each(initial, (function (value, index) {
  _$jscoverage['js/lib/underscore.js'][486]++;
  if ((isSorted? ((! index) || (seen[(seen.length - 1)] !== value)): (! _.contains(seen, value)))) {
    _$jscoverage['js/lib/underscore.js'][487]++;
    seen.push(value);
    _$jscoverage['js/lib/underscore.js'][488]++;
    results.push(array[index]);
  }
}));
  _$jscoverage['js/lib/underscore.js'][491]++;
  return results;
}));
  _$jscoverage['js/lib/underscore.js'][496]++;
  _.union = (function () {
  _$jscoverage['js/lib/underscore.js'][497]++;
  return _.uniq(_.flatten(arguments, true));
});
  _$jscoverage['js/lib/underscore.js'][502]++;
  _.intersection = (function (array) {
  _$jscoverage['js/lib/underscore.js'][503]++;
  var rest = slice.call(arguments, 1);
  _$jscoverage['js/lib/underscore.js'][504]++;
  return _.filter(_.uniq(array), (function (item) {
  _$jscoverage['js/lib/underscore.js'][505]++;
  return _.every(rest, (function (other) {
  _$jscoverage['js/lib/underscore.js'][506]++;
  return _.contains(other, item);
}));
}));
});
  _$jscoverage['js/lib/underscore.js'][513]++;
  _.difference = (function (array) {
  _$jscoverage['js/lib/underscore.js'][514]++;
  var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
  _$jscoverage['js/lib/underscore.js'][515]++;
  return _.filter(array, (function (value) {
  _$jscoverage['js/lib/underscore.js'][515]++;
  return (! _.contains(rest, value));
}));
});
  _$jscoverage['js/lib/underscore.js'][520]++;
  _.zip = (function () {
  _$jscoverage['js/lib/underscore.js'][521]++;
  var length = _.max(_.pluck(arguments, "length").concat(0));
  _$jscoverage['js/lib/underscore.js'][522]++;
  var results = new Array(length);
  _$jscoverage['js/lib/underscore.js'][523]++;
  for (var i = 0; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][524]++;
    results[i] = _.pluck(arguments, ("" + i));
}
  _$jscoverage['js/lib/underscore.js'][526]++;
  return results;
});
  _$jscoverage['js/lib/underscore.js'][532]++;
  _.object = (function (list, values) {
  _$jscoverage['js/lib/underscore.js'][533]++;
  if ((list == null)) {
    _$jscoverage['js/lib/underscore.js'][533]++;
    return ({});
  }
  _$jscoverage['js/lib/underscore.js'][534]++;
  var result = {};
  _$jscoverage['js/lib/underscore.js'][535]++;
  for (var i = 0, length = list.length; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][536]++;
    if (values) {
      _$jscoverage['js/lib/underscore.js'][537]++;
      result[list[i]] = values[i];
    }
    else {
      _$jscoverage['js/lib/underscore.js'][539]++;
      result[list[i][0]] = list[i][1];
    }
}
  _$jscoverage['js/lib/underscore.js'][542]++;
  return result;
});
  _$jscoverage['js/lib/underscore.js'][551]++;
  _.indexOf = (function (array, item, isSorted) {
  _$jscoverage['js/lib/underscore.js'][552]++;
  if ((array == null)) {
    _$jscoverage['js/lib/underscore.js'][552]++;
    return -1;
  }
  _$jscoverage['js/lib/underscore.js'][553]++;
  var i = 0, length = array.length;
  _$jscoverage['js/lib/underscore.js'][554]++;
  if (isSorted) {
    _$jscoverage['js/lib/underscore.js'][555]++;
    if (((typeof isSorted) == "number")) {
      _$jscoverage['js/lib/underscore.js'][556]++;
      i = ((isSorted < 0)? Math.max(0, (length + isSorted)): isSorted);
    }
    else {
      _$jscoverage['js/lib/underscore.js'][558]++;
      i = _.sortedIndex(array, item);
      _$jscoverage['js/lib/underscore.js'][559]++;
      return ((array[i] === item)? i: -1);
    }
  }
  _$jscoverage['js/lib/underscore.js'][562]++;
  if ((nativeIndexOf && (array.indexOf === nativeIndexOf))) {
    _$jscoverage['js/lib/underscore.js'][562]++;
    return array.indexOf(item, isSorted);
  }
  _$jscoverage['js/lib/underscore.js'][563]++;
  for (; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][563]++;
    if ((array[i] === item)) {
      _$jscoverage['js/lib/underscore.js'][563]++;
      return i;
    }
}
  _$jscoverage['js/lib/underscore.js'][564]++;
  return -1;
});
  _$jscoverage['js/lib/underscore.js'][568]++;
  _.lastIndexOf = (function (array, item, from) {
  _$jscoverage['js/lib/underscore.js'][569]++;
  if ((array == null)) {
    _$jscoverage['js/lib/underscore.js'][569]++;
    return -1;
  }
  _$jscoverage['js/lib/underscore.js'][570]++;
  var hasIndex = (from != null);
  _$jscoverage['js/lib/underscore.js'][571]++;
  if ((nativeLastIndexOf && (array.lastIndexOf === nativeLastIndexOf))) {
    _$jscoverage['js/lib/underscore.js'][572]++;
    return (hasIndex? array.lastIndexOf(item, from): array.lastIndexOf(item));
  }
  _$jscoverage['js/lib/underscore.js'][574]++;
  var i = (hasIndex? from: array.length);
  _$jscoverage['js/lib/underscore.js'][575]++;
  while ((i--)) {
    _$jscoverage['js/lib/underscore.js'][575]++;
    if ((array[i] === item)) {
      _$jscoverage['js/lib/underscore.js'][575]++;
      return i;
    }
}
  _$jscoverage['js/lib/underscore.js'][576]++;
  return -1;
});
  _$jscoverage['js/lib/underscore.js'][582]++;
  _.range = (function (start, stop, step) {
  _$jscoverage['js/lib/underscore.js'][583]++;
  if ((arguments.length <= 1)) {
    _$jscoverage['js/lib/underscore.js'][584]++;
    stop = (start || 0);
    _$jscoverage['js/lib/underscore.js'][585]++;
    start = 0;
  }
  _$jscoverage['js/lib/underscore.js'][587]++;
  step = (arguments[2] || 1);
  _$jscoverage['js/lib/underscore.js'][589]++;
  var length = Math.max(Math.ceil(((stop - start) / step)), 0);
  _$jscoverage['js/lib/underscore.js'][590]++;
  var idx = 0;
  _$jscoverage['js/lib/underscore.js'][591]++;
  var range = new Array(length);
  _$jscoverage['js/lib/underscore.js'][593]++;
  while ((idx < length)) {
    _$jscoverage['js/lib/underscore.js'][594]++;
    range[(idx++)] = start;
    _$jscoverage['js/lib/underscore.js'][595]++;
    start += step;
}
  _$jscoverage['js/lib/underscore.js'][598]++;
  return range;
});
  _$jscoverage['js/lib/underscore.js'][605]++;
  var ctor = (function () {
});
  _$jscoverage['js/lib/underscore.js'][610]++;
  _.bind = (function (func, context) {
  _$jscoverage['js/lib/underscore.js'][611]++;
  var args, bound;
  _$jscoverage['js/lib/underscore.js'][612]++;
  if ((nativeBind && (func.bind === nativeBind))) {
    _$jscoverage['js/lib/underscore.js'][612]++;
    return nativeBind.apply(func, slice.call(arguments, 1));
  }
  _$jscoverage['js/lib/underscore.js'][613]++;
  if ((! _.isFunction(func))) {
    _$jscoverage['js/lib/underscore.js'][613]++;
    throw new TypeError();
  }
  _$jscoverage['js/lib/underscore.js'][614]++;
  args = slice.call(arguments, 2);
  _$jscoverage['js/lib/underscore.js'][615]++;
  return (bound = (function () {
  _$jscoverage['js/lib/underscore.js'][616]++;
  if ((! (this instanceof bound))) {
    _$jscoverage['js/lib/underscore.js'][616]++;
    return func.apply(context, args.concat(slice.call(arguments)));
  }
  _$jscoverage['js/lib/underscore.js'][617]++;
  ctor.prototype = func.prototype;
  _$jscoverage['js/lib/underscore.js'][618]++;
  var self = new ctor();
  _$jscoverage['js/lib/underscore.js'][619]++;
  ctor.prototype = null;
  _$jscoverage['js/lib/underscore.js'][620]++;
  var result = func.apply(self, args.concat(slice.call(arguments)));
  _$jscoverage['js/lib/underscore.js'][621]++;
  if ((Object(result) === result)) {
    _$jscoverage['js/lib/underscore.js'][621]++;
    return result;
  }
  _$jscoverage['js/lib/underscore.js'][622]++;
  return self;
}));
});
  _$jscoverage['js/lib/underscore.js'][629]++;
  _.partial = (function (func) {
  _$jscoverage['js/lib/underscore.js'][630]++;
  var boundArgs = slice.call(arguments, 1);
  _$jscoverage['js/lib/underscore.js'][631]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][632]++;
  var position = 0;
  _$jscoverage['js/lib/underscore.js'][633]++;
  var args = boundArgs.slice();
  _$jscoverage['js/lib/underscore.js'][634]++;
  for (var i = 0, length = args.length; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][635]++;
    if ((args[i] === _)) {
      _$jscoverage['js/lib/underscore.js'][635]++;
      args[i] = arguments[(position++)];
    }
}
  _$jscoverage['js/lib/underscore.js'][637]++;
  while ((position < arguments.length)) {
    _$jscoverage['js/lib/underscore.js'][637]++;
    args.push(arguments[(position++)]);
}
  _$jscoverage['js/lib/underscore.js'][638]++;
  return func.apply(this, args);
});
});
  _$jscoverage['js/lib/underscore.js'][645]++;
  _.bindAll = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][646]++;
  var funcs = slice.call(arguments, 1);
  _$jscoverage['js/lib/underscore.js'][647]++;
  if ((funcs.length === 0)) {
    _$jscoverage['js/lib/underscore.js'][647]++;
    throw new Error("bindAll must be passed function names");
  }
  _$jscoverage['js/lib/underscore.js'][648]++;
  each(funcs, (function (f) {
  _$jscoverage['js/lib/underscore.js'][648]++;
  obj[f] = _.bind(obj[f], obj);
}));
  _$jscoverage['js/lib/underscore.js'][649]++;
  return obj;
});
  _$jscoverage['js/lib/underscore.js'][653]++;
  _.memoize = (function (func, hasher) {
  _$jscoverage['js/lib/underscore.js'][654]++;
  var memo = {};
  _$jscoverage['js/lib/underscore.js'][655]++;
  (hasher || (hasher = _.identity));
  _$jscoverage['js/lib/underscore.js'][656]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][657]++;
  var key = hasher.apply(this, arguments);
  _$jscoverage['js/lib/underscore.js'][658]++;
  return (_.has(memo, key)? memo[key]: (memo[key] = func.apply(this, arguments)));
});
});
  _$jscoverage['js/lib/underscore.js'][664]++;
  _.delay = (function (func, wait) {
  _$jscoverage['js/lib/underscore.js'][665]++;
  var args = slice.call(arguments, 2);
  _$jscoverage['js/lib/underscore.js'][666]++;
  return setTimeout((function () {
  _$jscoverage['js/lib/underscore.js'][666]++;
  return func.apply(null, args);
}), wait);
});
  _$jscoverage['js/lib/underscore.js'][671]++;
  _.defer = (function (func) {
  _$jscoverage['js/lib/underscore.js'][672]++;
  return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
});
  _$jscoverage['js/lib/underscore.js'][680]++;
  _.throttle = (function (func, wait, options) {
  _$jscoverage['js/lib/underscore.js'][681]++;
  var context, args, result;
  _$jscoverage['js/lib/underscore.js'][682]++;
  var timeout = null;
  _$jscoverage['js/lib/underscore.js'][683]++;
  var previous = 0;
  _$jscoverage['js/lib/underscore.js'][684]++;
  (options || (options = {}));
  _$jscoverage['js/lib/underscore.js'][685]++;
  var later = (function () {
  _$jscoverage['js/lib/underscore.js'][686]++;
  previous = ((options.leading === false)? 0: _.now());
  _$jscoverage['js/lib/underscore.js'][687]++;
  timeout = null;
  _$jscoverage['js/lib/underscore.js'][688]++;
  result = func.apply(context, args);
  _$jscoverage['js/lib/underscore.js'][689]++;
  context = (args = null);
});
  _$jscoverage['js/lib/underscore.js'][691]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][692]++;
  var now = _.now();
  _$jscoverage['js/lib/underscore.js'][693]++;
  if (((! previous) && (options.leading === false))) {
    _$jscoverage['js/lib/underscore.js'][693]++;
    previous = now;
  }
  _$jscoverage['js/lib/underscore.js'][694]++;
  var remaining = (wait - (now - previous));
  _$jscoverage['js/lib/underscore.js'][695]++;
  context = this;
  _$jscoverage['js/lib/underscore.js'][696]++;
  args = arguments;
  _$jscoverage['js/lib/underscore.js'][697]++;
  if ((remaining <= 0)) {
    _$jscoverage['js/lib/underscore.js'][698]++;
    clearTimeout(timeout);
    _$jscoverage['js/lib/underscore.js'][699]++;
    timeout = null;
    _$jscoverage['js/lib/underscore.js'][700]++;
    previous = now;
    _$jscoverage['js/lib/underscore.js'][701]++;
    result = func.apply(context, args);
    _$jscoverage['js/lib/underscore.js'][702]++;
    context = (args = null);
  }
  else {
    _$jscoverage['js/lib/underscore.js'][703]++;
    if (((! timeout) && (options.trailing !== false))) {
      _$jscoverage['js/lib/underscore.js'][704]++;
      timeout = setTimeout(later, remaining);
    }
  }
  _$jscoverage['js/lib/underscore.js'][706]++;
  return result;
});
});
  _$jscoverage['js/lib/underscore.js'][714]++;
  _.debounce = (function (func, wait, immediate) {
  _$jscoverage['js/lib/underscore.js'][715]++;
  var timeout, args, context, timestamp, result;
  _$jscoverage['js/lib/underscore.js'][717]++;
  var later = (function () {
  _$jscoverage['js/lib/underscore.js'][718]++;
  var last = (_.now() - timestamp);
  _$jscoverage['js/lib/underscore.js'][719]++;
  if ((last < wait)) {
    _$jscoverage['js/lib/underscore.js'][720]++;
    timeout = setTimeout(later, (wait - last));
  }
  else {
    _$jscoverage['js/lib/underscore.js'][722]++;
    timeout = null;
    _$jscoverage['js/lib/underscore.js'][723]++;
    if ((! immediate)) {
      _$jscoverage['js/lib/underscore.js'][724]++;
      result = func.apply(context, args);
      _$jscoverage['js/lib/underscore.js'][725]++;
      context = (args = null);
    }
  }
});
  _$jscoverage['js/lib/underscore.js'][730]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][731]++;
  context = this;
  _$jscoverage['js/lib/underscore.js'][732]++;
  args = arguments;
  _$jscoverage['js/lib/underscore.js'][733]++;
  timestamp = _.now();
  _$jscoverage['js/lib/underscore.js'][734]++;
  var callNow = (immediate && (! timeout));
  _$jscoverage['js/lib/underscore.js'][735]++;
  if ((! timeout)) {
    _$jscoverage['js/lib/underscore.js'][736]++;
    timeout = setTimeout(later, wait);
  }
  _$jscoverage['js/lib/underscore.js'][738]++;
  if (callNow) {
    _$jscoverage['js/lib/underscore.js'][739]++;
    result = func.apply(context, args);
    _$jscoverage['js/lib/underscore.js'][740]++;
    context = (args = null);
  }
  _$jscoverage['js/lib/underscore.js'][743]++;
  return result;
});
});
  _$jscoverage['js/lib/underscore.js'][749]++;
  _.once = (function (func) {
  _$jscoverage['js/lib/underscore.js'][750]++;
  var ran = false, memo;
  _$jscoverage['js/lib/underscore.js'][751]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][752]++;
  if (ran) {
    _$jscoverage['js/lib/underscore.js'][752]++;
    return memo;
  }
  _$jscoverage['js/lib/underscore.js'][753]++;
  ran = true;
  _$jscoverage['js/lib/underscore.js'][754]++;
  memo = func.apply(this, arguments);
  _$jscoverage['js/lib/underscore.js'][755]++;
  func = null;
  _$jscoverage['js/lib/underscore.js'][756]++;
  return memo;
});
});
  _$jscoverage['js/lib/underscore.js'][763]++;
  _.wrap = (function (func, wrapper) {
  _$jscoverage['js/lib/underscore.js'][764]++;
  return _.partial(wrapper, func);
});
  _$jscoverage['js/lib/underscore.js'][769]++;
  _.compose = (function () {
  _$jscoverage['js/lib/underscore.js'][770]++;
  var funcs = arguments;
  _$jscoverage['js/lib/underscore.js'][771]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][772]++;
  var args = arguments;
  _$jscoverage['js/lib/underscore.js'][773]++;
  for (var i = (funcs.length - 1); (i >= 0); (i--)) {
    _$jscoverage['js/lib/underscore.js'][774]++;
    args = [funcs[i].apply(this, args)];
}
  _$jscoverage['js/lib/underscore.js'][776]++;
  return args[0];
});
});
  _$jscoverage['js/lib/underscore.js'][781]++;
  _.after = (function (times, func) {
  _$jscoverage['js/lib/underscore.js'][782]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][783]++;
  if (((--times) < 1)) {
    _$jscoverage['js/lib/underscore.js'][784]++;
    return func.apply(this, arguments);
  }
});
});
  _$jscoverage['js/lib/underscore.js'][794]++;
  _.keys = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][795]++;
  if ((! _.isObject(obj))) {
    _$jscoverage['js/lib/underscore.js'][795]++;
    return [];
  }
  _$jscoverage['js/lib/underscore.js'][796]++;
  if (nativeKeys) {
    _$jscoverage['js/lib/underscore.js'][796]++;
    return nativeKeys(obj);
  }
  _$jscoverage['js/lib/underscore.js'][797]++;
  var keys = [];
  _$jscoverage['js/lib/underscore.js'][798]++;
  for (var key in obj) {
    _$jscoverage['js/lib/underscore.js'][798]++;
    if (_.has(obj, key)) {
      _$jscoverage['js/lib/underscore.js'][798]++;
      keys.push(key);
    }
}
  _$jscoverage['js/lib/underscore.js'][799]++;
  return keys;
});
  _$jscoverage['js/lib/underscore.js'][803]++;
  _.values = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][804]++;
  var keys = _.keys(obj);
  _$jscoverage['js/lib/underscore.js'][805]++;
  var length = keys.length;
  _$jscoverage['js/lib/underscore.js'][806]++;
  var values = new Array(length);
  _$jscoverage['js/lib/underscore.js'][807]++;
  for (var i = 0; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][808]++;
    values[i] = obj[keys[i]];
}
  _$jscoverage['js/lib/underscore.js'][810]++;
  return values;
});
  _$jscoverage['js/lib/underscore.js'][814]++;
  _.pairs = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][815]++;
  var keys = _.keys(obj);
  _$jscoverage['js/lib/underscore.js'][816]++;
  var length = keys.length;
  _$jscoverage['js/lib/underscore.js'][817]++;
  var pairs = new Array(length);
  _$jscoverage['js/lib/underscore.js'][818]++;
  for (var i = 0; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][819]++;
    pairs[i] = [keys[i], obj[keys[i]]];
}
  _$jscoverage['js/lib/underscore.js'][821]++;
  return pairs;
});
  _$jscoverage['js/lib/underscore.js'][825]++;
  _.invert = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][826]++;
  var result = {};
  _$jscoverage['js/lib/underscore.js'][827]++;
  var keys = _.keys(obj);
  _$jscoverage['js/lib/underscore.js'][828]++;
  for (var i = 0, length = keys.length; (i < length); (i++)) {
    _$jscoverage['js/lib/underscore.js'][829]++;
    result[obj[keys[i]]] = keys[i];
}
  _$jscoverage['js/lib/underscore.js'][831]++;
  return result;
});
  _$jscoverage['js/lib/underscore.js'][836]++;
  _.functions = (_.methods = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][837]++;
  var names = [];
  _$jscoverage['js/lib/underscore.js'][838]++;
  for (var key in obj) {
    _$jscoverage['js/lib/underscore.js'][839]++;
    if (_.isFunction(obj[key])) {
      _$jscoverage['js/lib/underscore.js'][839]++;
      names.push(key);
    }
}
  _$jscoverage['js/lib/underscore.js'][841]++;
  return names.sort();
}));
  _$jscoverage['js/lib/underscore.js'][845]++;
  _.extend = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][846]++;
  each(slice.call(arguments, 1), (function (source) {
  _$jscoverage['js/lib/underscore.js'][847]++;
  if (source) {
    _$jscoverage['js/lib/underscore.js'][848]++;
    for (var prop in source) {
      _$jscoverage['js/lib/underscore.js'][849]++;
      obj[prop] = source[prop];
}
  }
}));
  _$jscoverage['js/lib/underscore.js'][853]++;
  return obj;
});
  _$jscoverage['js/lib/underscore.js'][857]++;
  _.pick = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][858]++;
  var copy = {};
  _$jscoverage['js/lib/underscore.js'][859]++;
  var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
  _$jscoverage['js/lib/underscore.js'][860]++;
  each(keys, (function (key) {
  _$jscoverage['js/lib/underscore.js'][861]++;
  if ((key in obj)) {
    _$jscoverage['js/lib/underscore.js'][861]++;
    copy[key] = obj[key];
  }
}));
  _$jscoverage['js/lib/underscore.js'][863]++;
  return copy;
});
  _$jscoverage['js/lib/underscore.js'][867]++;
  _.omit = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][868]++;
  var copy = {};
  _$jscoverage['js/lib/underscore.js'][869]++;
  var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
  _$jscoverage['js/lib/underscore.js'][870]++;
  for (var key in obj) {
    _$jscoverage['js/lib/underscore.js'][871]++;
    if ((! _.contains(keys, key))) {
      _$jscoverage['js/lib/underscore.js'][871]++;
      copy[key] = obj[key];
    }
}
  _$jscoverage['js/lib/underscore.js'][873]++;
  return copy;
});
  _$jscoverage['js/lib/underscore.js'][877]++;
  _.defaults = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][878]++;
  each(slice.call(arguments, 1), (function (source) {
  _$jscoverage['js/lib/underscore.js'][879]++;
  if (source) {
    _$jscoverage['js/lib/underscore.js'][880]++;
    for (var prop in source) {
      _$jscoverage['js/lib/underscore.js'][881]++;
      if ((obj[prop] === (void 0))) {
        _$jscoverage['js/lib/underscore.js'][881]++;
        obj[prop] = source[prop];
      }
}
  }
}));
  _$jscoverage['js/lib/underscore.js'][885]++;
  return obj;
});
  _$jscoverage['js/lib/underscore.js'][889]++;
  _.clone = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][890]++;
  if ((! _.isObject(obj))) {
    _$jscoverage['js/lib/underscore.js'][890]++;
    return obj;
  }
  _$jscoverage['js/lib/underscore.js'][891]++;
  return (_.isArray(obj)? obj.slice(): _.extend({}, obj));
});
  _$jscoverage['js/lib/underscore.js'][897]++;
  _.tap = (function (obj, interceptor) {
  _$jscoverage['js/lib/underscore.js'][898]++;
  interceptor(obj);
  _$jscoverage['js/lib/underscore.js'][899]++;
  return obj;
});
  _$jscoverage['js/lib/underscore.js'][903]++;
  var eq = (function (a, b, aStack, bStack) {
  _$jscoverage['js/lib/underscore.js'][906]++;
  if ((a === b)) {
    _$jscoverage['js/lib/underscore.js'][906]++;
    return ((a !== 0) || ((1 / a) == (1 / b)));
  }
  _$jscoverage['js/lib/underscore.js'][908]++;
  if (((a == null) || (b == null))) {
    _$jscoverage['js/lib/underscore.js'][908]++;
    return (a === b);
  }
  _$jscoverage['js/lib/underscore.js'][910]++;
  if ((a instanceof _)) {
    _$jscoverage['js/lib/underscore.js'][910]++;
    a = a._wrapped;
  }
  _$jscoverage['js/lib/underscore.js'][911]++;
  if ((b instanceof _)) {
    _$jscoverage['js/lib/underscore.js'][911]++;
    b = b._wrapped;
  }
  _$jscoverage['js/lib/underscore.js'][913]++;
  var className = toString.call(a);
  _$jscoverage['js/lib/underscore.js'][914]++;
  if ((className != toString.call(b))) {
    _$jscoverage['js/lib/underscore.js'][914]++;
    return false;
  }
  _$jscoverage['js/lib/underscore.js'][915]++;
  switch (className) {
  case "[object String]":
    _$jscoverage['js/lib/underscore.js'][920]++;
    return (a == String(b));
  case "[object Number]":
    _$jscoverage['js/lib/underscore.js'][924]++;
    return ((a != (+ a))? (b != (+ b)): ((a == 0)? ((1 / a) == (1 / b)): (a == (+ b))));
  case "[object Date]":
  case "[object Boolean]":
    _$jscoverage['js/lib/underscore.js'][930]++;
    return ((+ a) == (+ b));
  case "[object RegExp]":
    _$jscoverage['js/lib/underscore.js'][933]++;
    return ((a.source == b.source) && (a.global == b.global) && (a.multiline == b.multiline) && (a.ignoreCase == b.ignoreCase));
  }
  _$jscoverage['js/lib/underscore.js'][938]++;
  if ((((typeof a) != "object") || ((typeof b) != "object"))) {
    _$jscoverage['js/lib/underscore.js'][938]++;
    return false;
  }
  _$jscoverage['js/lib/underscore.js'][941]++;
  var length = aStack.length;
  _$jscoverage['js/lib/underscore.js'][942]++;
  while ((length--)) {
    _$jscoverage['js/lib/underscore.js'][945]++;
    if ((aStack[length] == a)) {
      _$jscoverage['js/lib/underscore.js'][945]++;
      return (bStack[length] == b);
    }
}
  _$jscoverage['js/lib/underscore.js'][949]++;
  var aCtor = a.constructor, bCtor = b.constructor;
  _$jscoverage['js/lib/underscore.js'][950]++;
  if (((aCtor !== bCtor) && (! (_.isFunction(aCtor) && (aCtor instanceof aCtor) && _.isFunction(bCtor) && (bCtor instanceof bCtor))) && (("constructor" in a) && ("constructor" in b)))) {
    _$jscoverage['js/lib/underscore.js'][953]++;
    return false;
  }
  _$jscoverage['js/lib/underscore.js'][956]++;
  aStack.push(a);
  _$jscoverage['js/lib/underscore.js'][957]++;
  bStack.push(b);
  _$jscoverage['js/lib/underscore.js'][958]++;
  var size = 0, result = true;
  _$jscoverage['js/lib/underscore.js'][960]++;
  if ((className == "[object Array]")) {
    _$jscoverage['js/lib/underscore.js'][962]++;
    size = a.length;
    _$jscoverage['js/lib/underscore.js'][963]++;
    result = (size == b.length);
    _$jscoverage['js/lib/underscore.js'][964]++;
    if (result) {
      _$jscoverage['js/lib/underscore.js'][966]++;
      while ((size--)) {
        _$jscoverage['js/lib/underscore.js'][967]++;
        if ((! (result = eq(a[size], b[size], aStack, bStack)))) {
          _$jscoverage['js/lib/underscore.js'][967]++;
          break;
        }
}
    }
  }
  else {
    _$jscoverage['js/lib/underscore.js'][972]++;
    for (var key in a) {
      _$jscoverage['js/lib/underscore.js'][973]++;
      if (_.has(a, key)) {
        _$jscoverage['js/lib/underscore.js'][975]++;
        (size++);
        _$jscoverage['js/lib/underscore.js'][977]++;
        if ((! (result = (_.has(b, key) && eq(a[key], b[key], aStack, bStack))))) {
          _$jscoverage['js/lib/underscore.js'][977]++;
          break;
        }
      }
}
    _$jscoverage['js/lib/underscore.js'][981]++;
    if (result) {
      _$jscoverage['js/lib/underscore.js'][982]++;
      for (key in b) {
        _$jscoverage['js/lib/underscore.js'][983]++;
        if ((_.has(b, key) && (! (size--)))) {
          _$jscoverage['js/lib/underscore.js'][983]++;
          break;
        }
}
      _$jscoverage['js/lib/underscore.js'][985]++;
      result = (! size);
    }
  }
  _$jscoverage['js/lib/underscore.js'][989]++;
  aStack.pop();
  _$jscoverage['js/lib/underscore.js'][990]++;
  bStack.pop();
  _$jscoverage['js/lib/underscore.js'][991]++;
  return result;
});
  _$jscoverage['js/lib/underscore.js'][995]++;
  _.isEqual = (function (a, b) {
  _$jscoverage['js/lib/underscore.js'][996]++;
  return eq(a, b, [], []);
});
  _$jscoverage['js/lib/underscore.js'][1001]++;
  _.isEmpty = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1002]++;
  if ((obj == null)) {
    _$jscoverage['js/lib/underscore.js'][1002]++;
    return true;
  }
  _$jscoverage['js/lib/underscore.js'][1003]++;
  if ((_.isArray(obj) || _.isString(obj))) {
    _$jscoverage['js/lib/underscore.js'][1003]++;
    return (obj.length === 0);
  }
  _$jscoverage['js/lib/underscore.js'][1004]++;
  for (var key in obj) {
    _$jscoverage['js/lib/underscore.js'][1004]++;
    if (_.has(obj, key)) {
      _$jscoverage['js/lib/underscore.js'][1004]++;
      return false;
    }
}
  _$jscoverage['js/lib/underscore.js'][1005]++;
  return true;
});
  _$jscoverage['js/lib/underscore.js'][1009]++;
  _.isElement = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1010]++;
  return (! (! (obj && (obj.nodeType === 1))));
});
  _$jscoverage['js/lib/underscore.js'][1015]++;
  _.isArray = (nativeIsArray || (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1016]++;
  return (toString.call(obj) == "[object Array]");
}));
  _$jscoverage['js/lib/underscore.js'][1020]++;
  _.isObject = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1021]++;
  return (obj === Object(obj));
});
  _$jscoverage['js/lib/underscore.js'][1025]++;
  each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], (function (name) {
  _$jscoverage['js/lib/underscore.js'][1026]++;
  _[("is" + name)] = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1027]++;
  return (toString.call(obj) == ("[object " + name + "]"));
});
}));
  _$jscoverage['js/lib/underscore.js'][1033]++;
  if ((! _.isArguments(arguments))) {
    _$jscoverage['js/lib/underscore.js'][1034]++;
    _.isArguments = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1035]++;
  return (! (! (obj && _.has(obj, "callee"))));
});
  }
  _$jscoverage['js/lib/underscore.js'][1040]++;
  if (((typeof /./) !== "function")) {
    _$jscoverage['js/lib/underscore.js'][1041]++;
    _.isFunction = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1042]++;
  return ((typeof obj) === "function");
});
  }
  _$jscoverage['js/lib/underscore.js'][1047]++;
  _.isFinite = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1048]++;
  return (isFinite(obj) && (! isNaN(parseFloat(obj))));
});
  _$jscoverage['js/lib/underscore.js'][1052]++;
  _.isNaN = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1053]++;
  return (_.isNumber(obj) && (obj != (+ obj)));
});
  _$jscoverage['js/lib/underscore.js'][1057]++;
  _.isBoolean = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1058]++;
  return ((obj === true) || (obj === false) || (toString.call(obj) == "[object Boolean]"));
});
  _$jscoverage['js/lib/underscore.js'][1062]++;
  _.isNull = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1063]++;
  return (obj === null);
});
  _$jscoverage['js/lib/underscore.js'][1067]++;
  _.isUndefined = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1068]++;
  return (obj === (void 0));
});
  _$jscoverage['js/lib/underscore.js'][1073]++;
  _.has = (function (obj, key) {
  _$jscoverage['js/lib/underscore.js'][1074]++;
  return hasOwnProperty.call(obj, key);
});
  _$jscoverage['js/lib/underscore.js'][1082]++;
  _.noConflict = (function () {
  _$jscoverage['js/lib/underscore.js'][1083]++;
  root._ = previousUnderscore;
  _$jscoverage['js/lib/underscore.js'][1084]++;
  return this;
});
  _$jscoverage['js/lib/underscore.js'][1088]++;
  _.identity = (function (value) {
  _$jscoverage['js/lib/underscore.js'][1089]++;
  return value;
});
  _$jscoverage['js/lib/underscore.js'][1092]++;
  _.constant = (function (value) {
  _$jscoverage['js/lib/underscore.js'][1093]++;
  return (function () {
  _$jscoverage['js/lib/underscore.js'][1094]++;
  return value;
});
});
  _$jscoverage['js/lib/underscore.js'][1098]++;
  _.property = (function (key) {
  _$jscoverage['js/lib/underscore.js'][1099]++;
  return (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1100]++;
  return obj[key];
});
});
  _$jscoverage['js/lib/underscore.js'][1105]++;
  _.matches = (function (attrs) {
  _$jscoverage['js/lib/underscore.js'][1106]++;
  return (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1107]++;
  if ((obj === attrs)) {
    _$jscoverage['js/lib/underscore.js'][1107]++;
    return true;
  }
  _$jscoverage['js/lib/underscore.js'][1108]++;
  for (var key in attrs) {
    _$jscoverage['js/lib/underscore.js'][1109]++;
    if ((attrs[key] !== obj[key])) {
      _$jscoverage['js/lib/underscore.js'][1110]++;
      return false;
    }
}
  _$jscoverage['js/lib/underscore.js'][1112]++;
  return true;
});
});
  _$jscoverage['js/lib/underscore.js'][1117]++;
  _.times = (function (n, iterator, context) {
  _$jscoverage['js/lib/underscore.js'][1118]++;
  var accum = Array(Math.max(0, n));
  _$jscoverage['js/lib/underscore.js'][1119]++;
  for (var i = 0; (i < n); (i++)) {
    _$jscoverage['js/lib/underscore.js'][1119]++;
    accum[i] = iterator.call(context, i);
}
  _$jscoverage['js/lib/underscore.js'][1120]++;
  return accum;
});
  _$jscoverage['js/lib/underscore.js'][1124]++;
  _.random = (function (min, max) {
  _$jscoverage['js/lib/underscore.js'][1125]++;
  if ((max == null)) {
    _$jscoverage['js/lib/underscore.js'][1126]++;
    max = min;
    _$jscoverage['js/lib/underscore.js'][1127]++;
    min = 0;
  }
  _$jscoverage['js/lib/underscore.js'][1129]++;
  return (min + Math.floor((Math.random() * ((max - min) + 1))));
});
  _$jscoverage['js/lib/underscore.js'][1133]++;
  _.now = (Date.now || (function () {
  _$jscoverage['js/lib/underscore.js'][1133]++;
  return new Date().getTime();
}));
  _$jscoverage['js/lib/underscore.js'][1136]++;
  var entityMap = {escape: {"&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;"}};
  _$jscoverage['js/lib/underscore.js'][1145]++;
  entityMap.unescape = _.invert(entityMap.escape);
  _$jscoverage['js/lib/underscore.js'][1148]++;
  var entityRegexes = {escape: new RegExp(("[" + _.keys(entityMap.escape).join("") + "]"), "g"), unescape: new RegExp(("(" + _.keys(entityMap.unescape).join("|") + ")"), "g")};
  _$jscoverage['js/lib/underscore.js'][1154]++;
  _.each(["escape", "unescape"], (function (method) {
  _$jscoverage['js/lib/underscore.js'][1155]++;
  _[method] = (function (string) {
  _$jscoverage['js/lib/underscore.js'][1156]++;
  if ((string == null)) {
    _$jscoverage['js/lib/underscore.js'][1156]++;
    return "";
  }
  _$jscoverage['js/lib/underscore.js'][1157]++;
  return ("" + string).replace(entityRegexes[method], (function (match) {
  _$jscoverage['js/lib/underscore.js'][1158]++;
  return entityMap[method][match];
}));
});
}));
  _$jscoverage['js/lib/underscore.js'][1165]++;
  _.result = (function (object, property) {
  _$jscoverage['js/lib/underscore.js'][1166]++;
  if ((object == null)) {
    _$jscoverage['js/lib/underscore.js'][1166]++;
    return (void 0);
  }
  _$jscoverage['js/lib/underscore.js'][1167]++;
  var value = object[property];
  _$jscoverage['js/lib/underscore.js'][1168]++;
  return (_.isFunction(value)? value.call(object): value);
});
  _$jscoverage['js/lib/underscore.js'][1172]++;
  _.mixin = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1173]++;
  each(_.functions(obj), (function (name) {
  _$jscoverage['js/lib/underscore.js'][1174]++;
  var func = (_[name] = obj[name]);
  _$jscoverage['js/lib/underscore.js'][1175]++;
  _.prototype[name] = (function () {
  _$jscoverage['js/lib/underscore.js'][1176]++;
  var args = [this._wrapped];
  _$jscoverage['js/lib/underscore.js'][1177]++;
  push.apply(args, arguments);
  _$jscoverage['js/lib/underscore.js'][1178]++;
  return result.call(this, func.apply(_, args));
});
}));
});
  _$jscoverage['js/lib/underscore.js'][1185]++;
  var idCounter = 0;
  _$jscoverage['js/lib/underscore.js'][1186]++;
  _.uniqueId = (function (prefix) {
  _$jscoverage['js/lib/underscore.js'][1187]++;
  var id = ((++idCounter) + "");
  _$jscoverage['js/lib/underscore.js'][1188]++;
  return (prefix? (prefix + id): id);
});
  _$jscoverage['js/lib/underscore.js'][1193]++;
  _.templateSettings = {evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g};
  _$jscoverage['js/lib/underscore.js'][1202]++;
  var noMatch = /(.)^/;
  _$jscoverage['js/lib/underscore.js'][1206]++;
  var escapes = {"'": "'", "\\": "\\", "\r": "r", "\n": "n", "\t": "t", "\u2028": "u2028", "\u2029": "u2029"};
  _$jscoverage['js/lib/underscore.js'][1216]++;
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
  _$jscoverage['js/lib/underscore.js'][1221]++;
  _.template = (function (text, data, settings) {
  _$jscoverage['js/lib/underscore.js'][1222]++;
  var render;
  _$jscoverage['js/lib/underscore.js'][1223]++;
  settings = _.defaults({}, settings, _.templateSettings);
  _$jscoverage['js/lib/underscore.js'][1226]++;
  var matcher = new RegExp(([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$"), "g");
  _$jscoverage['js/lib/underscore.js'][1233]++;
  var index = 0;
  _$jscoverage['js/lib/underscore.js'][1234]++;
  var source = "__p+='";
  _$jscoverage['js/lib/underscore.js'][1235]++;
  text.replace(matcher, (function (match, escape, interpolate, evaluate, offset) {
  _$jscoverage['js/lib/underscore.js'][1236]++;
  source += text.slice(index, offset).replace(escaper, (function (match) {
  _$jscoverage['js/lib/underscore.js'][1237]++;
  return ("\\" + escapes[match]);
}));
  _$jscoverage['js/lib/underscore.js'][1239]++;
  if (escape) {
    _$jscoverage['js/lib/underscore.js'][1240]++;
    source += ("'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'");
  }
  _$jscoverage['js/lib/underscore.js'][1242]++;
  if (interpolate) {
    _$jscoverage['js/lib/underscore.js'][1243]++;
    source += ("'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'");
  }
  _$jscoverage['js/lib/underscore.js'][1245]++;
  if (evaluate) {
    _$jscoverage['js/lib/underscore.js'][1246]++;
    source += ("';\n" + evaluate + "\n__p+='");
  }
  _$jscoverage['js/lib/underscore.js'][1248]++;
  index = (offset + match.length);
  _$jscoverage['js/lib/underscore.js'][1249]++;
  return match;
}));
  _$jscoverage['js/lib/underscore.js'][1251]++;
  source += "';\n";
  _$jscoverage['js/lib/underscore.js'][1254]++;
  if ((! settings.variable)) {
    _$jscoverage['js/lib/underscore.js'][1254]++;
    source = ("with(obj||{}){\n" + source + "}\n");
  }
  _$jscoverage['js/lib/underscore.js'][1256]++;
  source = ("var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n");
  _$jscoverage['js/lib/underscore.js'][1260]++;
  try {
    _$jscoverage['js/lib/underscore.js'][1261]++;
    render = new Function((settings.variable || "obj"), "_", source);
  }
  catch (e) {
    _$jscoverage['js/lib/underscore.js'][1263]++;
    e.source = source;
    _$jscoverage['js/lib/underscore.js'][1264]++;
    throw e;
  }
  _$jscoverage['js/lib/underscore.js'][1267]++;
  if (data) {
    _$jscoverage['js/lib/underscore.js'][1267]++;
    return render(data, _);
  }
  _$jscoverage['js/lib/underscore.js'][1268]++;
  var template = (function (data) {
  _$jscoverage['js/lib/underscore.js'][1269]++;
  return render.call(this, data, _);
});
  _$jscoverage['js/lib/underscore.js'][1273]++;
  template.source = ("function(" + (settings.variable || "obj") + "){\n" + source + "}");
  _$jscoverage['js/lib/underscore.js'][1275]++;
  return template;
});
  _$jscoverage['js/lib/underscore.js'][1279]++;
  _.chain = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1280]++;
  return _(obj).chain();
});
  _$jscoverage['js/lib/underscore.js'][1290]++;
  var result = (function (obj) {
  _$jscoverage['js/lib/underscore.js'][1291]++;
  return (this._chain? _(obj).chain(): obj);
});
  _$jscoverage['js/lib/underscore.js'][1295]++;
  _.mixin(_);
  _$jscoverage['js/lib/underscore.js'][1298]++;
  each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], (function (name) {
  _$jscoverage['js/lib/underscore.js'][1299]++;
  var method = ArrayProto[name];
  _$jscoverage['js/lib/underscore.js'][1300]++;
  _.prototype[name] = (function () {
  _$jscoverage['js/lib/underscore.js'][1301]++;
  var obj = this._wrapped;
  _$jscoverage['js/lib/underscore.js'][1302]++;
  method.apply(obj, arguments);
  _$jscoverage['js/lib/underscore.js'][1303]++;
  if ((((name == "shift") || (name == "splice")) && (obj.length === 0))) {
    _$jscoverage['js/lib/underscore.js'][1303]++;
    (delete obj[0]);
  }
  _$jscoverage['js/lib/underscore.js'][1304]++;
  return result.call(this, obj);
});
}));
  _$jscoverage['js/lib/underscore.js'][1309]++;
  each(["concat", "join", "slice"], (function (name) {
  _$jscoverage['js/lib/underscore.js'][1310]++;
  var method = ArrayProto[name];
  _$jscoverage['js/lib/underscore.js'][1311]++;
  _.prototype[name] = (function () {
  _$jscoverage['js/lib/underscore.js'][1312]++;
  return result.call(this, method.apply(this._wrapped, arguments));
});
}));
  _$jscoverage['js/lib/underscore.js'][1316]++;
  _.extend(_.prototype, {chain: (function () {
  _$jscoverage['js/lib/underscore.js'][1320]++;
  this._chain = true;
  _$jscoverage['js/lib/underscore.js'][1321]++;
  return this;
}), value: (function () {
  _$jscoverage['js/lib/underscore.js'][1326]++;
  return this._wrapped;
})});
  _$jscoverage['js/lib/underscore.js'][1338]++;
  if ((((typeof define) === "function") && define.amd)) {
    _$jscoverage['js/lib/underscore.js'][1339]++;
    define("underscore", [], (function () {
  _$jscoverage['js/lib/underscore.js'][1340]++;
  return _;
}));
  }
}).call(this);
